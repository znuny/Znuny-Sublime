{
   "Modules" : {
      "AgentTicketActionCommon" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketArticleContent" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketAttachment" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketBounce" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketBulk" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketClose" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketCompose" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketCustomer" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketEmail" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketEmailOutbound" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketEmailResend" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketEscalationView" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketForward" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketFreeText" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketHistory" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketLock" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketLockedView" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketMentionView" : [
         "6.4",
         "6.5"
      ],
      "AgentTicketMerge" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketMove" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketNote" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketOwner" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketOwnerView" : [
         "6.4",
         "6.5"
      ],
      "AgentTicketPending" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketPhone" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketPhoneCommon" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketPhoneInbound" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketPhoneOutbound" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketPlain" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketPrint" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketPriority" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketProcess" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketQueue" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketResponsible" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketResponsibleView" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketSearch" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketService" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketStatusView" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketToUnitTest" : [
         "6.4",
         "6.5"
      ],
      "AgentTicketWatchView" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketWatcher" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "AgentTicketZoom" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "CustomerTicketArticleContent" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "CustomerTicketAttachment" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "CustomerTicketMessage" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "CustomerTicketOverview" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "CustomerTicketPrint" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "CustomerTicketProcess" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "CustomerTicketSearch" : [
         "6.0",
         "6.4",
         "6.5"
      ],
      "CustomerTicketZoom" : [
         "6.0",
         "6.4",
         "6.5"
      ]
   },
   "Objects" : {
      "ActivityDialogObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ActivityDialogCompletedCheck" : {
               "my $Completed = $ActivityDialogObject->ActivityDialogCompletedCheck(\n    ActivityDialogEntityID => $ActivityDialogEntityID,\n    Data                   => {\n        Queue         => 'Raw',\n        DynamicField1 => 'Value',\n        Subject       => 'Testsubject',\n        # ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ActivityDialogGet" : {
               "my $ActivityDialog = $ActivityDialogObject->ActivityDialogGet(\n    ActivityDialogEntityID => $ActivityDialogEntityID,\n    Interface              => ['AgentInterface'],   # ['AgentInterface'] or ['CustomerInterface'] or ['AgentInterface', 'CustomerInterface'] or 'all'\n    Silent                 => 1,    # 1 or 0, default 0, if set to 1, will not log errors about not matching interfaces\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ActivityDialogObject = $Kernel::OM->Get('Kernel::System::ProcessManagement::ActivityDialog');",
         "Package" : "Kernel::System::ProcessManagement::ActivityDialog"
      },
      "ActivityObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ActivityGet" : {
               "my $Activity = $ActivityObject->ActivityGet(\n    ActivityEntityID => $ActivityEntityID,\n    Interface        => ['AgentInterface'],   # ['AgentInterface'] or ['CustomerInterface'] or ['AgentInterface', 'CustomerInterface'] or 'all'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ActivityList" : {
               "my $Activities = $ActivityObject->ActivityList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ActivityObject = $Kernel::OM->Get('Kernel::System::ProcessManagement::Activity');",
         "Package" : "Kernel::System::ProcessManagement::Activity"
      },
      "ArticleObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ArticleAccountedTimeDelete" : {
               "my $Success = $ArticleObject->ArticleAccountedTimeDelete(\n    ArticleID => $ArticleID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleAccountedTimeGet" : {
               "my $AccountedTime = $ArticleObject->ArticleAccountedTimeGet(\n    ArticleID => $ArticleID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleAttachment" : {
               "my %Attachment = $ArticleObject->ArticleAttachment(\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID,\n    FileID    => $FileID,   # as returned by ArticleAttachmentIndex\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleAttachmentCount" : {
               "my $Count = $ArticleObject->ArticleAttachmentCount(\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleAttachmentIndex" : {
               "my %AttachmentIndex = $ArticleObject->ArticleAttachmentIndex(\n    TicketID         => $TicketID,\n    ArticleID        => $ArticleID,\n    ExcludePlainText => 1,       # (optional) Exclude plain text attachment\n    ExcludeHTMLBody  => 1,       # (optional) Exclude HTML body attachment\n    ExcludeInline    => 1,       # (optional) Exclude inline attachments\n    OnlyHTMLBody     => 1,       # (optional) Return only HTML body attachment, return nothing if not found\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleContentPathGet" : {
               "my $Path = $ArticleObject->ArticleContentPathGet(\n    ArticleID => $ArticleID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleCount" : {
               "my $Count = $ArticleObject->ArticleCount(\n    TicketID  => $TicketID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleFlagDelete" : {
               "my $Success = $ArticleObject->ArticleFlagDelete(\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID,\n    Key       => 'seen',\n    AllUsers  => 1,         # delete for all users\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $ArticleObject->ArticleFlagDelete(\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID,\n    Key       => 'seen',\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleFlagGet" : {
               "my %Flags = $ArticleObject->ArticleFlagGet(\n    ArticleID => $ArticleID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleFlagSet" : {
               "my $Success = $ArticleObject->ArticleFlagSet(\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID,\n    Key       => 'Seen',\n    Value     => 1,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleFlagsOfTicketGet" : {
               "my %Flags = $ArticleObject->ArticleFlagsOfTicketGet(\n    TicketID  => $TicketID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleIndex" : {
               "my @ArticleIDs = $ArticleObject->ArticleIndex(\n    SenderType => 'customer',                   # optional, to limit to a certain sender type\n    TicketID   => $TicketID,\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my @ArticleIDs = $ArticleObject->ArticleIndex(\n    TicketID => $TicketID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleList" : {
               "my @Articles = $ArticleObject->ArticleList(\n\n    TicketID               => $TicketID,\n\n    # Optional filters, these can be combined:\n\n    ArticleID              => $ArticleID,                # optional, limit to one article (if present on a ticket)\n    CommunicationChannel   => 'Email',            # optional, to limit to a certain CommunicationChannel\n    CommunicationChannelID => $CommunicationChannelID,                  # optional, to limit to a certain CommunicationChannelID\n    SenderType             => 'customer',         # optional, to limit to a certain article SenderType\n    SenderTypeID           => $SenderTypeID,                  # optional, to limit to a certain article SenderTypeID\n    IsVisibleForCustomer   => 0,                  # optional, to limit to a certain visibility\n\n    # After filtering, you can also limit to first or last found article only:\n\n    OnlyFirst              => 0,                  # optional, only return first match\n    OnlyLast               => 0,                  # optional, only return last match\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchIndexBuild" : {
               "my $Success = $ArticleObject->ArticleSearchIndexBuild(\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchIndexDelete" : {
               "my $Success = $ArticleObject->ArticleSearchIndexDelete(\n    ArticleID => $ArticleID,   # required, deletes search index for single article\n                        # or\n    TicketID  => $TicketID,   # required, deletes search index for all ticket articles\n\n    UserID    => $UserID,     # required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchIndexRebuildFlagList" : {
               "my %ArticleTicketIDs = $ArticleObject->ArticleSearchIndexRebuildFlagList(\n    Value => 1,     # (optional) 0/1 default 0\n    Limit => 10000, # (optional) default: 20000\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchIndexRebuildFlagSet" : {
               "my $Success = $ArticleObject->ArticleSearchIndexRebuildFlagSet(\n    ArticleIDs => [ 123, 234, 345 ]   # (Either 'ArticleIDs' or 'All' must be provided) The ArticleIDs to be updated.\n    All        => 1                   # (Either 'ArticleIDs' or 'All' must be provided) Set all articles to $Value. Default: 0,\n    Value      => 1, # 0/1 default 0\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchIndexSQLJoin" : {
               "my $SQLExtenion = $ArticleObject->ArticleSearchIndexSQLJoin(\n    SearchParams => {\n        ...\n        ConditionInline         => 1,\n        ContentSearchPrefix     => '*',\n        ContentSearchSuffix     => '*',\n        MIMEBase_From           => '%spam@example.com%',\n        MIMEBase_To             => '%service@example.com%',\n        MIMEBase_Cc             => '%client@example.com%',\n        MIMEBase_Subject        => '%VIRUS 32%',\n        MIMEBase_Body           => '%VIRUS 32%',\n        MIMEBase_AttachmentName => '%anyfile.txt%',\n        Chat_ChatterName        => '%Some Chatter Name%',\n        Chat_MessageText        => '%Some Message Text%'\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchIndexSQLJoinNeeded" : {
               "my $Needed = $ArticleObject->ArticleSearchIndexSQLJoinNeeded(\n    SearchParams => {\n        ...\n        ConditionInline         => 1,\n        ContentSearchPrefix     => '*',\n        ContentSearchSuffix     => '*',\n        MIMEBase_From           => '%spam@example.com%',\n        MIMEBase_To             => '%service@example.com%',\n        MIMEBase_Cc             => '%client@example.com%',\n        MIMEBase_Subject        => '%VIRUS 32%',\n        MIMEBase_Body           => '%VIRUS 32%',\n        MIMEBase_AttachmentName => '%anyfile.txt%',\n        Chat_ChatterName        => '%Some Chatter Name%',\n        Chat_MessageText        => '%Some Message Text%'\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchIndexStatus" : {
               "my %Status = $ArticleObject->ArticleSearchIndexStatus();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchIndexWhereCondition" : {
               "my $SQLExtenion = $ArticleObject->ArticleSearchIndexWhereCondition(\n    SearchParams => {\n        ...\n        ConditionInline         => 1,\n        ContentSearchPrefix     => '*',\n        ContentSearchSuffix     => '*',\n        MIMEBase_From           => '%spam@example.com%',\n        MIMEBase_To             => '%service@example.com%',\n        MIMEBase_Cc             => '%client@example.com%',\n        MIMEBase_Subject        => '%VIRUS 32%',\n        MIMEBase_Body           => '%VIRUS 32%',\n        MIMEBase_AttachmentName => '%anyfile.txt%',\n        Chat_ChatterName        => '%Some Chatter Name%',\n        Chat_MessageText        => '%Some Message Text%'\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSearchableFieldsList" : {
               "my %SearchableFields = $ArticleObject->ArticleSearchableFieldsList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSenderTypeList" : {
               "my %ArticleSenderTypeList = $ArticleObject->ArticleSenderTypeList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleSenderTypeLookup" : {
               "my $SenderType = $ArticleObject->ArticleSenderTypeLookup(\n    SenderTypeID => $SenderTypeID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $SenderTypeID = $ArticleObject->ArticleSenderTypeLookup(\n    SenderType => 'customer', # customer|system|agent\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleWriteAttachment" : {
               "my $Success = $ArticleObject->ArticleWriteAttachment(\n    TicketID           => $TicketID,\n    Content            => $ContentAsString,\n    ContentType        => 'text/html; charset=\"iso-8859-15\"',\n    Filename           => 'lala.html',\n    ContentID          => $ContentID,   # optional\n    ContentAlternative => 0,            # optional, alternative content to shown as body\n    Disposition        => 'attachment', # or 'inline'\n    ArticleID          => $ArticleID,\n    UserID             => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "BackendForArticle" : {
               "my $ArticleBackendObject = $ArticleObject->BackendForArticle( %BaseArticle );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $ArticleBackendObject = $ArticleObject->BackendForArticle( TicketID => $TicketID, ArticleID => 123 );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "BackendForChannel" : {
               "my $ArticleBackendObject = $ArticleObject->BackendForChannel( ChannelName => 'Email' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchStringStopWordsFind" : {
               "my $StopWords = $ArticleObject->SearchStringStopWordsFind(\n    SearchStrings => {\n        'Fulltext'      => '(this AND is) OR test',\n        'MIMEBase_From' => 'myself',\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchStringStopWordsUsageWarningActive" : {
               "my $WarningActive = $ArticleObject->SearchStringStopWordsUsageWarningActive();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketIDLookup" : {
               "my $TicketID = $ArticleObject->TicketIDLookup(\n    ArticleID => $ArticleID,   # required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ArticleObject = $Kernel::OM->Get('Kernel::System::Ticket::Article');",
         "Package" : "Kernel::System::Ticket::Article"
      },
      "AuthObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Auth" : {
               "if ( $AuthObject->Auth( User => $User, Pw => $Pw ) ) {\n    print \"Auth ok!\\n\";\n}\nelse {\n    print \"Auth invalid!\\n\";\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $User = $AuthObject->Auth(\n    User => $User,\n    Pw   => $Pw,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetLastErrorMessage" : {
               "my $AuthErrorMessage = $AuthObject->GetLastErrorMessage();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetOption" : {
               "if ( $AuthObject->GetOption( What => 'PreAuth' ) ) {\n    print \"No login screen is needed. Authentication is based on some other options. E. g. $ENV{REMOTE_USER}\\n\";\n}" : [
                  "6.0"
               ],
               "if ( $AuthObject->GetOption(What => 'PreAuth') ) {\n    print \"No login screen is needed. Authentication is based on some other options. E. g. $ENV{REMOTE_USER}\\n\";\n}" : [
                  "6.4",
                  "6.5"
               ],
               "my $AuthOption = $AuthObject->GetOption(What => 'PreAuth');" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $AuthObject = $Kernel::OM->Get('Kernel::System::Auth');",
         "Package" : "Kernel::System::Auth"
      },
      "AutoResponseObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AutoResponseAdd" : {
               "$AutoResponseObject->AutoResponseAdd(\n    Name        => 'Some::AutoResponse',\n    ValidID     => $ValidID,\n    Subject     => 'Some Subject..',\n    Response    => 'Auto Response Test....',\n    ContentType => 'text/plain',\n    AddressID   => $AddressID,\n    TypeID      => $TypeID,\n    UserID      => $UserID,\n);" : [
                  "6.0"
               ],
               "my $AutoResponseID = $AutoResponseObject->AutoResponseAdd(\n    Name        => 'Some::AutoResponse',\n    ValidID     => $ValidID,\n    Subject     => 'Some Subject..',\n    Response    => 'Auto Response Test....',\n    ContentType => 'text/plain',\n    AddressID   => $AddressID,\n    TypeID      => $TypeID,\n    UserID      => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "AutoResponseGet" : {
               "my %Data = $AutoResponseObject->AutoResponseGet(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "AutoResponseGetByTypeQueueID" : {
               "my %QueueAddressData = $AutoResponseObject->AutoResponseGetByTypeQueueID(\n    QueueID => $QueueID,\n    Type    => 'auto reply/new ticket',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "AutoResponseList" : {
               "my %AutoResponse = $AutoResponseObject->AutoResponseList(\n    Valid   => 1,                 # (optional) default 1\n    TypeID  => $TypeID,                 # (optional) Auto Response type ID\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "AutoResponseQueue" : {
               "my $Success = $AutoResponseObject->AutoResponseQueue(\n    QueueID         => $QueueID,\n    AutoResponseIDs => [1,2,3],\n    UserID          => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "AutoResponseTypeList" : {
               "my %AutoResponseType = $AutoResponseObject->AutoResponseTypeList(\n    Valid => 1,     # (optional) default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "AutoResponseUpdate" : {
               "$AutoResponseObject->AutoResponseUpdate(\n    ID          => 123,\n    Name        => 'Some::AutoResponse',\n    ValidID     => $ValidID,\n    Subject     => 'Some Subject..',\n    Response    => 'Auto Response Test....',\n    ContentType => 'text/plain',\n    AddressID   => $AddressID,\n    TypeID      => $TypeID,\n    UserID      => $UserID,\n);" : [
                  "6.0"
               ],
               "my $Success = $AutoResponseObject->AutoResponseUpdate(\n    ID          => 123,\n    Name        => 'Some::AutoResponse',\n    ValidID     => $ValidID,\n    Subject     => 'Some Subject..',\n    Response    => 'Auto Response Test....',\n    ContentType => 'text/plain',\n    AddressID   => $AddressID,\n    TypeID      => $TypeID,\n    UserID      => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "AutoResponseWithoutQueue" : {
               "my %AutoResponseWithoutQueue = $AutoResponseObject->AutoResponseWithoutQueue();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $AutoResponseObject = $Kernel::OM->Get('Kernel::System::AutoResponse');",
         "Package" : "Kernel::System::AutoResponse"
      },
      "AutocompletionObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GetAutocompletionSettings" : {
               "my $AutocompletionSettings = $AutocompletionObject->GetAutocompletionSettings();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetData" : {
               "my $Data = $AutocompletionObject->GetData(\n    Trigger          => '!EX', # !EX is from example autocompletion module Kernel::System::Autocompletion::Example\n    SearchString     => 'Raw',\n    UserID           => $UserID,\n    AdditionalParams => { # optional\n        TicketID => $TicketID, # this will only be passed if available (e.g. it's not available for AgentTicketPhone)\n    },\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $AutocompletionObject = $Kernel::OM->Get('Kernel::System::Autocompletion');",
         "Package" : "Kernel::System::Autocompletion"
      },
      "BackendObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AllValuesDelete" : {
               "my $Success = $BackendObject->AllValuesDelete(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    UserID             => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "BuildSelectionDataGet" : {
               "my $DataValues = $BackendObject->BuildSelectionDataGet(\n    DynamicFieldConfig => $DynamicFieldConfig,       # complete config of the DynamicField\n    PossibleValues     => $PossibleValues,           # field possible values (could be reduced\n                                                     #    by ACLs)\n    Value              => $Value,                    # optional scalar, ArrayRef or HashRef\n                                                     #    depending on dynamic field the\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ColumnFilterValuesGet" : {
               "my $ColumnFilterValues = $BackendObject->ColumnFilterValuesGet(\n    DynamicFieldConfig => $DynamicFieldConfig,      #DynamicField configuraction\n    LayoutObject       => $LayoutObject,\n    TicketIDs          => [23, 1, 56, 74],          # array ref list of ticket IDs\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DisplayValueRender" : {
               "my $ValueStrg = $BackendObject->DisplayValueRender(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    Value              => 'Any value',              # Optional\n    HTMLOutput         => 1,                        # or 0, default 1, to return HTML ready\n                                                    #    values\n    ValueMaxChars      => 20,                       # Optional (for HTMLOutput only)\n    TitleMaxChars      => 20,                       # Optional (for HTMLOutput only)\n    LayoutObject       => $LayoutObject,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "EditFieldRender" : {
               "my $FieldHTML = $BackendObject->EditFieldRender(\n    DynamicFieldConfig   => $DynamicFieldConfig,      # complete config of the DynamicField\n    ParamObject          => $ParamObject,\n    LayoutObject         => $LayoutObject,\n    PossibleValuesFilter => {                         # Optional. Some backends may support this.\n        'Key1' => 'Value1',                           #     This may be needed to realize ACL support for ticket masks,\n        'Key2' => 'Value2',                           #     where the possible values can be limited with and ACL.\n    },\n    Template             => {                         # Optional data structure of GenericAgent etc.\n        Owner => 2,                                   # Value is accessable via field name (DynamicField_ + field name)\n        Title => 'Generic Agent Job was here'         # and could be a scalar, Hash- or ArrayRef\n        ...\n        DynamicField_ExampleField1 => 'Value 1'\n    },\n    Value                => 'Any value',              # Optional\n    Mandatory            => 1,                        # 0 or 1,\n    Class                => 'AnyCSSClass OrOneMore',  # Optional\n    ServerError          => 1,                        # 0 or 1,\n    ErrorMessage         => $ErrorMessage,            # Optional or a default will be used in error case\n    UseDefaultValue      => 1,                        # 0 or 1, 1 default\n    OverridePossibleNone => 1,                        # Optional, 0 or 1. If defined orverrides the Possible None\n                                                      #     setting of all dynamic fields (where applies) with the\n                                                      #     defined value\n    ConfirmationNeeded   => 0,                        # Optional, 0 or 1, default 0. To display a confirmation element\n                                                      #     on fields that apply (like checkbox)\n    AJAXUpdate           => 1,                        # Optional, 0 ir 1. To create JS code for field change to update\n                                                      #     the form using ACLs triggered by the field.\n    UpdatableFields      => [                         # Optional, to use if AJAXUpdate is 1. List of fields to display a\n        'NetxStateID',                                #     spinning wheel when reloading via AJAXUpdate.\n        'PriorityID',\n    ],\n    MaxLength            => 100                       # Optional, defines the maximum number of characters on fields\n                                                      #      where applies (like TextArea)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "EditFieldValueGet" : {
               "my $Value = $BackendObject->EditFieldValueGet(\n    DynamicFieldConfig      => $DynamicFieldConfig, # complete config of the DynamicField\n    ParamObject             => $ParamObject,        # the current request data\n    TransformDates          => 0                    # 1 || 0, default 1, to transform the dynamic fields that\n                                                    #   use dates to the user time zone (i.e. Date, DateTime\n                                                    #   dynamic fields)\n\n    Template                => $Template            # stored values from DB like Search profile or Generic Agent job\n    ReturnTemplateStructure => 1,                   # 0 || 1, default 0\n                                                    #   Returns the structured values as got from the http request\n                                                    #   (only for backend internal use).\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Value = $BackendObject->EditFieldValueGet(\n    DynamicFieldConfig   => $DynamicFieldConfig,    # complete config of the DynamicField\n    ParamObject          => $ParamObject,           # the current request data\n    LayoutObject         => $LayoutObject,          # used to transform dates to user time zone\n    TransformDates       => 1                       # 1 || 0, default 1, to transform the dynamic fields that\n                                                    #   use dates to the user time zone (i.e. Date, DateTime\n                                                    #   dynamic fields)\n    Template             => $Template,\n    ReturnValueStructure => 0,                      # 0 || 1, default 0\n                                                    #   Returns special structure\n                                                    #   (only for backend internal use).\n    ReturnTemplateStructure => 0,                   # 0 || 1, default 0\n                                                    #   Returns the structured values as got from the http request\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "EditFieldValueValidate" : {
               "my $Result = $BackendObject->EditFieldValueValidate(\n    DynamicFieldConfig   => $DynamicFieldConfig,      # complete config of the DynamicField\n    PossibleValuesFilter => {                         # Optional. Some backends may support this.\n        'Key1' => 'Value1',                           #     This may be needed to realize ACL support for ticket masks,\n        'Key2' => 'Value2',                           #     where the possible values can be limited with and ACL.\n    },\n    ParamObject          => $Self->{ParamObject}      # To get the values directly from the web request\n    Mandatory            => 1,                        # 0 or 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FieldValueValidate" : {
               "my $Success = $BackendObject->FieldValueValidate(\n    DynamicFieldConfig => $DynamicFieldConfig,      # Complete config of the DynamicField.\n    Value              => $Value,                   # Value to validate from possible options.\n    UserID             => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HasBehavior" : {
               "my $Success = $BackendObject->HasBehavior(\n    DynamicFieldConfig => $DynamicFieldConfig,       # complete config of the DynamicField\n    Behavior           => 'Some Behavior',           # 'IsACLReducible' to be reduded by ACLs\n                                                     #    and updatable via AJAX\n                                                     # 'IsNotificationEventCondition' to be used\n                                                     #     in the notification events as a\n                                                     #     ticket condition\n                                                     # 'IsSortable' to sort by this field in\n                                                     #     \"Small\" overviews\n                                                     # 'IsStatsCondition' to be used in\n                                                     #     Statistics as a condition\n                                                     # 'IsCustomerInterfaceCapable' to make\n                                                     #     the field usable in the customer\n                                                     #     interface\n                                                     # 'IsHTMLContent' to indicate that there is                                                        # 'IsCustomerInterfaceCapable' to make\n                                                     #     HTML content (avoid duble cnversion to HTML)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HistoricalValuesGet" : {
               "my $HistorialValues = $BackendObject->HistoricalValuesGet(\n    DynamicFieldConfig => $DynamicFieldConfig,       # complete config of the DynamicField\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectMatch" : {
               "my $Match = $BackendObject->ObjectMatch(\n    DynamicFieldConfig => $DynamicFieldConfig,       # complete config of the DynamicField\n    Value              => $Value,                    # single value to match\n    ObjectAttributes   => $ObjectAttributes,         # the complete set of attributes from an object\n                                                     #      ( i.e. the result of a TicketGet() )\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PossibleValuesGet" : {
               "my $PossibleValues = $BackendObject->PossibleValuesGet(\n    DynamicFieldConfig => $DynamicFieldConfig,       # complete config of the DynamicField\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RandomValueSet" : {
               "my $Result = $BackendObject->RandomValueSet(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    ObjectID           => $ObjectID,                # ID of the current object that the field\n                                                    # must be linked to, e. g. TicketID\n    UserID             => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ReadableValueRender" : {
               "my $ValueStrg = $BackendObject->ReadableValueRender(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    Value              => 'Any value',              # Optional\n    ValueMaxChars      => 20,                       # Optional\n    TitleMaxChars      => 20,                       # Optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchFieldParameterBuild" : {
               "my $DynamicFieldSearchParameter = $BackendObject->SearchFieldParameterBuild(\n    DynamicFieldConfig   => $DynamicFieldConfig,    # complete config of the DynamicField\n    LayoutObject         => $LayoutObject,          # optional\n    Profile              => $ProfileData,           # the search profile\n    Type                 => 'some type',            # search preference type\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchFieldPreferences" : {
               "my $SearchFieldPreferences = $BackendObject->SearchFieldPreferences(\n    DynamicFieldConfig => $DynamicFieldConfig,       # complete config of the DynamicField\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchFieldRender" : {
               "my $FieldHTML = $BackendObject->SearchFieldRender(\n    DynamicFieldConfig   => $DynamicFieldConfig,      # complete config of the DynamicField\n    ParamObject          => $ParamObject,\n    Profile              => $ProfileData,             # search template data to load\n    PossibleValuesFilter => {                         # optional. Some backends may support this.\n        'Key1' => 'Value1',                           #     This may be needed to realize ACL support for ticket masks,\n        'Key2' => 'Value2',                           #     where the possible values can be limited with and ACL.\n    },\n    DefaultValue         => $Value,                   # optional, depending on each field type e.g\n                                                      #   $Value = a text';\n                                                      #   $Value\n                                                      #       = 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StartYear=1977;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StartMonth=12;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StartDay=12;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StartHour=00;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StartMinute=00;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StartSecond=00;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StopYear=2011;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StopMonth=09;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StopDay=29;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StopHour=23;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StopMinute=59;'\n                                                      #       . 'DynamicField_' . $DynamicFieldConfig->{Name} . 'StopSecond=59;';\n                                                      #\n                                                      #   $Value =  1;\n    ConfirmationCheckboxes => 0,                      # or 1, to dislay confirmation checkboxes\n    UseLabelHints          => 1,                      # or 0, default 1. To display seach hints in labels\n    Type                   => 'some type',            # search preference type\n\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchFieldValueGet" : {
               "my $Value = $BackendObject->SearchFieldValueGet(\n    DynamicFieldConfig     => $DynamicFieldConfig,    # complete config of the DynamicField\n    ParamObject            => $ParamObject,           # the current request data\n    Profile                => $ProfileData,           # the serach profile\n    ReturnProfileStructure => 0,                      # 0 || 1, default 0\n                                                      #   Returns the structured values as got from the http request\n    Type                   => 'some type',            # search preference type\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Value = $BackendObject->SearchFieldValueGet(\n    DynamicFieldConfig   => $DynamicFieldConfig,      # complete config of the DynamicField\n    ParamObject          => $ParamObject,             # the current request data\n    Profile              => $ProfileData,             # the serach profile\n    ReturnProfileStructure => 1,                      # 0 || 1, default 0\n                                                      #   Returns the structured values as got from the http request\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchSQLGet" : {
               "my $SQL = $BackendObject->SearchSQLGet(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    TableAlias         => $TableAlias,              # the alias of the already joined dynamic_field_value table to use\n    SearchTerm         => $SearchTerm,              # What to look for. Placeholders in LIKE searches must be passed as %.\n    Operator           => $Operator,                # One of [Equals, Like, GreaterThan, GreaterThanEquals, SmallerThan, SmallerThanEquals]\n                                                    #   The supported operators differ for the different backends.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchSQLOrderFieldGet" : {
               "my $SQL = $BackendObject->SearchSQLOrderFieldGet(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    TableAlias         => $TableAlias,              # the alias of the already joined dynamic_field_value table to use\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsFieldParameterBuild" : {
               "my $DynamicFieldStatsParameter =  $BackendObject->StatsFieldParameterBuild(\n    DynamicFieldConfig   => $DynamicFieldConfig,      # complete config of the DynamicField\n    PossibleValuesFilter => ['value1', 'value2'],     # Optional. Some backends may support this.\n                                                      #     This may be needed to realize ACL support for ticket masks,\n                                                      #     where the possible values can be limited with and ACL.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsSearchFieldParameterBuild" : {
               "my $DynamicFieldStatsSearchParameter = $BackendObject->StatsSearchFieldParameterBuild(\n    DynamicFieldConfig   => $DynamicFieldConfig,    # complete config of the DynamicField\n    Value                => $Value,                 # the serach profile\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TemplateValueTypeGet" : {
               "my $ValueType = $BackendObject->TemplateValueTypeGet(\n    DynamicFieldConfig => $DynamicFieldConfig,\n    FieldType => 'All',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $ValueType = $BackendObject->TemplateValueTypeGet(\n    DynamicFieldConfig => $DynamicFieldConfig,\n    FieldType => 'Search',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $ValueType = $BackendObject->TemplateValueTypeGet(\n    DynamicFieldConfig => $DynamicFieldConfig,       # complete config of the DynamicField\n    FieldType => 'Edit',                             # or 'Search' or 'All'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueDelete" : {
               "my $Success = $BackendObject->ValueDelete(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    ObjectID           => $ObjectID,                # ID of the current object that the field\n                                                    # must be linked to, e. g. TicketID\n    UserID             => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueGet" : {
               "my $Value = $BackendObject->ValueGet(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    ObjectID           => $ObjectID,                # ID of the current object that the field\n                                                    # must be linked to, e. g. TicketID\n    ObjectName         => $ObjectName,              # Name of the current object that the field\n                                                    # must be linked to, e. g. CustomerUserLogin\n                                                    # You have to give either ObjectID OR ObjectName\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueIsDifferent" : {
               "my $Success = $BackendObject->ValueIsDifferent(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n                                                    # must be linked to, e. g. TicketID\n    Value1             => $Value1,                  # Dynamic Field Value\n    Value2             => $Value2,                  # Dynamic Field Value\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueLookup" : {
               "my $Value = $BackendObject->ValueLookup(\n    DynamicFieldConfig => $DynamicFieldConfig,       # complete config of the DynamicField\n    Key                => 'sotred value',             # could also be an array ref for\n                                                     #    MultipleSelect fields\n    LanguageObject     => $LanguageObject,            # optional, used to get value translations\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueSearch" : {
               "my $Value = $BackendObject->ValueSearch(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    Search             => 'search term',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueSet" : {
               "my $Success = $BackendObject->ValueSet(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    # OR\n    DynamicFieldName => 'MyField',                  # Implicitly fetches config of dynamic field\n\n    ObjectID           => $ObjectID,                # ID of the current object that the field\n                                                    # must be linked to, e. g. TicketID\n    ObjectName         => $ObjectName,              # Name of the current object that the field\n                                                    # must be linked to, e. g. CustomerUserLogin\n                                                    # You have to give either ObjectID OR ObjectName\n    Value              => $Value,                   # Value to store, depends on backend type\n    UserID             => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Success = $BackendObject->ValueSet(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    ObjectID           => $ObjectID,                # ID of the current object that the field\n                                                    # must be linked to, e. g. TicketID\n    ObjectName         => $ObjectName,              # Name of the current object that the field\n                                                    # must be linked to, e. g. CustomerUserLogin\n                                                    # You have to give either ObjectID OR ObjectName\n    Value              => $Value,                   # Value to store, depends on backend type\n    UserID             => $UserID,\n);" : [
                  "6.0"
               ]
            },
            "ValueValidate" : {
               "my $Success = $BackendObject->ValueValidate(\n    DynamicFieldConfig => $DynamicFieldConfig,      # complete config of the DynamicField\n    Value              => $Value,                   # Value to store, depends on backend type\n    UserID             => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $BackendObject = $Kernel::OM->Get('Kernel::System::DynamicField::Backend');",
         "Package" : "Kernel::System::DynamicField::Backend"
      },
      "CSVObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Array2CSV" : {
               "$CSV = $CSVObject->Array2CSV(\n    WithHeader => [ 'RowA', 'RowB', ],   # optional\n    Head       => [ 'RowA', 'RowB', ],   # optional\n    Data       => [\n        [ 1, 4 ],\n        [ 7, 3 ],\n        [ 1, 9 ],\n        [ 34, 4 ],\n    ],\n    Separator => ';',  # optional separator (default is ;)\n    Quote     => '\"',  # optional quote (default is \")\n    Format    => 'CSV', # optional format [Excel|CSV ] (default is CSV)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CSV2Array" : {
               "my $RefArray = $CSVObject->CSV2Array(\n    String    => $CSVString,\n    Separator => ';', # optional separator (default is ;)\n    Quote     => '\"', # optional quote (default is \")\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CSVObject = $Kernel::OM->Get('Kernel::System::CSV');",
         "Package" : "Kernel::System::CSV"
      },
      "CacheObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CleanUp" : {
               "$CacheObject->CleanUp(\n    Expired => 1,   # optional, defaults to 0\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$CacheObject->CleanUp(\n    KeepTypes => ['Object1', 'Object2'],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$CacheObject->CleanUp(\n    Type => 'ObjectName',   # only [a-zA-Z0-9_] chars usable\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$CacheObject->CleanUp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Configure" : {
               "$CacheObject->Configure(\n    CacheInMemory  => 1,    # optional\n    CacheInBackend => 1,    # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Delete" : {
               "$CacheObject->Delete(\n    Type => 'ObjectName',       # only [a-zA-Z0-9_] chars usable\n    Key  => 'SomeKey',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Get" : {
               "my $Value = $CacheObject->Get(\n    Type => 'ObjectName',\n    Key  => 'SomeKey',\n\n    CacheInMemory => 0,     # optional, defaults to 1\n    CacheInBackend => 1,    # optional, defaults to 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Value = $CacheObject->Get(\n    Type => 'ObjectName',       # only [a-zA-Z0-9_] chars usable\n    Key  => 'SomeKey',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Set" : {
               "$CacheObject->Set(\n    Type  => 'ObjectName',\n    Key   => 'SomeKey',\n    Value => { ... complex data ... },\n\n    TTL            => 60 * 60 * 24 * 1,  # optional, default 20 days\n    CacheInMemory  => 0,                 # optional, defaults to 1\n    CacheInBackend => 1,                 # optional, defaults to 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$CacheObject->Set(\n    Type  => 'ObjectName',      # only [a-zA-Z0-9_] chars usable\n    Key   => 'SomeKey',\n    Value => 'Some Value',\n    TTL   => 60 * 60 * 24 * 20, # seconds, this means 20 days\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CacheObject = $Kernel::OM->Get('Kernel::System::Cache');",
         "Package" : "Kernel::System::Cache"
      },
      "CalendarEventsObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "BuildString" : {
               "my $OutputString = $CalendarEventsObject->BuildString(\n    Data => {\n      'Type'      => 'Recurrent', # required\n      'Interval'  => '5',\n      'ByDay'     => 'SU,TU,WE,TH,FR,SA',\n      'AllDay'    => 1,\n      'Frequency' => 'Weekly'\n    },\n    Type => 'Frequency',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FindEvents" : {
               "my $Result = $CalendarEventsObject->FindEvents(\n    String => [\n        {\n            Content =>\n                \"Hello! You've got an invitation for a meeting:\n                BEGIN:VCALENDAR\n                ..\n                END:VCALENDAR\"\n        }\n    ],\n    Attachments => [\n        {\n            Content =>\n                \"Hello! You've got an invitation for a meeting:\n                BEGIN:VCALENDAR\n                ..\n                END:VCALENDAR\"\n        },\n        {\n            Content =>\n                \"Hello! You've got an invitation for a meeting:\n                BEGIN:VCALENDAR\n                ..\n                END:VCALENDAR\"\n        },\n        ..\n    ],\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Parse" : {
               "my $CalendarEventsData = $CalendarEventsObject->Parse(\n    TicketID    => $Param{TicketID},\n    ArticleID   => $Param{ArticleID},\n    String      => $ArticleContent, # parse specified text content\n    Attachments => { # parse attachments\n        Data => {\n            '4' => {\n                'Disposition' => 'attachment',\n                'ContentType' => 'text/calendar; charset=UTF-8; name=\"Some calendar name.ics\"',\n                'Filename'    => 'calendar.ics',\n                'FilesizeRaw' => '949'\n            },\n            '1' => {\n                'Disposition' => 'attachment',\n                'ContentType' => 'text/calendar; charset=UTF-8; name=\"Some calendar name1.ics\"',\n                'Filename'    => 'calendar1.ics',\n                'FilesizeRaw' => '2967'\n            },\n        },\n        Type => \"Article\", # specify type of attachments\n    },\n    ToTimeZone => $UserTimeZone,\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CalendarEventsObject = $Kernel::OM->Get('Kernel::System::CalendarEvents');",
         "Package" : "Kernel::System::CalendarEvents"
      },
      "CalendarObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CalendarCreate" : {
               "my %Calendar = $CalendarObject->CalendarCreate(\n    CalendarName    => 'Meetings',          # (required) Personal calendar name\n    GroupID         => $GroupID,                   # (required) GroupID\n    Color           => '#FF7700',           # (required) Color in hexadecimal RGB notation\n    UserID          => $UserID,                   # (required) UserID\n\n    TicketAppointments => [                 # (optional) Ticket appointments, array ref of hashes\n        {\n            StartDate => 'FirstResponse',\n            EndDate   => 'Plus_5',\n            QueueID   => [ $QueueID ],\n            SearchParams => {\n                Title => 'This is a title',\n                Types => 'This is a type',\n            },\n        },\n    ],\n\n    ValidID => $ValidID,                   # (optional) Default is 1.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CalendarExport" : {
               "my %Data = $CalendarObject->CalendarExport(\n    CalendarID => $CalendarID,\n    UserID     => $UserID,\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CalendarGet" : {
               "my %Calendar = $CalendarObject->CalendarGet(\n    CalendarName => 'Meetings',          # (required) Calendar name\n                                         # or\n    CalendarID   => $CalendarID,                   # (required) CalendarID\n\n    UserID       => $UserID,                   # (optional) UserID - System will check if user has access to calendar if provided\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CalendarImport" : {
               "my $Success = $CalendarObject->CalendarImport(\n    Data => {\n        CalendarData => {\n            CalendarID   => $CalendarID,\n            GroupID      => $GroupID,\n            CalendarName => 'Meetings',\n            Color        => '#FF7700',\n            ValidID      => $ValidID,\n        },\n        AppointmentData => {\n            {\n                AppointmentID       => $AppointmentID,\n                ParentID            => $ParentID,\n                CalendarID          => $CalendarID,\n                UniqueID            => $UniqueID,\n                ...\n            },\n            ...\n        },\n    },\n    OverwriteExistingEntities => 0,     # (optional) Overwrite existing calendar and appointments, default: 0\n                                        # Calendar with same name will be overwritten\n                                        # Appointments with same UniqueID in existing calendar will be overwritten\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CalendarList" : {
               "my @Result = $CalendarObject->CalendarList(\n    UserID     => $UserID,            # (optional) For permission check\n    Permission => 'rw',         # (optional) Required permission (default ro)\n    ValidID    => $ValidID,            # (optional) Default 0.\n                                # 0 - All states\n                                # 1 - All valid\n                                # 2 - All invalid\n                                # 3 - All temporary invalid\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CalendarPermissionGet" : {
               "my $Permission = $CalendarObject->CalendarPermissionGet(\n    CalendarID  => $CalendarID,                   # (required) CalendarID\n    UserID      => $UserID,                   # (required) UserID\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CalendarUpdate" : {
               "my $Success = $CalendarObject->CalendarUpdate(\n    CalendarID       => $CalendarID,                   # (required) CalendarID\n    GroupID          => $GroupID,                   # (required) Calendar group\n    CalendarName     => 'Meetings',          # (required) Personal calendar name\n    Color            => '#FF9900',           # (required) Color in hexadecimal RGB notation\n    UserID           => $UserID,                   # (required) UserID (who made update)\n    ValidID          => $ValidID,                   # (required) ValidID\n\n    TicketAppointments => [                 # (optional) Ticket appointments, array ref of hashes\n        {\n            StartDate => 'FirstResponse',\n            EndDate   => 'Plus_5',\n            QueueID   => [ $QueueID ],\n            SearchParams => {\n                Title => 'This is a title',\n                Types => 'This is a type',\n            },\n        },\n    ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetAccessToken" : {
               "my $Token = $CalendarObject->GetAccessToken(\n    CalendarID => $CalendarID,              # (required) CalendarID\n    UserLogin  => 'agent-1',      # (required) User login\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetTextColor" : {
               "my $BestTextColor = $CalendarObject->GetTextColor(\n    Background => '#FFF',    # (required) must be in valid hexadecimal RGB notation\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentDelete" : {
               "my $Success = $CalendarObject->TicketAppointmentDelete(\n    CalendarID    => $CalendarID,                                     # (required) CalendarID\n    RuleID        => $RuleID,    # (required) RuleID\n                                                            # or\n    TicketID      => $TicketID,                                     # (required) Ticket ID\n\n    AppointmentID => $AppointmentID,                                     # (optional) Appointment ID is known\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentProcessCalendar" : {
               "my %Result = $CalendarObject->TicketAppointmentProcessCalendar(\n    CalendarID => $CalendarID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentProcessRule" : {
               "my $Success = $CalendarObject->TicketAppointmentProcessRule(\n    CalendarID => $CalendarID,\n    Config => {\n        DynamicField_TestDate => {\n            Module => 'Kernel::System::Calendar::Ticket::DynamicField',\n        },\n        ...\n    },\n    Rule => {\n        StartDate => 'DynamicField_TestDate',\n        EndDate   => 'Plus_5',\n        QueueID   => [ $QueueID ],\n        RuleID    => $RuleID,\n        SearchParams => {\n            Title => 'Welcome*',\n        },\n    },\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentProcessTicket" : {
               "$CalendarObject->TicketAppointmentProcessTicket(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentRuleGet" : {
               "my $Rule = $CalendarObject->TicketAppointmentRuleGet(\n    CalendarID => $CalendarID,\n    RuleID     => $RuleID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentRuleIDsGet" : {
               "my @RuleIDs = $CalendarObject->TicketAppointmentRuleIDsGet(\n    CalendarID => $CalendarID,\n    TicketID   => $TicketID,    # (optional) Return rules used only for specific ticket\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentTicketID" : {
               "my $TicketID = $CalendarObject->TicketAppointmentTicketID(\n    AppointmentID => $AppointmentID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentTypesGet" : {
               "my %TicketAppointmentTypes = $CalendarObject->TicketAppointmentTypesGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAppointmentUpdateTicket" : {
               "$CalendarObject->TicketAppointmentUpdateTicket(\n    AppointmentID => $AppointmentID,\n    TicketID      => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CalendarObject = $Kernel::OM->Get('Kernel::System::Calendar');",
         "Package" : "Kernel::System::Calendar"
      },
      "CheckItemObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AreEmailAddressesValid" : {
               "my $EmailAddressesAreValid = $CheckItemObject->AreEmailAddressesValid(\n    EmailAddresses => 'test@example.org, test2@example.org',\n\n    # or as array ref\n    EmailAddresses => [\n        'test@example.org',\n        'test2@example.org',\n    ],\n\n    # also works with just one address\n    EmailAddresses => 'test@example.org',\n\n    # or as array ref\n    EmailAddresses => ['test@example.org'],\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CheckEmail" : {
               "my $Valid = $CheckItemObject->CheckEmail(\n    Address => 'info@example.com',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CheckError" : {
               "my $Error = $CheckItemObject->CheckError();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CheckErrorType" : {
               "my $ErrorType = $CheckItemObject->CheckErrorType();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CreditCardClean" : {
               "my ($StringRef, $Found) = $CheckItemObject->CreditCardClean(\n    StringRef => \\'String',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StringClean" : {
               "my $StringRef = $CheckItemObject->StringClean(\n    StringRef               => \\'String',\n    TrimLeft                => 0,  # (optional) default 1\n    TrimRight               => 0,  # (optional) default 1\n    RemoveAllNewlines       => 1,  # (optional) default 0\n    RemoveAllTabs           => 1,  # (optional) default 0\n    RemoveAllSpaces         => 1,  # (optional) default 0\n    ReplaceWithWhiteSpace   => 1,  # (optional) default 0\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CheckItemObject = $Kernel::OM->Get('Kernel::System::CheckItem');",
         "Package" : "Kernel::System::CheckItem"
      },
      "CommunicationChannelObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ChannelAdd" : {
               "my $ChannelID = $CommunicationChannelObject->ChannelAdd(\n    ChannelName => 'Email',                                          # (required) Communication channel name\n    Module      => 'Kernel::System::CommunicationChannel::Internal', # (required) Module\n    PackageName => 'Framework',                                      # (required) Package name\n    ChannelData => {...},                                            # (optional) Additional channel data (can be array, hash, scalar).\n    ValidID     => $ValidID,                                                # (optional) Default 1.\n    UserID      => $UserID,                                                # (required) UserID\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ChannelDelete" : {
               "my $Success = $CommunicationChannelObject->ChannelDelete(\n    ChannelID   => $ChannelID,       # (optional) Delete by ChannelID\n                            # or\n    ChannelName => 'Email', # (optional) Delete by Channel name\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ChannelDrop" : {
               "my $Success = $CommunicationChannelObject->ChannelDrop(\n    ChannelID   => $ChannelID,               # (required) Delete by channel ID\n                                    # or\n    ChannelName => 'SomeChannel',   # (required) Delete by channel name\n\n    DropArticleData => 1,           # (optional) Also drop article data if possible, default: 0\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ChannelGet" : {
               "my %CommunicationChannel = $CommunicationChannelObject->ChannelGet(\n    ChannelID   => $ChannelID,      # (optional) Communication channel id\n                             # or\n    ChannelName => 'Email',  # (optional) Communication channel name\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ChannelList" : {
               "my @CommunicationChannels = $CommunicationChannelObject->ChannelList(\n    ValidID => $ValidID,           # (optional) filter by ValidID\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ChannelObjectGet" : {
               "my $Object = $CommunicationChannelObject->ChannelObjectGet(\n    ChannelID => $ChannelID,             # ChannelName or ChannelID required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Object = $CommunicationChannelObject->ChannelObjectGet(\n    ChannelName => 'Email',     # ChannelName or ChannelID required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ChannelSync" : {
               "my %Result = $CommunicationChannelObject->ChannelSync(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ChannelUpdate" : {
               "my $Success = $CommunicationChannelObject->ChannelUpdate(\n    ChannelID   => $ChannelID,                                              # (required) ChannelID that will be updated\n    ChannelName => 'Email',                                          # (required) New channel name\n    Module      => 'Kernel::System::CommunicationChannel::Internal', # (optional) Module\n    PackageName => 'Framework',                                      # (optional) Package name\n    ChannelData => {...},                                            # (optional) Additional channel data (can be array, hash, scalar)\n    ValidID     => $ValidID,                                                # (optional) ValidID\n    UserID      => $UserID,                                                # (required) UserID\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CommunicationChannelObject = $Kernel::OM->Get('Kernel::System::CommunicationChannel');",
         "Package" : "Kernel::System::CommunicationChannel"
      },
      "CommunicationLogObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CommunicationIDGet" : {
               "my $CommunicationID = $CommunicationLogObject->CommunicationIDGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CommunicationStop" : {
               "my $Success = $CommunicationLogObject->CommunicationStop(\n    Status => 'Successful', # (required) Needs to be either 'Successful', 'Warning' or 'Failed'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DirectionGet" : {
               "my $Direction = $CommunicationLogObject->DirectionGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "IsObjectLogOpen" : {
               "my $Result = $CommunicationLogObject->IsObjectLogOpen(\n    ObjectLogType => '...',     # Required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectLog" : {
               "my $Success = $CommunicationLogObject->ObjectLog(\n    ObjectLogType => '...' # (required) To be defined by the related LogObject\n    ObjectLogID   => $ObjectLogID, # (required) The ObjectID of the started object type\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectLogStart" : {
               "my $ObjectID = $CommunicationLogObject->ObjectLogStart(\n    ObjectType => 'Connection' # (required) Can be 'Connection' or 'Message'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectLogStop" : {
               "my $Success = $CommunicationLogObject->ObjectLogStop(\n    ObjectLogType => 'Connection'                        # (required) Can be 'Connection' or 'Message'\n    ObjectLogID   => $ObjectLogID, # (required) The ObjectID of the started object type\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectLookupGet" : {
               "my $Result = $CommunicationLogObject->ObjectLookupGet(\n    TargetObjectID   => $TargetObjectID,\n    TargetObjectType => '...',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectLookupSet" : {
               "my $Result = $CommunicationLogObject->ObjectLookupSet(\n    ObjectID         => $ObjectID,       # (required)\n    TargetObjectType => 'Article', # (required)\n    TargetObjectID   => $TargetObjectID,       # (required)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatusGet" : {
               "my $Direction = $CommunicationLogObject->StatusGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TransportGet" : {
               "my $Transport = $CommunicationLogObject->TransportGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CommunicationLogObject = $Kernel::OM->Create(\n        'Kernel::System::CommunicationLog',\n        ObjectParams => {\n            CommunicationID => 123,\n        }\n    );",
         "Package" : "Kernel::System::CommunicationLog"
      },
      "ConfigObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Get" : {
               "my $Value = $ConfigObject->Get('My::Setting::Name');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Set" : {
               "$ConfigObject->Set(\n    Key   => 'My::Setting::Name',\n    Value => 42,    # new value; set to undef to remove the setting\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ConfigObject = $Kernel::OM->Get('Kernel::Config');",
         "Package" : "Kernel::Config"
      },
      "CronEventObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GenericAgentSchedule2CronTab" : {
               "my $Schedule = $CronEventObject->GenericAgentSchedule2CronTab(\n    ScheduleMinutes [1,2,3],\n    ScheduleHours   [1,2,3],\n    ScheduleDays    [1,2,3],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NextEventGet" : {
               "my $EventSystemTime = $CronEventObject->NextEventGet(\n    Schedule      => '*/2 * * * *',    # recurrence parameters based in cron notation\n    StartDateTime => $DateTimeObject,  # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NextEventList" : {
               "my @NextEvents = $CronEventObject->NextEventList(\n    Schedule      => '*/2 * * * *',         # recurrence parameters based in cron notation\n    StartDateTime => $StartDateTimeObject,  # optional, defaults to current date/time\n    StopDateTime  => $StopDateTimeObject,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PreviousEventGet" : {
               "my $PreviousSystemTime = $CronEventObject->PreviousEventGet(\n    Schedule      => '*/2 * * * *',    # recurrence parameters based in Cron notation\n    StartDateTime => $DateTimeObject,  # optional, defaults to current date/time\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CronEventObject = $Kernel::OM->Get('Kernel::System::CronEvent');",
         "Package" : "Kernel::System::CronEvent"
      },
      "CustomerAuthObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Auth" : {
               "if ($CustomerAuthObject->Auth(User => $User, Pw => $Pw)) {\n    print \"Auth ok!\\n\";\n}\nelse {\n    print \"Auth invalid!\\n\";\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetLastErrorMessage" : {
               "my $AuthErrorMessage = $CustomerAuthObject->GetLastErrorMessage();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetOption" : {
               "if ($CustomerAuthObject->GetOption(What => 'PreAuth')) {\n    print \"No login screen is needed. Authentication is based on other options. E. g. $ENV{REMOTE_USER}\\n\";\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CustomerAuthObject = $Kernel::OM->Get('Kernel::System::CustomerAuth');",
         "Package" : "Kernel::System::CustomerAuth"
      },
      "CustomerCompanyObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CustomerCompanyAdd" : {
               "my $ID = $CustomerCompanyObject->CustomerCompanyAdd(\n    CustomerID              => $CustomerID,\n    CustomerCompanyName     => 'New Customer Inc.',\n    CustomerCompanyStreet   => '5201 Blue Lagoon Drive',\n    CustomerCompanyZIP      => '33126',\n    CustomerCompanyCity     => 'Miami',\n    CustomerCompanyCountry  => 'USA',\n    CustomerCompanyURL      => 'http://www.example.org',\n    CustomerCompanyComment  => 'some comment',\n    ValidID                 => $ValidID,\n    UserID                  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerCompanyGet" : {
               "my %CustomerCompany = $CustomerCompanyObject->CustomerCompanyGet(\n    CustomerID => $CustomerID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerCompanyList" : {
               "my %List = $CustomerCompanyObject->CustomerCompanyList(\n    Search => 'somecompany',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %List = $CustomerCompanyObject->CustomerCompanyList(\n    Valid => 0,\n    Limit => 0,     # optional, override configured search result limit (0 means unlimited)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %List = $CustomerCompanyObject->CustomerCompanyList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerCompanySearchDetail" : {
               "my $CustomerCompanyIDsRef = $CustomerCompanyObject->CustomerCompanySearchDetail(\n\n    # all search fields possible which are defined in CustomerCompany::EnhancedSearchFields\n    CustomerID          => $CustomerID,                                  # (optional)\n    CustomerCompanyName => 'Name*',                                     # (optional)\n\n    # array parameters are used with logical OR operator (all values are possible which\n    are defined in the config selection hash for the field)\n    CustomerCompanyCountry => [ 'Austria', 'Germany', ],                # (optional)\n\n    # DynamicFields\n    #   At least one operator must be specified. Operators will be connected with AND,\n    #       values in an operator with OR.\n    #   You can also pass more than one argument to an operator: ['value1', 'value2']\n    DynamicField_FieldNameX => {\n        Equals            => 123,\n        Like              => 'value*',                # \"equals\" operator with wildcard support\n        GreaterThan       => '2001-01-01 01:01:01',\n        GreaterThanEquals => '2001-01-01 01:01:01',\n        SmallerThan       => '2002-02-02 02:02:02',\n        SmallerThanEquals => '2002-02-02 02:02:02',\n    }" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerCompanySearchFields" : {
               "my @SeachFields = $CustomerCompanyObject->CustomerCompanySearchFields(\n    Source => 'CustomerCompany', # optional, but important in the CustomerCompanySearchDetail to get the right database fields\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerCompanySourceList" : {
               "my %List = $CustomerCompanyObject->CustomerCompanySourceList(\n    ReadOnly => 0 # optional, 1 returns only RO backends, 0 returns writable, if not passed returns all backends\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerCompanyUpdate" : {
               "$CustomerCompanyObject->CustomerCompanyUpdate(\n    CustomerCompanyID       => $CustomerCompanyID, # required for CustomerCompanyID-update\n    CustomerID              => $CustomerID,\n    CustomerCompanyName     => 'New Customer Inc.',\n    CustomerCompanyStreet   => '5201 Blue Lagoon Drive',\n    CustomerCompanyZIP      => '33126',\n    CustomerCompanyLocation => 'Miami',\n    CustomerCompanyCountry  => 'USA',\n    CustomerCompanyURL      => 'http://example.com',\n    CustomerCompanyComment  => 'some comment',\n    ValidID                 => $ValidID,\n    UserID                  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetFieldConfig" : {
               "my %FieldConfig = $CustomerCompanyObject->GetFieldConfig(\n    FieldName => 'CustomerCompanyName',\n    Source    => 'CustomerCompany', # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetFieldSelections" : {
               "my %SelectionsData = $CustomerCompanyObject->GetFieldSelections(\n    FieldName => 'CustomerCompanyCountry',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CustomerCompanyObject = $Kernel::OM->Get('Kernel::System::CustomerCompany');",
         "Package" : "Kernel::System::CustomerCompany"
      },
      "CustomerGroupObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GroupContextCustomers" : {
               "my %Customers = $CustomerGroupObject->GroupContextCustomers(\n    CustomerUserID => $CustomerUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupContextNameGet" : {
               "my $ContextName = $CustomerGroupObject->GroupContextNameGet(\n    SysConfigName => '100-CustomerID-other', # optional, defaults to '001-CustomerID-same'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupContextNameList" : {
               "my @ContextNames = $CustomerGroupObject->GroupContextNameList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupCustomerAdd" : {
               "my $Success = $CustomerGroupObject->GroupCustomerAdd(\n    GID        => $GID,\n    CustomerID => $CustomerID,\n    Permission => {\n        'Ticket::CustomerID::Same' => {\n            ro            => 1,\n            move_into     => 1,\n            create        => 1,\n            owner         => 1,\n            priority      => 0,\n            rw            => 0,\n        },\n        'Ticket::CustomerID::Other' => {\n            ro        => 1,\n            move_into => 1,\n            create    => 1,\n            owner     => 1,\n            priority  => 0,\n            rw        => 0,\n        },\n        ...\n    },\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupCustomerList" : {
               "my %Customers = $CustomerGroupObject->GroupCustomerList(\n    GroupID => $GroupID,\n    Type    => 'ro',    # ro|move_into|priority|create|owner|rw\n    Context => 'Ticket::CustomerID::Same',\n                        # permissions to same company tickets, default context\n    Result  => 'HASH',  # return hash of customer id => group name entries\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Groups = $CustomerGroupObject->GroupCustomerList(\n    CustomerID => $CustomerID,\n    Type       => 'ro',     # ro|move_into|priority|create|owner|rw\n    Context => 'Ticket::CustomerID::Same',\n                        # permissions to same company tickets, default context\n    Result     => 'HASH',   # return hash of group id => group name entries\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @CustomerIDs = $CustomerGroupObject->GroupCustomerList(\n    GroupID => $GroupID,\n    Type    => 'ro',    # ro|move_into|priority|create|owner|rw\n    Context => 'Ticket::CustomerID::Same',\n                        # permissions to same company tickets, default context\n    Result  => 'ID',    # return array of customer ids\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @CustomerNames = $CustomerGroupObject->GroupCustomerList(\n    GroupID => $GroupID,\n    Type    => 'ro',    # ro|move_into|priority|create|owner|rw\n    Context => 'Ticket::CustomerID::Same',\n                        # permissions to same company tickets, default context\n    Result  => 'Name',  # return array of customer ids\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @GroupIDs = $CustomerGroupObject->GroupCustomerList(\n    CustomerID => $CustomerID,\n    Type       => 'ro',     # ro|move_into|priority|create|owner|rw\n    Context => 'Ticket::CustomerID::Same',\n                        # permissions to same company tickets, default context\n    Result     => 'ID',     # return array of group ids\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @GroupNames = $CustomerGroupObject->GroupCustomerList(\n    CustomerID => $CustomerID,\n    Type       => 'ro',     # ro|move_into|priority|create|owner|rw\n    Context => 'Ticket::CustomerID::Same',\n                        # permissions to same company tickets, default context\n    Result     => 'Name',   # return array of group names\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupLookup" : {
               "my $Group = $CustomerGroupObject->GroupLookup(GroupID => $GroupID);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $GroupID = $CustomerGroupObject->GroupLookup(Group => $Group);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupMemberAdd" : {
               "my $Success = $CustomerGroupObject->GroupMemberAdd(\n    GID => $GID,\n    UID => $UID,\n    Permission => {\n        ro        => 1,\n        move_into => 1,\n        create    => 1,\n        owner     => 1,\n        priority  => 0,\n        rw        => 0,\n    },\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupMemberList" : {
               "my %Groups = $CustomerGroupObject->GroupMemberList(\n    UserID         => $UserID,\n    Type           => 'move_into', # ro|move_into|priority|create|rw\n    Result         => 'HASH',      # return hash of group id => group name entries\n    RawPermissions => 0,           # 0 (return inherited permissions from CustomerCompany), default\n                                   # 1 (return only direct permissions)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Users = $CustomerGroupObject->GroupMemberList(\n    GroupID        => $GroupID,\n    Type           => 'move_into', # ro|move_into|priority|create|rw\n    Result         => 'HASH',      # return hash of user id => user name entries\n    RawPermissions => 0,           # 0 (return inherited permissions from CustomerCompany), default\n                                   # 1 (return only direct permissions)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @GroupIDs = $CustomerGroupObject->GroupMemberList(\n    UserID         => $UserID,\n    Type           => 'move_into', # ro|move_into|priority|create|rw\n    Result         => 'ID',        # return array of group ids\n    RawPermissions => 0,           # 0 (return inherited permissions from CustomerCompany), default\n                                   # 1 (return only direct permissions)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @GroupNames = $CustomerGroupObject->GroupMemberList(\n    UserID         => $UserID,\n    Type           => 'move_into', # ro|move_into|priority|create|rw\n    Result         => 'Name',        # return array of group names\n    RawPermissions => 0,           # 0 (return inherited permissions from CustomerCompany), default\n                                   # 1 (return only direct permissions)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @UserIDs = $CustomerGroupObject->GroupMemberList(\n    GroupID        => $GroupID,\n    Type           => 'move_into', # ro|move_into|priority|create|rw\n    Result         => 'ID',        # return array of user ids\n    RawPermissions => 0,           # 0 (return inherited permissions from CustomerCompany), default\n                                   # 1 (return only direct permissions)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @UserNames = $CustomerGroupObject->GroupMemberList(\n    GroupID        => $GroupID,\n    Type           => 'move_into', # ro|move_into|priority|create|rw\n    Result         => 'Name',        # return array of user names\n    RawPermissions => 0,           # 0 (return inherited permissions from CustomerCompany), default\n                                   # 1 (return only direct permissions)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionCheck" : {
               "my $HasPermission = $CustomerGroupObject->PermissionCheck(\n    UserID    => $UserID,\n    GroupName => $GroupName,\n    Type      => 'move_into',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CustomerGroupObject = $Kernel::OM->Get('Kernel::System::CustomerGroup');",
         "Package" : "Kernel::System::CustomerGroup"
      },
      "CustomerUserObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CustomerIDList" : {
               "my @CustomerIDs = $CustomerUserObject->CustomerIDList(\n    SearchTerm  => 'somecustomer',    # optional\n    Valid       => 1,                 # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerIDs" : {
               "my @CustomerIDs = $CustomerUserObject->CustomerIDs(\n    User => 'some-login',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerName" : {
               "my $Name = $CustomerUserObject->CustomerName(\n    UserLogin => 'some-login',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerSearch" : {
               "# email search\nmy %List = $CustomerUserObject->CustomerSearch(\n    PostMasterSearch => 'email@example.com',\n    Valid            => 1,                    # (optional) default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "# search by CustomerID\nmy %List = $CustomerUserObject->CustomerSearch(\n    CustomerID       => $CustomerID,\n    Valid            => 1,                # (optional) default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "# text search\nmy %List = $CustomerUserObject->CustomerSearch(\n    Search => '*some*', # also 'hans+huber' possible\n    Valid  => 1,        # (optional) default 1\n    Limit  => 100,      # (optional) overrides limit of the config\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "# username search\nmy %List = $CustomerUserObject->CustomerSearch(\n    UserLogin => '*some*',\n    Valid     => 1,         # (optional) default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerSearchDetail" : {
               "my $CustomerUserIDsRef = $CustomerUserObject->CustomerSearchDetail(\n\n    # all search fields possible which are defined in CustomerUser::EnhancedSearchFields\n    UserLogin     => 'example*',                                    # (optional)\n    UserFirstname => 'Firstn*',                                     # (optional)\n\n    # special parameters\n    CustomerCompanySearchCustomerIDs => [ 'example.com' ],          # (optional)\n    ExcludeUserLogins                => [ 'example', 'doejohn' ],   # (optional)\n\n    # array parameters are used with logical OR operator (all values are possible which\n    are defined in the config selection hash for the field)\n    UserCountry              => [ 'Austria', 'Germany', ],          # (optional)\n\n    # DynamicFields\n    #   At least one operator must be specified. Operators will be connected with AND,\n    #       values in an operator with OR.\n    #   You can also pass more than one argument to an operator: ['value1', 'value2']\n    DynamicField_FieldNameX => {\n        Equals            => 123,\n        Like              => 'value*',                # \"equals\" operator with wildcard support\n        GreaterThan       => '2001-01-01 01:01:01',\n        GreaterThanEquals => '2001-01-01 01:01:01',\n        SmallerThan       => '2002-02-02 02:02:02',\n        SmallerThanEquals => '2002-02-02 02:02:02',\n    }" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerSourceList" : {
               "my %List = $CustomerUserObject->CustomerSourceList(\n    ReadOnly => 0 # optional, 1 returns only RO backends, 0 returns writable, if not passed returns all backends\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserAdd" : {
               "my $UserLogin = $CustomerUserObject->CustomerUserAdd(\n    Source         => 'CustomerUser', # CustomerUser source config\n    UserFirstname  => 'Huber',\n    UserLastname   => 'Manfred',\n    UserCustomerID => $UserCustomerID,\n    UserLogin      => 'mhuber',\n    UserPassword   => 'some-pass', # not required\n    UserEmail      => 'email@example.com',\n    ValidID        => $ValidID,\n    UserID         => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserCacheClear" : {
               "$CustomerUserObject->CustomerUserCacheClear(\n    UserLogin => 'mhuber',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserCustomerMemberAdd" : {
               "my $Success = $CustomerUserObject->CustomerUserCustomerMemberAdd(\n    CustomerUserID => $CustomerUserID,\n    CustomerID     => $CustomerID,\n    Active         => 1,        # optional\n    UserID         => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserCustomerMemberList" : {
               "my @CustomerIDs = $CustomerUserObject->CustomerUserCustomerMemberList(\n    CustomerUserID => $CustomerUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @CustomerUsers = $CustomerUserObject->CustomerUserCustomerMemberList(\n    CustomerID => $CustomerID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserDataGet" : {
               "my %User = $CustomerUserObject->CustomerUserDataGet(\n    User => 'franz',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserSearchFields" : {
               "my @SeachFields = $CustomerUserObject->CustomerUserSearchFields(\n    Source => 'CustomerUser', # optional, but important in the CustomerSearchDetail to get the right database fields\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserUpdate" : {
               "$CustomerUserObject->CustomerUserUpdate(\n    Source        => 'CustomerUser', # CustomerUser source config\n    ID            => 'mh'            # current user login\n    UserLogin     => 'mhuber',       # new user login\n    UserFirstname => 'Huber',\n    UserLastname  => 'Manfred',\n    UserPassword  => 'some-pass',    # not required\n    UserEmail     => 'email@example.com',\n    ValidID       => $ValidID,\n    UserID        => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenerateRandomPassword" : {
               "my $Password = $CustomerUserObject->GenerateRandomPassword(\n    Size => 16,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Password = $CustomerUserObject->GenerateRandomPassword();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetFieldConfig" : {
               "my %FieldConfig = $CustomerUserObject->GetFieldConfig(\n    FieldName => 'UserEmail',\n    Source    => 'CustomerUser', # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetFieldSelections" : {
               "my %SelectionsData = $CustomerUserObject->GetFieldSelections(\n    FieldName => 'UserTitle',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetPreferences" : {
               "my %Preferences = $CustomerUserObject->GetPreferences(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchPreferences" : {
               "my %UserList = $CustomerUserObject->SearchPreferences(\n    Key   => 'UserSomeKey',\n    Value => 'SomeValue',   # optional, limit to a certain value/pattern\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SetPassword" : {
               "$CustomerUserObject->SetPassword(\n    UserLogin => 'some-login',\n    PW        => 'some-new-password'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SetPreferences" : {
               "$CustomerUserObject->SetPreferences(\n    Key    => 'UserComment',\n    Value  => 'some comment',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TokenCheck" : {
               "my $Valid = $CustomerUserObject>TokenCheck(\n    Token  => $Token,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TokenGenerate" : {
               "my $Token = $CustomerUserObject->TokenGenerate(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $CustomerUserObject = $Kernel::OM->Get('Kernel::System::CustomerUser');",
         "Package" : "Kernel::System::CustomerUser"
      },
      "DBCRUDObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CreateMissingUUIDDatabaseTableColumns" : {
               "my $Success = $DBCRUDObject->CreateMissingUUIDDatabaseTableColumns();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CreateUUIDDatabaseTableColumn" : {
               "my $UUIDColumnCreated = $DBCRUDObject->CreateUUIDDatabaseTableColumn();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataAdd" : {
               "my $Success = $DBCRUDObject->DataAdd(\n    ID          => '...',\n    '...',\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataCopy" : {
               "my $ObjectID = $DBCRUDObject->DataCopy(\n    ID     => 123,\n    UserID => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataDelete" : {
               "my $Success = $DBCRUDObject->DataDelete(\n    ID          => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataExport" : {
               "my $Export = $DBCRUDObject->DataExport(\n    Format => 'yml',\n    Cache  => 0,\n    Filter => {\n        Source => '...'\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataGet" : {
               "my %Data = $DBCRUDObject->DataGet(\n    ID          => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataImport" : {
               "my $Success = $DBCRUDObject->DataImport(\n    Content   => $ContentString,\n    Format    => 'yml',                 # optional - default\n    Overwrite => 1,                     # optional to overwrite existing data\n    Data      => {                      # additional data if not all needed data exists\n        ValidID => $ValidID,\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataListGet" : {
               "my @Data = $DBCRUDObject->DataListGet(\n    ID          => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataNameExists" : {
               "my $Success = $DBCRUDObject->DataNameExists(\n    Name   => 'name',\n    UserID => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataSearch" : {
               "my %Data = $DBCRUDObject->DataSearch(\n    Search      => 'test*test',\n    ID          => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataUpdate" : {
               "my $Success = $DBCRUDObject->DataUpdate(\n    ID => 1234,\n    UserID => $UserID,\n    # all other attributes are optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsUUIDDatabaseTableColumnPresent" : {
               "my $UUIDColumnPresent = $DBCRUDObject->IsUUIDDatabaseTableColumnPresent();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MigrateUUIDDatabaseTableColumns" : {
               "my $Success = $DBCRUDObject->MigrateUUIDDatabaseTableColumns();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $DBCRUDObject = $Kernel::OM->Get('Kernel::System::DBCRUD');",
         "Package" : "Kernel::System::DBCRUD"
      },
      "DBCRUDTestObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "DataAdd" : {
               "my $Success = $DBCRUDTestObject->DataAdd(\n    ID          => '...',\n    Name        => '...', # optional\n    Age         => '...', # optional\n    Description => '...', # optional\n    ContentJSON => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataDelete" : {
               "my $Success = $DBCRUDTestObject->DataDelete(\n    ID          => '...', # optional\n    Name        => '...', # optional\n    Age         => '...', # optional\n    Description => '...', # optional\n    ContentJSON => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataExport" : {
               "my $Export = $DBCRUDTestObject->DataExport(\n    Format => 'yml',\n    Cache  => 0,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataGet" : {
               "my %Data = $DBCRUDTestObject->DataGet(\n    ID          => '...', # optional\n    Name        => '...', # optional\n    Age         => '...', # optional\n    Description => '...', # optional\n    ContentJSON => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataImport" : {
               "my $Success = $DBCRUDTestObject->DataImport(\n    Content   => $ContentString,\n    Format    => 'yml',                 # optional - default\n    Overwrite => 1,                     # optional to overwrite existing data\n    Data      => {                      # additional data if not all needed data exists\n        ValidID => $ValidID,\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataListGet" : {
               "my @Data = $DBCRUDTestObject->DataListGet(\n    ID          => '...', # optional\n    Name        => '...', # optional\n    Age         => '...', # optional\n    Description => '...', # optional\n    ContentJSON => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataSearch" : {
               "my %Data = $DBCRUDTestObject->DataSearch(\n    Search      => 'test*test',\n    ID          => '...', # optional\n    Name        => '...', # optional\n    Age         => '...', # optional\n    Description => '...', # optional\n    ContentJSON => '...', # optional\n    CreateTime  => '...', # optional\n    ChangeTime  => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InitConfig" : {
               "my $Success = $DBCRUDTestObject->InitConfig();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $DBCRUDTestObject = $Kernel::OM->Get('Kernel::System::UnitTest::DBCRUD');",
         "Package" : "Kernel::System::UnitTest::DBCRUD"
      },
      "DBObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Connect" : {
               "$DBObject->Connect();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Disconnect" : {
               "$DBObject->Disconnect();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Do" : {
               "$DBObject->Do(\n    SQL  => \"INSERT INTO table (name1, name2) VALUES (?, ?)\",\n    Bind => [ \\$Var1, \\$Var2 ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$DBObject->Do( SQL => \"DELETE FROM table\" );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$DBObject->Do( SQL => \"INSERT INTO table (name) VALUES ('dog')\" );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Error" : {
               "my $ErrorMessage = $DBObject->Error();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FetchrowArray" : {
               "while (my @Row = $DBObject->FetchrowArray()) {\n    print \"$Row[0]:$Row[1]\\n\";\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetColumnNames" : {
               "my @Names = $DBObject->GetColumnNames();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetDatabaseFunction" : {
               "my $What = $DBObject->GetDatabaseFunction('DirectBlob');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ListTables" : {
               "my @Tables = $DBObject->ListTables();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Ping" : {
               "my $Success = $DBObject->Ping(\n    AutoConnect => 0,  # default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Prepare" : {
               "$DBObject->Prepare(\n    SQL    => \"SELECT id, name, content FROM table WHERE name_a = ? AND name_b = ?\",\n    Encode => [ 1, 1, 0 ],\n    Bind   => [ \\$Var1, \\$Var2 ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$DBObject->Prepare(\n    SQL    => \"SELECT id, name, content FROM table\",\n    Encode => [ 1, 1, 0 ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$DBObject->Prepare(\n    SQL   => \"SELECT id, name FROM table\",\n    Limit => 10,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$DBObject->Prepare(\n    SQL   => \"SELECT id, name FROM table\",\n    Start => 10,\n    Limit => 20,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueryCondition" : {
               "my $SQL = $DBObject->QueryCondition(\n    Key          => 'some_col',\n    Value        => '(ABC+DEF)',\n    SearchPrefix => '',\n    SearchSuffix => '*'\n    Extended     => 1, # use also \" \" as \"&&\", e.g. \"bob smith\" -> \"bob&&smith\"\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $SQL = $DBObject->QueryCondition(\n    Key      => [ 'some_col_a', 'some_col_b' ],\n    Value    => '((ABC&&DEF)&&!GHI)',\n    BindMode => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $SQL = $DBObject->QueryCondition(\n    Key   => 'some_col',\n    Value => '((ABC&&DEF)&&!GHI)',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $SQL = $DBObject->QueryCondition(\n    Key   => 'some_col',\n    Value => '(ABC+DEF)',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $SQL = $DBObject->QueryCondition(\n    Key   => [ 'some_col_a', 'some_col_b' ],\n    Value => '((ABC&&DEF)&&!GHI)',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueryInCondition" : {
               "my $SQL = $DBObject->QueryInCondition(\n    Key       => 'table.column',\n    Values    => [ 1, 2, 3, 4, 5, 6 ],\n    QuoteType => '(undef|Integer|Number)',\n    BindMode  => (0|1),\n    Negate    => (0|1),\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueryStringEscape" : {
               "my $QueryStringEscaped = $DBObject->QueryStringEscape(\n    QueryString => 'customer with (brackets) and & and -',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Quote" : {
               "my $DBString = $DBObject->Quote( \"2005-10-27 20:15:01\" );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "quote integers:\n===============\nmy $DBString = $DBObject->Quote( 1234, 'Integer' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "quote numbers (e. g. 1, 1.4, 42342.23424):\n==========================================\nmy $DBString = $DBObject->Quote( 1234, 'Number' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "quote strings, date and time:\n=============================\nmy $DBString = $DBObject->Quote( \"This isn't a problem!\" );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SQLProcessor" : {
               "my @SQL = $DBObject->SQLProcessor(\n    Database =>\n        [\n            Tag  => 'TableCreate',\n            Name => 'table_name',\n        ],\n        [\n            Tag  => 'Column',\n            Name => 'col_name',\n            Type => 'VARCHAR',\n            Size => 150,\n        ],\n        [\n            Tag  => 'Column',\n            Name => 'col_name2',\n            Type => 'INTEGER',\n        ],\n        [\n            Tag => 'TableEnd',\n        ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SQLProcessorPost" : {
               "my @SQL = $DBObject->SQLProcessorPost();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SelectAll" : {
               "my $ResultAsArrayRef = $DBObject->SelectAll(\n    SQL   => \"SELECT id, name FROM table\",\n    Limit => 10\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Version" : {
               "my $DBVersion = $DBObject->Version();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $DBObject = $Kernel::OM->Get('Kernel::System::DB');",
         "Package" : "Kernel::System::DB"
      },
      "DateTimeObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Add" : {
               "my $Success = $DateTimeObject->Add(\n    Years         => 1,\n    Months        => 2,\n    Weeks         => 4,\n    Days          => 34,\n    Hours         => 2,\n    Minutes       => 5,\n    Seconds       => 459,\n\n    # Calculate \"destination date\" by adding given time values as\n    # working time. Note that for adding working time,\n    # only parameters Seconds, Minutes, Hours and Days are allowed.\n    AsWorkingTime => 0, # set to 1 to add given values as working time\n\n    # Calendar to use for working time calculations, optional\n    Calendar => 9,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Clone" : {
               "my $ClonedDateTimeObject = $DateTimeObject->Clone();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Compare" : {
               "    my @SortedDateTimeObjects = sort { $DateTimeObject->Compare( DateTimeObject => $b ); } @UnsortedDateTimeObjects:\n\n    $Result = -1;       # if date/time of this object < date/time of given object\n    $Result = 0;        # if date/time are equal\n    $Result = 1:        # if date/time of this object > date/time of given object\n\n" : [
                  "6.0"
               ],
               "my $Result = $DateTimeObject->Compare( DateTimeObject => $AnotherDateTimeObject );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Delta" : {
               "my $Delta = $DateTimeObject->Delta( DateTimeObject => $AnotherDateTimeObject );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Format" : {
               "my $DateTimeString = $DateTimeObject->Format( Format => '%Y-%m-%d %H:%M:%S' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Get" : {
               "my $DateTimeSettings = $DateTimeObject->Get();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetRealTimeZone" : {
               "# You can also call this function without an object:\nmy $TimeZone = Kernel::System::DateTime->GetRealTimeZone( TimeZone => 'Africa/Addis_Ababa' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $TimeZone = $DateTimeObject->GetRealTimeZone( TimeZone => 'Africa/Addis_Ababa' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "IsTimeZoneValid" : {
               "# You can also call this function without an object:\nmy $Valid = Kernel::System::DateTime->IsTimeZoneValid( TimeZone => 'Europe/Berlin' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Valid = $DateTimeObject->IsTimeZoneValid( TimeZone => 'Europe/Berlin' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "IsVacationDay" : {
               "my $IsVacationDay = $DateTimeObject->IsVacationDay(\n    Calendar => 9, # optional, OTRS vacation days otherwise\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LastDayOfMonthGet" : {
               "$LastDayOfMonth = $DateTimeObject->LastDayOfMonthGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "OTRSTimeZoneGet" : {
               "# You can also call this function without an object:\nmy $OTRSTimeZone = Kernel::System::DateTime->OTRSTimeZoneGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $OTRSTimeZone = $DateTimeObject->OTRSTimeZoneGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Set" : {
               "# Setting values by hash:\nmy $Success = $DateTimeObject->Set(\n    Year     => 2016,\n    Month    => 1,\n    Day      => 22,\n    Hour     => 16,\n    Minute   => 35,\n    Second   => 59,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "# Settings values by date/time string:\nmy $Success = $DateTimeObject->Set( String => '2016-02-25 20:34:01' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Subtract" : {
               "my $Success = $DateTimeObject->Subtract(\n    Years     => 1,\n    Months    => 2,\n    Weeks     => 4,\n    Days      => 34,\n    Hours     => 2,\n    Minutes   => 5,\n    Seconds   => 459,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemTimeZoneGet" : {
               "my $SystemTimeZone = $DateTimeObject->SystemTimeZoneGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $SystemTimeZone = Kernel::System::DateTime->SystemTimeZoneGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TimeZoneByOffsetList" : {
               "my %TimeZoneByOffset = $DateTimeObject->TimeZoneByOffsetList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TimeZoneList" : {
               "# You can add an obsolete time zone to the list if the time zone is valid.\n# This is useful to keep the obsolete time zone from a stored setting\n# so that it will e.g. be shown as selected when showing a selection list.\n# Otherwise the user would have to select a new time zone.\nmy $TimeZones = $DateTimeObject->TimeZoneList(\n\n    # Africa/Kinshasa has become obsolete and has been replaced by Africa/Lagos.\n    # This option will add Africa/Kinshasa to the list of time zones nonetheless.\n    # The given time zone must be valid, so 'Some/InvalidTimeZone' will not be added.\n    IncludeTimeZone => 'Africa/Kinshasa',\n);" : [
                  "6.0"
               ],
               "my $TimeZones = $DateTimeObject->TimeZoneList(\n    # Africa/Kinshasa has become obsolete and has been replaced by Africa/Lagos.\n    # This option will add Africa/Kinshasa to the list of time zones nonetheless.\n    # The given time zone must be valid, so 'Some/InvalidTimeZone' will not be added.\n    IncludeTimeZone => 'Africa/Kinshasa',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $TimeZones = $DateTimeObject->TimeZoneList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $TimeZones = Kernel::System::DateTime->TimeZoneList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ToCTimeString" : {
               "my $CTimeString = $DateTimeObject->ToCTimeString();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ToEmailTimeStamp" : {
               "# If you already have a DateTime object, possibly in another time zone:\n$DateTimeObject->ToOTRSTimeZone();\nmy $MailTimeStamp = $DateTimeObject->ToEmailTimeStamp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "# Typical usage:\n# You want to have the date/time of OTRS + its UTC offset, so:\nmy $DateTimeObject = $Kernel::OM->Create('Kernel::System::DateTime');\nmy $MailTimeStamp = $DateTimeObject->ToEmailTimeStamp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $MailTimeStamp = $DateTimeObject->ToEmailTimeStamp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ToEpoch" : {
               "my $Epoch = $DateTimeObject->ToEpoch();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ToOTRSTimeZone" : {
               "my $Success = $DateTimeObject->ToOTRSTimeZone();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ToString" : {
               "my $DateTimeString = $DateTimeObject->ToString();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ToTimeZone" : {
               "my $Success = $DateTimeObject->ToTimeZone(\n    TimeZone => 'Europe/Berlin',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "UserDefaultTimeZoneGet" : {
               "my $UserDefaultTimeZoneGet = $DateTimeObject->UserDefaultTimeZoneGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $UserDefaultTimeZoneGet = Kernel::System::DateTime->UserDefaultTimeZoneGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Validate" : {
               "my $IsValid = $DateTimeObject->Validate(\n    Year     => 2016,\n    Month    => 1,\n    Day      => 22,\n    Hour     => 16,\n    Minute   => 35,\n    Second   => 59,\n    TimeZone => 'Europe/Berlin',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $DateTimeObject = $Kernel::OM->Create(\n        'Kernel::System::DateTime',\n        ObjectParams => {\n            String   => '2016-08-14 22:45:00',\n            TimeZone => 'Europe/Berlin',        # optional, defaults to setting of SysConfig OTRSTimeZone\n        }\n    );",
         "Package" : "Kernel::System::DateTime',\n        ObjectParams => {\n            String   => '2016-08-14 22:45:00',\n            TimeZone => 'Europe/Berlin"
      },
      "DebugLogObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "LogAdd" : {
               "my $Success = $DebugLogObject->LogAdd(\n    CommunicationID   => $CommunicationID,\n    CommunicationType => 'Provider',        # 'Provider' or 'Requester'\n    Data              => 'additional data' # optional\n    DebugLevel        => 'info',           # 'debug', 'info', 'notice', 'error'\n    RemoteIP          => '192.168.0.1',    # optional, must be valid IPv4 or IPv6 address\n    Summary           => 'description of log entry',\n    WebserviceID      => $WebserviceID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LogCleanup" : {
               "my $Success = $DebugLogObject->LogCleanup(\n    CreatedAtOrBefore => '2011-12-31 23:59:59',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LogDelete" : {
               "my $Success = $DebugLogObject->LogDelete(\n    NoErrorIfEmpty  => 1,                                  # optional\n    CommunicationID => $CommunicationID, # optional\n    WebserviceID    => $WebserviceID,                                  # optional\n                                                           # exactly one id parameter required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LogGet" : {
               "my $LogData = $DebugLogObject->LogGet(\n    CommunicationID => $CommunicationID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LogGetWithData" : {
               "my $LogData = $DebugLogObject->LogGetWithData(\n    CommunicationID => $CommunicationID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LogSearch" : {
               "my $LogData = $DebugLogObject->LogSearch(\n    CommunicationID   => $CommunicationID, # optional\n    CommunicationType => 'Provider',     # optional, 'Provider' or 'Requester'\n    CreatedAtOrAfter  => '2011-01-01 00:00:00', # optional\n    CreatedAtOrBefore => '2011-12-31 23:59:59', # optional\n    Limit             => 1000, # optional, default 100\n    RemoteIP          => '192.168.0.1', # optional, must be valid IPv4 or IPv6 address\n    WebserviceID      => $WebserviceID, # optional\n    WithData          => 0, # optional\n    Sort              => 'ASC', # optional. 'ASC' (default) or 'DESC'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $DebugLogObject = $Kernel::OM->Get('Kernel::System::GenericInterface::DebugLog');",
         "Package" : "Kernel::System::GenericInterface::DebugLog"
      },
      "DebuggerObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Debug" : {
               "$DebuggerObject->Debug(\n    Summary => 'Short summary, one line',\n    Data    => $Data, # optional, $Data can be a string or a scalar reference\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DebugLog" : {
               "$DebuggerObject->DebugLog(\n    DebugLevel => 'debug',\n    Summary    => 'Short summary, one line',\n    Data       => $Data, # optional, $Data can be a string or a scalar reference\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Error" : {
               "$DebuggerObject->Error(\n    Summary => 'Short summary, one line',\n    Data    => $Data, # optional, $Data can be a string or a scalar reference\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HandleError" : {
               "my $Result = $DebuggerObject->HandleError(\n    Data => {                               # data payload\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HandleResponse" : {
               "my $Result = $DebuggerObject->HandleResponse(\n    ResponseSuccess      => 1,              # success status of the remote web service\n    ResponseErrorMessage => '',             # in case of web service error\n    Data => {                               # data payload\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Info" : {
               "$DebuggerObject->Info(\n    Summary => 'Short summary, one line',\n    Data    => $Data, # optional, $Data can be a string or a scalar reference\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Map" : {
               "my $Result = $DebuggerObject->Map(\n    Data => {              # data payload before mapping\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Notice" : {
               "$DebuggerObject->Notice(\n    Summary => 'Short summary, one line',\n    Data    => $Data, # optional, $Data can be a string or a scalar reference\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PrepareRequest" : {
               "my $Result = $DebuggerObject->PrepareRequest(\n    Data => {                               # data payload\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ProviderGenerateResponse" : {
               "my $Result = $DebuggerObject->ProviderGenerateResponse(\n    Success         => 1,       # 1 or 0\n    ErrorMessage    => '',      # in case of an error, optional\n    Data            => {        # data payload for response, optional\n        ...\n    },\n\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ProviderProcessRequest" : {
               "my $Result = $DebuggerObject->ProviderProcessRequest();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RequesterPerformRequest" : {
               "my $Result = $DebuggerObject->RequesterPerformRequest(\n    Operation       => 'remote_op', # name of remote operation to perform\n    Data            => {            # data payload for request\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $DebuggerObject = Kernel::GenericInterface::Debugger",
         "Package" : "Kernel::GenericInterface::Debugger"
      },
      "DiffObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {},
         "ObjectManager" : "my $DiffObject = $Kernel::OM->Get('Kernel::System::Diff');",
         "Package" : "Kernel::System::Diff"
      },
      "DynamicFieldObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "DynamicFieldAdd" : {
               "my $ID = $DynamicFieldObject->DynamicFieldAdd(\n    InternalField => 0,             # optional, 0 or 1, internal fields are protected\n    Name        => 'NameForField',  # mandatory\n    Label       => 'a description', # mandatory, label to show\n    FieldOrder  => 123,             # mandatory, display order\n    FieldType   => 'Text',          # mandatory, selects the DF backend to use for this field\n    ObjectType  => 'Article',       # this controls which object the dynamic field links to\n                                    # allow only lowercase letters\n    Config      => $ConfigHashRef,  # it is stored on YAML format\n                                    # to individual articles, otherwise to tickets\n    Reorder     => 1,               # or 0, to trigger reorder function, default 1\n    ValidID     => $ValidID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldDelete" : {
               "my $Success = $DynamicFieldObject->DynamicFieldDelete(\n    ID      => 123,\n    UserID  => $UserID,\n    Reorder => 1,               # or 0, to trigger reorder function, default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldGet" : {
               "my $DynamicField = $DynamicFieldObject->DynamicFieldGet(\n    ID   => 123,             # ID or Name must be provided\n    Name => 'DynamicField',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldList" : {
               "my $List = $DynamicFieldObject->DynamicFieldList(\n    Valid => 0,             # optional, defaults to 1\n\n    # object  type (optional) as STRING or as ARRAYREF\n    ObjectType => 'Ticket',\n    ObjectType => ['Ticket', 'Article'],\n\n    ResultType => 'HASH',   # optional, 'ARRAY' or 'HASH', defaults to 'ARRAY'\n\n    FieldFilter => {        # optional, only active fields (non 0) will be returned\n        ItemOne   => 1,\n        ItemTwo   => 2,\n        ItemThree => 1,\n        ItemFour  => 1,\n        ItemFive  => 0,\n    },\n\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $List = $DynamicFieldObject->DynamicFieldList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldListGet" : {
               "my $List = $DynamicFieldObject->DynamicFieldListGet(\n    Valid        => 0,            # optional, defaults to 1\n\n    # object  type (optional) as STRING or as ARRAYREF\n    ObjectType => 'Ticket',\n    ObjectType => ['Ticket', 'Article'],\n\n    FieldFilter => {        # optional, only active fields (non 0) will be returned\n        nameforfield => 1,\n        fieldname    => 2,\n        other        => 0,\n        otherfield   => 0,\n    },\n\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $List = $DynamicFieldObject->DynamicFieldListGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldOrderCheck" : {
               "my $Success = $DynamicFieldObject->DynamicFieldOrderCheck();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldOrderReset" : {
               "my $Success = $DynamicFieldObject->DynamicFieldOrderReset();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldUpdate" : {
               "my $Success = $DynamicFieldObject->DynamicFieldUpdate(\n    ID          => 1234,            # mandatory\n    Name        => 'NameForField',  # mandatory\n    Label       => 'a description', # mandatory, label to show\n    FieldOrder  => 123,             # mandatory, display order\n    FieldType   => 'Text',          # mandatory, selects the DF backend to use for this field\n    ObjectType  => 'Article',       # this controls which object the dynamic field links to\n                                    # allow only lowercase letters\n    Config      => $ConfigHashRef,  # it is stored on YAML format\n                                    # to individual articles, otherwise to tickets\n    ValidID     => $ValidID,\n    Reorder     => 1,               # or 0, to trigger reorder function, default 1\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectMappingCreate" : {
               "my $ObjectID = $DynamicFieldObject->ObjectMappingCreate(\n    ObjectName => 'customer-1',   # Name of the object to create the mapping for\n    ObjectType => 'CustomerUser', # Type of object to create the mapping for\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectMappingGet" : {
               "my $ObjectMapping = $DynamicFieldObject->ObjectMappingGet(\n    ObjectName            => $ObjectName,    # Name or array ref of names of the object(s) to get the ID(s) for\n                                             # Note: either give ObjectName or ObjectID\n    ObjectID              => $ObjectID,      # ID or array ref of IDs of the object(s) to get the name(s) for\n                                             # Note: either give ObjectName or ObjectID\n    ObjectType            => 'CustomerUser', # Type of object to get mapping for\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectMappingNameChange" : {
               "my $Success = $DynamicFieldObject->ObjectMappingNameChange(\n    OldObjectName => 'customer-1',\n    NewObjectName => 'customer-2',\n    ObjectType    => 'CustomerUser', # Type of object to change name for\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $DynamicFieldObject = $Kernel::OM->Get('Kernel::System::DynamicField');",
         "Package" : "Kernel::System::DynamicField"
      },
      "DynamicFieldValueObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AllValuesDelete" : {
               "my $Success = $DynamicFieldValueObject->AllValuesDelete(\n    FieldID            => $FieldID,                 # ID of the dynamic field\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HistoricalValueGet" : {
               "my $HistoricalValues = $DynamicFieldValueObject->HistoricalValueGet(\n    FieldID   => $FieldID,                  # ID of the dynamic field\n    ValueType => 'Text',                    # or 'DateTime' or 'Integer'. Default 'Text'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectValuesDelete" : {
               "my $Success = $DynamicFieldValueObject->ObjectValuesDelete(\n    ObjectType => 'Ticket',    # Dynamic Field object type ( e. g. Ticket, Article, FAQ)\n    ObjectID   => $ObjectID,   # ID of the current object that the field\n                               #   is linked to, e. g. TicketID\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueDelete" : {
               "my $Success = $DynamicFieldValueObject->ValueDelete(\n    FieldID            => $FieldID,                 # ID of the dynamic field\n    ObjectID           => $ObjectID,                # ID of the current object that the field\n                                                    #   is linked to, e. g. TicketID\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueGet" : {
               "my $Value = $DynamicFieldValueObject->ValueGet(\n    FieldID            => $FieldID,                 # ID of the dynamic field\n    ObjectID           => $ObjectID,                # ID of the current object that the field\n                                                    #   is linked to, e. g. TicketID\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueSearch" : {
               "my $Value = $DynamicFieldValueObject->ValueSearch(\n    FieldID            => $FieldID,             # ID of dynamic field to search\n    Search             => 'test',\n    SearchSQL          => \"dynamic_field_value.value_text = 'test'\",\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueSet" : {
               "my $Success = $DynamicFieldValueObject->ValueSet(\n    FieldID  => $FieldID,                 # ID of the dynamic field\n    ObjectID => $ObjectID,                # ID of the current object that the field\n                                          #   must be linked to, e. g. TicketID\n    Value    => [\n        {\n            ValueText          => 'some text',            # optional, one of these fields must be provided\n            ValueDateTime      => '1977-12-12 12:00:00',  # optional\n            ValueInt           => 123,                    # optional\n        },\n        ...\n    ],\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueValidate" : {
               "my $Success = $DynamicFieldValueObject->ValueValidate(\n    Value    =>  {\n            ValueText          => 'some text',            # optional, one of these fields must be provided\n            ValueDateTime      => '1977-12-12 12:00:00',  # optional\n            ValueInt           => 123,                    # optional\n        },\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $DynamicFieldValueObject = $Kernel::OM->Get('Kernel::System::DynamicFieldValue');",
         "Package" : "Kernel::System::DynamicFieldValue"
      },
      "EmailObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Bounce" : {
               "$EmailObject->Bounce(\n    From  => 'me@example.com',\n    To    => 'friend@example.com',\n    Email => $Email,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Check" : {
               "my %Check = $EmailObject->Check();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Send" : {
               "my $Sent = $EmailObject->Send(\n    From          => 'me@example.com',\n    To            => 'friend@example.com',                         # required if both Cc and Bcc are not present\n    Cc            => 'Some Customer B <customer-b@example.com>',   # required if both To and Bcc are not present\n    Bcc           => 'Some Customer C <customer-c@example.com>',   # required if both To and Cc are not present\n    ReplyTo       => 'Some Customer B <customer-b@example.com>',   # not required, is possible to use 'Reply-To' instead\n    Subject       => 'Some words!',\n    Charset       => 'iso-8859-15',\n    MimeType      => 'text/plain', # \"text/plain\" or \"text/html\"\n    Body          => 'Some nice text',\n    InReplyTo     => '<somemessageid-2@example.com>',\n    References    => '<somemessageid-1@example.com> <somemessageid-2@example.com>',\n    Loop          => 1, # not required, removes smtp from\n    CustomHeaders => {\n        X-OTRS-MyHeader => 'Some Value',\n    },\n    Attachment => [\n        {\n            Filename    => \"somefile.csv\",\n            Content     => $ContentCSV,\n            ContentType => \"text/csv\",\n        },\n        {\n            Filename    => \"somefile.png\",\n            Content     => $ContentPNG,\n            ContentType => \"image/png\",\n        }\n    ],\n    EmailSecurity => {\n        Backend     => 'PGP',                       # PGP or SMIME\n        Method      => 'Detached',                  # Optional Detached or Inline (defaults to Detached)\n        SignKey     => '81877F5E',                  # Optional\n        EncryptKeys => [ '81877F5E', '3b630c80' ],  # Optional\n    }\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Sent = $EmailObject->Send(                   (Backwards compatibility)\n    From                 => 'me@example.com',\n    To                   => 'friend@example.com',\n    Subject              => 'Some words!',\n    Charset              => 'iso-8859-15',\n    MimeType             => 'text/plain', # \"text/plain\" or \"text/html\"\n    Body                 => 'Some nice text',\n    InReplyTo            => '<somemessageid-2@example.com>',\n    References           => '<somemessageid-1@example.com> <somemessageid-2@example.com>',\n    Sign => {\n        Type    => 'PGP',\n        SubType => 'Inline|Detached',\n        Key     => '81877F5E',\n\n        Type => 'SMIME',\n        Key  => '3b630c80',\n    },\n    Crypt => {\n        Type    => 'PGP',\n        SubType => 'Inline|Detached',\n        Key     => '81877F5E',\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SendExecute" : {
               "# or\nmy $Result = $EmailObject->SendExecute(\n    From                   => $RealFrom,\n    To                     => $To, # can be a string with comma separated mail addresses\n    Header                 => \\$Param{Header},\n    Body                   => \\$Param{Body},\n    CommunicationLogObject => $CommunicationLogObject,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Result = $EmailObject->SendExecute(\n    From                   => $RealFrom,\n    To                     => \\@ToArray,\n    Header                 => \\$Param{Header},\n    Body                   => \\$Param{Body},\n    CommunicationLogObject => $CommunicationLogObject,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $EmailObject = $Kernel::OM->Get('Kernel::System::Email');",
         "Package" : "Kernel::System::Email"
      },
      "EncodeObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ConfigureOutputFileHandle" : {
               "$EncodeObject->ConfigureOutputFileHandle( FileHandle => \\*STDOUT );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Convert" : {
               "my $iso_8859_1 = $EncodeObject->Convert(\n    Text => $utf-8_string,\n    From => 'utf-8',\n    To   => 'iso-8859-1',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $utf8 = $EncodeObject->Convert(\n    Text => $iso_8859_1_string,\n    From => 'iso-8859-1',\n    To   => 'utf-8',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Convert2CharsetInternal" : {
               "my $String = $EncodeObject->Convert2CharsetInternal(\n    Text => $String,\n    From => $SourceCharset,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "EncodeInput" : {
               "$EncodeObject->EncodeInput( \\$String );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$EncodeObject->EncodeInput( \\@Array );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "EncodeOutput" : {
               "$EncodeObject->EncodeOutput( \\$String );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$EncodeObject->EncodeOutput( \\@Array );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "EncodingIsAsciiSuperset" : {
               "my $IsSuperset = $EncodeObject->EncodingIsAsciiSuperset(\n    Encoding    => 'UTF-8',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FindAsciiSupersetEncoding" : {
               "my $Encoding = $EncodeObject->FindAsciiSupersetEncoding(\n    Encodings   => [ 'UTF-16LE', 'UTF-8' ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RemoveUTF8BOM" : {
               "my $StringWithoutBOM = $EncodeObject->RemoveUTF8BOM(\n    String => '<BOM>....',\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $EncodeObject = $Kernel::OM->Get('Kernel::System::Encode');",
         "Package" : "Kernel::System::Encode"
      },
      "EnvironmentObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "DBInfoGet" : {
               "my %DBInfo = $EnvironmentObject->DBInfoGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ModuleVersionGet" : {
               "my $Version = $EnvironmentObject->ModuleVersionGet(\n    Module => 'MIME::Parser',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "OSInfoGet" : {
               "my %OSInfo = $EnvironmentObject->OSInfoGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "OTRSInfoGet" : {
               "my %OTRSInfo = $EnvironmentObject->OTRSInfoGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PerlInfoGet" : {
               "my %PerlInfo = $EnvironmentObject->PerlInfoGet(\n    BundledModules => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %PerlInfo = $EnvironmentObject->PerlInfoGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $EnvironmentObject = $Kernel::OM->Get('Kernel::System::Environment');",
         "Package" : "Kernel::System::Environment"
      },
      "ErrorObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "HandleError" : {
               "my $Result =  $ErrorObject->HandleError(\n    WebserviceID      => $WebserviceID,                     # ID of the configured remote web service to use\n    WebserviceConfig  => $WebserviceConfig,\n    CommunicationID   => $CommunicationID, # communication ID of current debugger instance\n    CommunicationType => 'Requester',           # May be 'Requester' or 'Provider'\n    CommunicationName => 'CreateTicket',        # optional, name of Invoker or Operation\n    ErrorStage        => 'MappingIn',           # stage where error occurred\n    Summary           => $ErrorSummary,\n    Data              => $ErrorData,\n    PastExecutionData => $PastExecutionDataStructure,   # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ErrorObject = $Kernel::OM->Get('Kernel::GenericInterface::ErrorHandling');",
         "Package" : "Kernel::GenericInterface::ErrorHandling"
      },
      "EventObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "EventList" : {
               "my %Events = $EventObject->EventList(\n    ObjectTypes => ['Ticket', 'Article'],    # optional filter\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $EventObject = $Kernel::OM->Get('Kernel::System::Event');",
         "Package" : "Kernel::System::Event"
      },
      "ExcelObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Array2Excel" : {
               "my $ExcelFileContent = $ExcelObject->Array2Excel(\n    Data => [\n        {\n            Name        => 'Overview',\n            FreezePanes => [\n                {\n                    Row    => 2,\n                    Column => 0,\n                },\n            ],\n            TableData   => [\n                [\n                    {\n                        Format => {\n                            right    => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                    {\n                        Format => {\n                            left     => 1,\n                            right    => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                    {\n                        Format => {\n                            left     => 1,\n                            right    => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                    {\n                        Value  => 'Response Time',\n                        Merge  => 1,\n                        Format => {\n                            border   => 1,\n                            bg_color => 'silver',\n                            valign   => 'vcentre',\n                            align    => 'center',\n                        }\n                    },\n                    {\n                        Merge => 2,\n                    },\n                    {\n                        Merge => 3,\n                    },\n                    {\n                        Value  => 'Solution Time',\n                        Merge  => 1,\n                        Format => {\n                            border   => 1,\n                            bg_color => 'silver',\n                            valign   => 'vcentre',\n                            align    => 'center',\n                        }\n                    },\n                    {\n                        Merge => 2,\n                    },\n                    {\n                        Merge => 3,\n                    },\n                ],\n                [\n                    {\n                        Value  => 'Service',\n                        Format => {\n                            right    => 1,\n                            bottom   => 1,\n                            bg_color => 'silver',\n                            valign   => 'vcentre',\n                            align    => 'center',\n                        }\n                    },\n                    {\n                        Value  => 'SLA',\n                        Format => {\n                            left     => 1,\n                            right    => 1,\n                            bottom   => 1,\n                            bg_color => 'silver',\n                            valign   => 'vcentre',\n                            align    => 'center',\n                        }\n                    },\n                    {\n                        Value  => '#Tickets',\n                        Format => {\n                            left     => 1,\n                            right    => 1,\n                            bottom   => 1,\n                            bg_color => 'silver',\n                            valign   => 'vcentre',\n                            align    => 'center',\n                        }\n                    },\n                    {\n                        Value  => '#IN',\n                        Format => {\n                            border   => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                    {\n                        Value  => '%IN',\n                        Format => {\n                            border   => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                    {\n                        Value  => '#OUT',\n                        Format => {\n                            border   => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                    {\n                        Value  => '#IN',\n                        Format => {\n                            border   => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                    {\n                        Value  => '%IN',\n                        Format => {\n                            border   => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                    {\n                        Value  => '#OUT',\n                        Format => {\n                            border   => 1,\n                            bg_color => 'silver',\n                        }\n                    },\n                ],\n                ...\n            ],\n        },\n    ],\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetColumnContentFormat" : {
               "my $ColumnContentFormat = $ExcelObject->GetColumnContentFormat(\n    Value  => '123',\n    Format => {},\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetColumnIdentifierByNumber" : {
               "my $ColumnIdentifier = $ExcelObject->GetColumnIdentifierByNumber(\n    ColumnNumber => 27,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetFormatDefinition" : {
               "my $GetFormatDefinition = $ExcelObject->GetFormatDefinition(\n    Stat => $Stat,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MergeFormatDefinitions" : {
               "my %Format = $ExcelObject->MergeFormatDefinitions(\n    Merge             => 1,                 # if 1, merges all format definitions from last to first in array 'FormatDefinitions'\n                                            # if 0, use the first format definitions in array 'FormatDefinitions'\n    FormatDefinitions => [\n        # $CellFormatDefinition{Format},\n        {\n            'color' => 'silver',\n            'right' => 1,\n            'valign' => 'vcentre',\n        },\n        # $RowFormatDefinition{Format},\n        {\n            'color' => 'red',\n            'right' => 0,\n            'bold'  => 1,\n        },\n        # $ColumnFormatDefinition{Format},\n        # $Merge{Format},\n        # $CellData{Format},\n        # $DefaultFormatDefinition{Format},\n    ],\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ExcelObject = $Kernel::OM->Get('Kernel::System::Excel');",
         "Package" : "Kernel::System::Excel"
      },
      "FetchMailObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Fetch" : {
               "my $Success = $FetchMailObject->Fetch(\n\n    # General Options:\n    Check        => 1,                          # Optional, check for messages without fetching\n    Silent       => 1,                          # Optional, work silently\n    Verbose      => 1,                          # Optional, work noisily (diagnostic output)\n    NoSoftBounce => 1,                          # Optional, fetchmail deletes permanently undeliverable messages.\n    SoftBounce   => 1,                          # Optional, keep permanently undeliverable messages on server (default).\n\n    # Disposal Options:\n    Keep       => 1,                            # Optional, save new messages after retrieval\n    NoKeep     => 1,                            # Optional, delete new messages after retrieval\n    Flush      => 1,                            # Optional, delete old messages from server\n    LimitFlush => 1,                            # Optional, delete oversized messages\n\n    # Protocol and Query Options:\n    Protocol       => 'imap',                   # Optional, (auto || pop2 || pop3 || apop || rpop || kpop || sdps\n                                                #   || imap || etrn || odmr) specify retrieval protocol\n    UIDL           => 1,                        # Optional, force the use of UIDLs (pop3 only)\n    Service        => 123,                      # Optional, TCP service to connect to (can be numeric TCP port)\n    Principal      => 'SomePrincipal',          # Optional, mail service principal\n    Timeout        => 123,                      # Optional, server nonresponse timeout\n    Plugin         => 'SomeCommand',            # Optional, specify external command to open connection\n    Plugout        => 'SomeCommand',            # Optional, specify external command to open smtp connection\n    Folder         => 'SomeForlder',            # Optional, specify remote folder name\n    TracePolls     => 1,                        # Optional, add poll-tracing information to Received header\n    SSL            => 1,                        # Optional, enable ssl encrypted session\n    SSLCert        => 'SomeCertName',           # Optional, ssl client certificate\n    SSLKey         => 'SomeKeyName',            # Optional, ssl private key file\n    SSLProto       => 'SSL2',                   # Optional, (SSL2 || SSL3 || TLS1) force ssl protocol\n    SSLCertCheck   => 1,                        # Optional, do strict server certificate check (recommended)\n    SSLCertFile    => 'SomeCerName',            # Optional, path to trusted-CA ssl certificate file\n    SSLCertPath    => 'SomeCertPath',           # Optional, path to trusted-CA ssl certificate directory\n    SSLFingerprint => 'SomeFingerprint',        # Optional, fingerprint that must match that of the server's cert.\n\n    # Delivery Control Options:\n    SMTPHost     => 'SomeHosts',                # Optional, set SMTP forwarding host\n    FetchDomains => 'SomeDomains',              # Optional, fetch mail for specified domains\n    SMTPAddress  => 'SomeAddress',              # Optional, set SMTP delivery domain to use\n    SMTPName     => 'some@example.com',         # Optional, set SMTP full name username@domain\n    AntiSpam     => '123,456',                  # Optional, set antispam response values\n    MDA          => 'SomeCommand',              # Optional, set MDA to use for forwarding\n    LMTP         => 1,                          # Optional, use LMTP (RFC2033) for delivery\n    BSMTP        => 'SomeFile',                 # Optional, set output BSMTP file\n    BadHeader    => 'reject',                   # Optional, (reject || accept), specify policy for handling messages with bad headers\n\n    # Resource Limit Control Options\n    Limit          => 123,                      # Optional, don't fetch messages over given size\n    Warnings       => 123,                      # Optional, interval between warning mail notification\n    BatchLimit     => 123,                      # Optional, set batch limit for SMTP connections\n    FetchLimit     => 123,                      # Optional, set fetch limit for server connections\n    FetchSizeLimit => 123,                      # Optional, set fetch message size limit\n    FastUIDL       => 123,                      # Optional, do a binary search for UIDLs\n    Expunge        => 123,                      # Optional, set max deletions between expunges\n\n    # Authentication Options:\n    Username => 'SomeUserName',                 # Optional, specify users's login on server\n    Auth     => 'ssh',                          # Optional, (password || kerberos || ssh || otp) authentication type\n\n    # Miscellaneous Options:\n    FetchMailrc => 'SomeFile',                  # Optional, specify alternate run control file\n    IDFile      => 'SomeFile',                  # Optional, specify alternate UIDs file\n    NoRewrite   =>  1,                          # Optional, don't rewrite header addresses\n    Envelope    => 'SomeXHeader',               # Optional, envelope address header\n    QVirtual    => 'SomePrefix',                # Optional, prefix to remove from local user id\n\n    # Administrative Options:\n    Postmaster  => 'SomeName',                  # Optional, specify recipient of last resort\n    NoBouce     => 1,                           # Optional, redirect bounces from user to postmaster.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $FetchMailObject = $Kernel::OM->Get('Kernel::System::FetchMail');",
         "Package" : "Kernel::System::FetchMail"
      },
      "FileTempObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "TempFile" : {
               "my ($FileHandle, $Filename) = $FileTempObject->TempFile(\n    Suffix => '.png',   # optional, defaults to '.tmp'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $FileTempObject = $Kernel::OM->Get('Kernel::System::FileTemp');",
         "Package" : "Kernel::System::FileTemp"
      },
      "FormDraftObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "FormDraftAdd" : {
               "my $Success = $FormDraftObject->FormDraftAdd(\n    FormData => {\n        InformUserID => [ $InformUserID, 124, ],\n        Subject      => 'Request for information',\n        ...\n    },\n    FileData => [                                           # optional\n        {\n            'Content'     => 'Dear customer\\n\\nthank you!',\n            'ContentType' => 'text/plain',\n            'ContentID'   => undef,                         # optional\n            'Filename'    => 'thankyou.txt',\n            'Filesize'    => 25,\n            'FileID'      => 1,\n            'Disposition' => 'attachment',\n        },\n        ...\n    ],\n    ObjectType => 'Ticket',\n    ObjectID   => $ObjectID,\n    Action     => 'AgentTicketCompose',\n    Title      => 'my draft',                               # optional\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormDraftDelete" : {
               "my $Success = $FormDraftObject->FormDraftDelete(\n    FormDraftID => $FormDraftID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormDraftGet" : {
               "my $FormDraft = $FormDraftObject->FormDraftGet(\n    FormDraftID    => $FormDraftID,\n    GetContent => 1,                # optional, default 1\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormDraftListGet" : {
               "my $FormDraftList = $FormDraftObject->FormDraftListGet(\n    ObjectType => 'Ticket',             # optional\n    ObjectID   => $ObjectID,                  # optional\n    Action     => 'AgentTicketCompose', # optional\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormDraftUpdate" : {
               "my $Success = $FormDraftObject->FormDraftUpdate(\n    FormData => {\n        InformUserID => [ $InformUserID, 124, ],\n        Subject      => 'Request for information',\n        ...\n    },\n    FileData => [                                           # optional\n        {\n            'Content'     => 'Dear customer\\n\\nthank you!',\n            'ContentType' => 'text/plain',\n            'ContentID'   => undef,                         # optional\n            'Filename'    => 'thankyou.txt',\n            'Filesize'    => 25,\n            'FileID'      => 1,\n            'Disposition' => 'attachment',\n        },\n        ...\n    ],\n    ObjectType  => 'Ticket',\n    ObjectID    => $ObjectID,\n    Action      => 'AgentTicketCompose',\n    Title       => 'my draft',\n    FormDraftID => $FormDraftID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $FormDraftObject = $Kernel::OM->Get('Kernel::System::FormDraft');",
         "Package" : "Kernel::System::FormDraft"
      },
      "GenericAgentObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "JobAdd" : {
               "$GenericAgentObject->JobAdd(\n    Name => 'JobName',\n    Data => {\n        Queue => 'SomeQueue',\n        ...\n        Valid => 1,\n    },\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "JobDelete" : {
               "my $Success = $GenericAgentObject->JobDelete(\n    Name   => 'JobName',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "JobEventList" : {
               "my %List = $GenericAgentObject->JobEventList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "JobGet" : {
               "my %Job = $GenericAgentObject->JobGet(Name => 'JobName');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "JobList" : {
               "my %List = $GenericAgentObject->JobList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "JobRun" : {
               "$GenericAgentObject->JobRun(\n    Job          => 'JobName',\n    OnlyTicketID => $OnlyTicketID,     # (optional) for event based Job execution\n    SleepTime    => 100_000  # (optional) sleeptime per ticket in microseconds\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $GenericAgentObject = $Kernel::OM->Get('Kernel::System::GenericAgent');",
         "Package" : "Kernel::System::GenericAgent"
      },
      "GroupObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GroupAdd" : {
               "my $ID = $GroupObject->GroupAdd(\n    Name    => 'example-group',\n    Comment => 'comment describing the group',   # optional\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupDataList" : {
               "my %GroupDataList = $GroupObject->GroupDataList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupGet" : {
               "my %GroupData = $GroupObject->GroupGet(\n    ID => 2,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupList" : {
               "my %Groups = $GroupObject->GroupList(\n    Valid => 1,   # (optional) default 0\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupLookup" : {
               "my $Group = $GroupObject->GroupLookup(\n    GroupID => $GroupID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $GroupID = $GroupObject->GroupLookup(\n    Group => $Group,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GroupUpdate" : {
               "my $Success = $GroupObject->GroupUpdate(\n    ID      => 123,\n    Name    => 'example-group',\n    Comment => 'comment describing the group',   # optional\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionCheck" : {
               "my $HasPermission = $GroupObject->PermissionCheck(\n    UserID    => $UserID,\n    GroupName => $GroupName,\n    Type      => 'move_into', # ro|move_into|create|note|owner|priority|rw\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionGroupGet" : {
               "my %Users = $GroupObject->PermissionGroupGet(\n    GroupID => $GroupID,\n    Type    => 'move_into', # ro|move_into|create|note|owner|priority|rw\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionGroupRoleAdd" : {
               "my $Success = $GroupObject->PermissionGroupRoleAdd(\n    GID => $GID,\n    RID => $RID,\n    Permission => {\n        ro        => 1,\n        move_into => 1,\n        create    => 1,\n        note      =  1,\n        owner     => 1,\n        priority  => 0,\n        rw        => 0,\n    },\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionGroupRoleGet" : {
               "my %RoleList = $GroupObject->PermissionGroupRoleGet(\n    GroupID => $GroupID,\n    Type    => 'move_into',  # ro|move_into|create|note|owner|priority|rw\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionGroupUserAdd" : {
               "my $Success = $GroupObject->PermissionGroupUserAdd(\n    GID => $GID,\n    UID => $UID,\n    Permission => {\n        ro        => 1,\n        move_into => 1,\n        create    => 1,\n        note      => 1,\n        owner     => 1,\n        priority  => 0,\n        rw        => 0,\n    },\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionGroupUserGet" : {
               "my %UserList = $GroupObject->PermissionGroupUserGet(\n    GroupID => $GroupID,\n    Type    => 'move_into',  # ro|move_into|create|note|owner|priority|rw\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionRoleGroupGet" : {
               "my %GroupList = $GroupObject->PermissionRoleGroupGet(\n    RoleID => $RoleID,\n    Type   => 'move_into',  # ro|move_into|create|note|owner|priority|rw\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionRoleUserAdd" : {
               "my $Success = $GroupObject->PermissionRoleUserAdd(\n    UID    => $UID,\n    RID    => $RID,\n    Active => 1,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionRoleUserGet" : {
               "my %UserList = $GroupObject->PermissionRoleUserGet(\n    RoleID => $RoleID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionUserGet" : {
               "my %Groups = $GroupObject->PermissionUserGet(\n    UserID => $UserID,\n    Type   => 'move_into', # ro|move_into|create|note|owner|priority|rw\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionUserGroupGet" : {
               "my %GroupList = $GroupObject->PermissionUserGroupGet(\n    UserID => $UserID,\n    Type   => 'move_into',  # ro|move_into|create|note|owner|priority|rw\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionUserInvolvedGet" : {
               "my %Users = $GroupObject->PermissionUserInvolvedGet(\n    UserID => $UserID,\n    Type   => 'move_into', # ro|move_into|create|note|owner|priority|rw\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PermissionUserRoleGet" : {
               "my %RoleList = $GroupObject->PermissionUserRoleGet(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RoleAdd" : {
               "my $RoleID = $GroupObject->RoleAdd(\n    Name    => 'example-role',\n    Comment => 'comment describing the role',   # optional\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RoleDataList" : {
               "my %RoleDataList = $GroupObject->RoleDataList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RoleGet" : {
               "my %RoleData = $GroupObject->RoleGet(\n    ID => 2,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RoleList" : {
               "my %Roles = $GroupObject->RoleList(\n    Valid => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RoleLookup" : {
               "my $Role = $GroupObject->RoleLookup(\n    RoleID => $RoleID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $RoleID = $GroupObject->RoleLookup(\n    Role => $Role,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RoleUpdate" : {
               "my $Success = $GroupObject->RoleUpdate(\n    ID      => 123,\n    Name    => 'example-group',\n    Comment => 'comment describing the role',   # optional\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $GroupObject = $Kernel::OM->Get('Kernel::System::Group');",
         "Package" : "Kernel::System::Group"
      },
      "HTMLUtilsObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "DocumentCleanup" : {
               "$HTMLBody = $HTMLUtilsObject->DocumentCleanup(\n    String => $HTMLBody,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DocumentComplete" : {
               "my $HTMLDocument = $HTMLUtilsObject->DocumentComplete(\n    String  => $String,\n    Charset => $Charset,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DocumentStrip" : {
               "my $HTMLString = $HTMLUtilsObject->DocumentStrip(\n    String  => $String,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "EmbeddedImagesExtract" : {
               "$HTMLUtilsObject->EmbeddedImagesExtract(\n    DocumentRef    => \\$Body,\n    AttachmentsRef => \\@Attachments,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkQuote" : {
               "my $HTMLWithLinks = $HTMLUtilsObject->LinkQuote(\n    String    => $HTMLString,\n    Target    => 'TargetName', # content of target=\"?\", e. g. _blank\n    TargetAdd => 1,            # add target=\"_blank\" to all existing \"<a href\"\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $HTMLWithLinksRef = $HTMLUtilsObject->LinkQuote(\n    String => \\$HTMLStringRef,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Safety" : {
               "my %Safe = $HTMLUtilsObject->Safety(\n    String         => $HTMLString,\n    NoApplet       => 1,\n    NoObject       => 1,\n    NoEmbed        => 1,\n    NoSVG          => 1,\n    NoImg          => 1,\n    NoIntSrcLoad   => 0,\n    NoExtSrcLoad   => 1,\n    NoJavaScript   => 1,\n    ReplacementStr => 'string',          # optional, string to show instead of applet, object, embed, svg and img tags\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Safe = $HTMLUtilsObject->Safety(\n    String       => \\$HTMLStringRef,\n    NoApplet     => 1,\n    NoObject     => 1,\n    NoEmbed      => 1,\n    NoSVG        => 1,\n    NoImg        => 1,\n    NoIntSrcLoad => 0,\n    NoExtSrcLoad => 1,\n    NoJavaScript => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ToAscii" : {
               "my $Ascii = $HTMLUtilsObject->ToAscii( String => $String );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ToHTML" : {
               "my $HTMLString = $HTMLUtilsObject->ToHTML(\n    String             => $String,\n    ReplaceDoubleSpace => 0,        # replace &nbsp;&nbsp; with \"  \", optional 1 or 0 (defaults to 1)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TruncateBodyQuote" : {
               "$Body = $HTMLUtilsObject->TruncateBodyQuote(\n    Body       => $Body,\n    Limit      => 10000,\n    HTMLOutput => 1|0,\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $HTMLUtilsObject = $Kernel::OM->Get('Kernel::System::HTMLUtils');",
         "Package" : "Kernel::System::HTMLUtils"
      },
      "HelperObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ACLValuesGet" : {
               "my %Result = $HelperObject->ACLValuesGet(\n    Check    => 'Action',\n    UserID   => $UserID,\n    %TicketACLParams,   # see TicketACL.pm\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Result = $HelperObject->ACLValuesGet(\n    Check    => 'DynamicField_Test',\n    UserID   => $UserID,\n    %TicketACLParams,   # see TicketACL.pm\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Result = $HelperObject->ACLValuesGet(\n    Check  => 'Priority',\n    UserID => $UserID,\n    %TicketACLParams,   # see TicketACL.pm\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Result = $HelperObject->ACLValuesGet(\n    Check  => 'Queue',\n    UserID => $UserID,\n    %TicketACLParams,   # see TicketACL.pm\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Result = $HelperObject->ACLValuesGet(\n    Check  => 'SLA',\n    UserID => $UserID,\n    %TicketACLParams,   # see TicketACL.pm\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Result = $HelperObject->ACLValuesGet(\n    Check  => 'Service',\n    UserID => $UserID,\n    %TicketACLParams,   # see TicketACL.pm\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Result = $HelperObject->ACLValuesGet(\n    Check  => 'State',\n    UserID => $UserID,\n    %TicketACLParams,   # see TicketACL.pm\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Result = $HelperObject->ACLValuesGet(\n    Check  => 'Type',\n    UserID => $UserID,\n    %TicketACLParams,   # see TicketACL.pm\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ActivateDefaultDynamicFields" : {
               "my $Result = $HelperObject->ActivateDefaultDynamicFields();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ActivateDynamicFields" : {
               "$HelperObject->ActivateDynamicFields(\n    'UnitTestDropdown',\n    'UnitTestCheckbox',\n    'UnitTestText',\n    'UnitTestMultiSelect',\n    'UnitTestTextArea',\n    'UnitTestDate',\n    'UnitTestDateTime',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleCreate" : {
               "my $ArticleID = $HelperObject->ArticleCreate(\n    TicketID       => $TicketID,\n    ArticleType    => 'note-internal',\n    SenderType     => 'agent',\n    Subject        => 'UnitTest subject test',\n    Body           => 'UnitTest body test',\n    ContentType    => 'text/plain; charset=ISO-8859-15',\n    HistoryType    => 'OwnerUpdate',\n    HistoryComment => 'Some free text!',\n    UserID         => $UserID,\n    NoAgentNotify  => 1,\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $ArticleID = $HelperObject->ArticleCreate(\n    TicketID   => $TicketID,\n    SenderType => 'customer',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $ArticleID = $HelperObject->ArticleCreate(\n    TicketID => $TicketID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "BeginWork" : {
               "    $HelperObject->BeginWork()\n\n" : [
                  "6.0"
               ],
               "$HelperObject->BeginWork();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CheckNumberOfEventExecution" : {
               "my $Result = $HelperObject->CheckNumberOfEventExecution(\n    TicketID => $TicketID,\n    Comment  => 'after article create',\n    Events   => {\n        AnExampleHistoryEntry      => 2,\n        AnotherExampleHistoryEntry => 0,\n    },\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigSettingChange" : {
               "$HelperObject->ConfigSettingChange(\n    Valid => 1,            # (optional) enable or disable setting\n    Key   => 'MySetting',  # setting name\n    Value => { ... } ,     # setting value\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigureViews" : {
               "my $Result = $HelperObject->ConfigureViews(\n    AgentTicketNote => {\n        Note             => 1,\n        NoteMandatory    => 1,\n        Owner            => 1,\n        OwnerMandatory   => 1,\n        Priority         => 1,\n        PriorityDefault  => '3 normal',\n        Queue            => 1,\n        Responsible      => 1,\n        Service          => 1,\n        ServiceMandatory => 1,\n        SLAMandatory     => 1,\n        State            => 1,\n        StateType        => ['open', 'closed', 'pending reminder', 'pending auto'],\n        TicketType       => 1,\n        Title            => 1,\n    },\n    CustomerTicketMessage => {\n        Priority         => 1,\n        Queue            => 1,\n        Service          => 1,\n        ServiceMandatory => 1,\n        SLA              => 1,\n        SLAMandatory     => 1,\n        TicketType       => 1,\n    },\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ConsoleCommand" : {
               "my $Result = $HelperObject->ConsoleCommand(\n    CommandModule => 'Kernel::System::Console::Command::Help',\n    Parameter     => 'Lis',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Result = $HelperObject->ConsoleCommand(\n    CommandModule => 'Kernel::System::Console::Command::Maint::Cache::Delete',\n    Parameter     => [ '--type', 'Znuny' ],\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Result = $HelperObject->ConsoleCommand(\n    CommandModule => 'Kernel::System::Console::Command::Maint::Cache::Delete',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CustomCodeActivate" : {
               "$HelperObject->CustomCodeActivate(\n    Code => q^\nsub Kernel::Config::Files::ZZZZUnitTestIdentifier::Load {} # no-op, avoid warning logs\nuse Kernel::System::WebUserAgent;\npackage Kernel::System::WebUserAgent;\nuse strict;\nuse warnings;\n{\nno warnings 'redefine';\nsub Request {\n    my $JSONString = '{\"Results\":{},\"ErrorMessage\":\"\",\"Success\":1}';\n    return (\n        Content => \\$JSONString,\n        Status  => '200 OK',\n    );\n}\n}\n1;^,\n    Identifier => 'News',   # (optional) Code identifier to include in file name\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomFileCleanup" : {
               "$HelperObject->CustomFileCleanup();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DatabaseXML" : {
               "my $Success = $HelperObject->DatabaseXML(\n    Location => $ConfigObject->Get('Home') . '/scripts/development/db/schema.xml',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Success = $HelperObject->DatabaseXML(\n    String => '...',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DatabaseXMLExecute" : {
               "$HelperObject->DatabaseXMLExecute(\n    XML => $XML,                 # OTRS database XML schema to execute\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$HelperObject->DatabaseXMLExecute(\n    XMLFile => '/path/to/file',  # OTRS database XML file to execute\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DisableAsyncCalls" : {
               "$HelperObject->DisableAsyncCalls();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DisableSysConfigs" : {
               "$HelperObject->DisableSysConfigs(\n    DisableSysConfigs => [\n        'Ticket::Responsible'\n        'DashboardBackend###0442-RSS'\n    ],\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldSet" : {
               "my $Success = $HelperObject->DynamicFieldSet(\n    Field          => 'DF1',\n    ObjectID       => $ObjectID,\n    Value          => '123',\n    UserID         => $UserID, # optional\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Success = $HelperObject->DynamicFieldSet(\n    Field      => 'DF1',\n    ObjectID   => $ObjectID,\n    Value      => '123',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FillTestEnvironment" : {
               "# create everything with defaults, except 20 agents\nmy $Result = $HelperObject->FillTestEnvironment(\n    User => 20,\n);" : [
                  "6.4",
                  "6.5"
               ],
               "# create everything with defaults, except Type\nmy $Result = $HelperObject->FillTestEnvironment(\n    Type => {\n        'Type 1::Sub Type' => 1,\n        ...\n    }\n);" : [
                  "6.4",
                  "6.5"
               ],
               "# would do nothing -> return an empty HashRef\nmy $Result = $HelperObject->FillTestEnvironment(\n    User         => 0, # optional, default 5\n    CustomerUser => 0, # optional, default 5\n    Service      => 0, # optional, default 1 (true)\n    SLA          => 0, # optional, default 1 (true)\n    Type         => 0, # optional, default 1 (true)\n    Queue        => 0, # optional, default 1 (true)\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FixedTimeAddSeconds" : {
               "$HelperObject->FixedTimeAddSeconds(5);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FixedTimeSet" : {
               "# set to current date and time\nmy $Timestamp = $HelperObject->FixedTimeSet();" : [
                  "6.4",
                  "6.5"
               ],
               "# with Timestamp\nmy $Timestamp = $HelperObject->FixedTimeSet(366475757);" : [
                  "6.4",
                  "6.5"
               ],
               "# with previously created DateTime object\nmy $Timestamp = $HelperObject->FixedTimeSet($DateTimeObject);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FixedTimeSetByDate" : {
               "$HelperObject->FixedTimeSetByDate(\n    Year   => 2016,\n    Month  => 4,\n    Day    => 28,\n    Hour   => 10, # default 0\n    Minute => 0,  # default 0\n    Second => 0,  # default 0\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FixedTimeSetByTimeStamp" : {
               "$HelperObject->FixedTimeSetByTimeStamp('2004-08-14 22:45:00');" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FixedTimeUnset" : {
               "$HelperObject->FixedTimeUnset();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FullFeature" : {
               "$HelperObject->FullFeature();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetRandomID" : {
               "my $RandomID = $HelperObject->GetRandomID();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetRandomNumber" : {
               "my $RandomNumber = $HelperObject->GetRandomNumber();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetTestHTTPHostname" : {
               "my $Hostname = $HelperObject->GetTestHTTPHostname();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "PostMaster" : {
               "my @Result = $HelperObject->PostMaster(\n    Location => $ConfigObject->Get('Home') . '/scripts/test/sample/Sample-1.box',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ProvideTestDatabase" : {
               "$HelperObject->ProvideTestDatabase(\n    DatabaseXMLString => $XML,      # (optional) OTRS database XML schema to execute\n                                    # or\n    DatabaseXMLFiles => [           # (optional) List of XML files to load and execute\n        '/opt/otrs/scripts/database/otrs-schema.xml',\n        '/opt/otrs/scripts/database/otrs-initial_insert.xml',\n    ],\n);" : [
                  "6.0"
               ],
               "$HelperObject->ProvideTestDatabase(\n    DatabaseXMLString => $XML,      # (optional) database XML schema to execute\n                                    # or\n    DatabaseXMLFiles => [           # (optional) List of XML files to load and execute\n        '/opt/otrs/scripts/database/schema.xml',\n        '/opt/otrs/scripts/database/initial_insert.xml',\n    ],\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Rollback" : {
               "$HelperObject->Rollback();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "SetupTestEnvironment" : {
               "my $Result = $HelperObject->SetupTestEnvironment(\n    ... # Parameters get passed to the FillTestEnvironment and ConfigureViews function\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "TestCustomerUserCreate" : {
               "my $TestCustomerUserLogin = $HelperObject->TestCustomerUserCreate(\n    Language  => 'de',   # optional, defaults to 'en' if not set\n    KeepValid => 1,      # optional, defaults to 0\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $TestUserLogin = $HelperObject->TestCustomerUserCreate(\n    Language => 'de',   # optional, defaults to 'en' if not set\n);" : [
                  "6.0"
               ]
            },
            "TestCustomerUserDataGet" : {
               "my %CustomerUserData = $HelperObject->TestCustomerUserDataGet(\n    Language => 'de' # optional, defaults to 'en' if not set\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "TestDatabaseCleanup" : {
               "$HelperObject->TestDatabaseCleanup();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TestUserCreate" : {
               "my $TestUserLogin = $HelperObject->TestUserCreate(\n    Groups    => ['admin', 'users'],         # optional, list of groups to add this user to (rw rights)\n    Language  => 'de'                        # optional, defaults to 'en' if not set\n    KeepValid => 1,                          # optional, defaults to 0\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $TestUserLogin = $HelperObject->TestUserCreate(\n    Groups => ['admin', 'users'],           # optional, list of groups to add this user to (rw rights)\n    Language => 'de'                        # optional, defaults to 'en' if not set\n);" : [
                  "6.0"
               ],
               "my ( $TestUserLogin, $TestUserID ) = $HelperObject->TestUserCreate(\n    Groups    => ['admin', 'users'],\n    Language  => 'de'\n    KeepValid => 1,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "TestUserDataGet" : {
               "my %UserData = $HelperObject->TestUserDataGet(\n    Groups => ['admin', 'users'],           # optional, list of groups to add this user to (rw rights)\n    Language => 'de'                        # optional, defaults to 'en' if not set\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "TestUserPreferencesSet" : {
               "my $Success = $HelperObject->TestUserPreferencesSet(\n    UserID      => $UserID,\n    Preferences => {                  # \"Preferences\" hashref is required\n        OutOfOffice  => 1,            # example Key -> Value pair for User Preferences\n        UserMobile   => undef,        # example for deleting a UserPreferences Key's value\n        UserLanguage => '',           # example for deleting a UserPreferences Key's value\n    },\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCreate" : {
               "my $TicketID = $HelperObject->TicketCreate(\n    CustomerUser => 'another_customer@example.com',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $TicketID = $HelperObject->TicketCreate(\n    Title        => 'UnitTest ticket',\n    Queue        => 'Raw',\n    Lock         => 'unlock',\n    Priority     => '3 normal',\n    State        => 'new',\n    CustomerID   => $CustomerID,\n    CustomerUser => 'customer@example.com',\n    OwnerID      => $OwnerID,\n    UserID       => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $TicketID = $HelperObject->TicketCreate();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "UseTmpArticleDir" : {
               "$HelperObject->UseTmpArticleDir();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $HelperObject = $Kernel::OM->Get('Kernel::System::UnitTest::Helper');",
         "Package" : "Kernel::System::UnitTest::Helper"
      },
      "JSONObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Decode" : {
               "my $PerlStructureScalar = $JSONObject->Decode(\n    Data => $JSONString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Encode" : {
               "my $JSONString = $JSONObject->Encode(\n    Data     => $Data,\n    SortKeys => 1,          # (optional) (0|1) default 0, to sort the keys of the json data\n    Pretty => 1,            # (optional) (0|1) default 0, to pretty print\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "True" : {
               "my $TrueConstant = $JSONObject->True();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $JSONObject = $Kernel::OM->Get('Kernel::System::JSON');",
         "Package" : "Kernel::System::JSON"
      },
      "JWTObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Decode" : {
               "my $JWT = $JWTObject->Decode(\n    Token       => '...',\n\n    # Key or KeyFilePath\n    Key         => '...', # see https://metacpan.org/pod/Crypt::JWT#key1\n    KeyFilePath => '/home/user1/key.pem',\n\n    KeyPassword => '...', # optional, password for the key\n\n    # Optional: Use this hash to give additional parameters to Crypt::JWT.\n    CryptJWTParameters => {\n\n        # see https://metacpan.org/pod/Crypt::JWT#decode_jwt\n        '...' => '...',\n\n        # ...\n    },\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Encode" : {
               "my $JWT = $JWTObject->Encode(\n    Payload => {\n\n        # arbitrary data\n        Subject => '...',\n        SomeOtherData => {\n\n            # ...\n        },\n    },\n    Algorithm   => 'RS512', # see https://metacpan.org/pod/Crypt::JWT#alg\n\n    # Key or key file\n    Key         => '...', # see https://metacpan.org/pod/Crypt::JWT#key1\n    KeyFilePath => '/home/user1/key.pem',\n\n    KeyPassword          => '...', # optional, password for the key\n    AdditionalHeaderData => { # optional\n\n        # arbitrary data\n        Type => '...',\n    },\n\n    # Optional: Use this hash to give additional parameters to Crypt::JWT.\n    CryptJWTParameters => {\n\n        # see https://metacpan.org/pod/Crypt::JWT#encode_jwt\n        enc => '...',\n\n        # ...\n    },\n\n    # Optional: Data to be placed in placeholders in given Payload and AdditionalHeaderData parameters.\n    # All values of the given payload and additional header data hash will be searched\n    # for all the given placeholders and their values be replaced.\n    PlaceholderData => {\n        OTRS_JWT_CertSubject         => '...',\n        OTRS_JWT_ExpirationTimestamp => '9999999999999',\n\n        # ...\n    },\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsSupported" : {
               "my $JWTObjectIsSupported = $JWTObject->IsSupported();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $JWTObject = $Kernel::OM->Get('Kernel::System::JSONWebToken');",
         "Package" : "Kernel::System::JSONWebToken"
      },
      "LanguageObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "FormatTimeString" : {
               "my $Date = $LanguageObject->FormatTimeString(\n    '2009-12-12 12:12:12',  # timestamp\n    'DateFormat',           # which date format to use, e. g. DateFormatLong\n    0,                      # optional, hides the seconds from the time output\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetJSTemplateTranslatableStrings" : {
               "my @TranslationStrings = $LanguageObject->GetJSTemplateTranslatableStrings(\n    ModuleDirectory  => \"$Home/...\",  # optional, translates the Znuny module in the given directory\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetJSTranslatableStrings" : {
               "my @TranslationStrings = $LanguageObject->GetJSTranslatableStrings(\n    ModuleDirectory  => \"$Home/...\",  # optional, translates the Znuny module in the given directory\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetPerlModuleTranslatableStrings" : {
               "my @TranslationStrings = $LanguageObject->GetPerlModuleTranslatableStrings(\n    ModuleDirectory  => \"$Home/...\",  # optional, translates the Znuny module in the given directory\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetPossibleCharsets" : {
               "my @Charsets = $LanguageObject->GetPossibleCharsets();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetRecommendedCharset" : {
               "    my $Charset = $LanguageObject->GetRecommendedCharset().\n\n" : [
                  "6.0"
               ],
               "my $Charset = $LanguageObject->GetRecommendedCharset();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetSysConfigTranslatableStrings" : {
               "my @TranslationStrings = $LanguageObject->GetSysConfigTranslatableStrings();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetTTTemplateTranslatableStrings" : {
               "my @TranslationStrings = $LanguageObject->GetTTTemplateTranslatableStrings(\n    ModuleDirectory => \"$Home/...\",  # optional, translates the Znuny module in the given directory\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetXMLTranslatableStrings" : {
               "my @TranslationStrings = $LanguageObject->GetXMLTranslatableStrings(\n    ModuleDirectory  => \"$Home/...\",  # optional, translates the Znuny module in the given directory\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Time" : {
               "$Time = $LanguageObject->Time(\n    Action => 'GET',\n    Format => 'DateFormat',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$TimeLong = $LanguageObject->Time(\n    Action => 'GET',\n    Format => 'DateFormatLong',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$TimeLong = $LanguageObject->Time(\n    Action => 'RETURN',\n    Format => 'DateFormatLong',\n    Year   => 1977,\n    Month  => 10,\n    Day    => 27,\n    Hour   => 20,\n    Minute => 10,\n    Second => 05,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$TimeLong = $LanguageObject->Time(\n    Action => 'RETURN',\n    Format => 'DateInputFormatLong',\n    Mode   => 'NotNumeric',\n    Year   => '<input value=\"2014\"/>',\n    Month  => '<input value=\"1\"/>',\n    Day    => '<input value=\"10\"/>',\n    Hour   => '<input value=\"11\"/>',\n    Minute => '<input value=\"12\"/>',\n    Second => '<input value=\"13\"/>',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Translatable" : {
               "my $Selection = $LayoutObject BuildSelection (\n    Data => {\n        'and' => Translatable('and'),\n        'or'  => Translatable('or'),\n        'xor' => Translatable('xor'),\n    },\n    Name        => \"ConditionLinking[_INDEX_]\",\n    Sort        => 'AlphanumericKey',\n    Translation => 1,\n    Class       => 'Modernize W50pc',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Translate" : {
               "my $Text = $LanguageObject->Translate('Hello %s!', 'world');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $LanguageObject = $Kernel::OM->Get('Kernel::Language');",
         "Package" : "Kernel::Language"
      },
      "LastViewsObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Delete" : {
               "my $Success = $LastViewsObject->Delete(\n    SessionID => $Param{SessionID},\n    Count     => 20,                    # option - deletes all views but the latest n\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Get" : {
               "my %LastView = $LastViewsObject->Get(\n    %{ $Param{Request} },\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetActionIgnore" : {
               "my @ActionIgnore = $LastViewsObject->GetActionIgnore();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetActionMapping" : {
               "my %ActionMapping = $LastViewsObject->GetActionMapping();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetList" : {
               "my @LastViews = $LastViewsObject->GetList(\n    SessionID => $SessionID,\n    Types     => ['Ticket', 'Admin'],   # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetPopUpActions" : {
               "my %PopUpActions = $LastViewsObject->GetPopUpActions();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetSubactionIgnore" : {
               "my @SubactionIgnore = $LastViewsObject->GetSubactionIgnore();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsValidRequest" : {
               "my $IsValidRequest = $LastViewsObject->IsValidRequest(\n    %Request\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Update" : {
               "my $Success = $LastViewsObject->Update(\n    SessionID => $Self->{SessionID},\n    Request   => \\%Request,\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $LastViewsObject = $Kernel::OM->Get('Kernel::System::LastViews');",
         "Package" : "Kernel::System::LastViews"
      },
      "LayoutObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AddJSData" : {
               "$LayoutObject->AddJSData(\n    Key   => 'Key1',  # the key to store this data\n    Value => { ... }  # simple or complex data\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "AddJSOnDocumentComplete" : {
               "$LayoutObject->AddJSOnDocumentComplete(\n    Code => $MyCode,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "AddJSOnDocumentCompleteIfNotExists" : {
               "my $Success = $LayoutObject->AddJSOnDocumentCompleteIfNotExists(\n    Key  => 'identifier_key_of_your_js',\n    Code => $JSBlock,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleActions" : {
               "my @Actions = $LayoutObject->ArticleActions(\n    TicketID  => $TicketID,     # (required)\n    ArticleID => $ArticleID,     # (required)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleCustomerRecipientsGet" : {
               "my @CustomerUserIDs = $LayoutObject->ArticleCustomerRecipientsGet(\n    TicketID  => $TicketID,     # (required)\n    ArticleID => $ArticleID,     # (required)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleFields" : {
               "my %ArticleFields = $LayoutObject->ArticleFields(\n    TicketID  => $TicketID,   # (required)\n    ArticleID => $ArticleID,   # (required)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticlePreview" : {
               "my $ArticlePreview = $LayoutObject->ArticlePreview(\n    TicketID   => $TicketID,     # (required)\n    ArticleID  => $ArticleID,     # (required)\n    ResultType => 'plain', # (optional) plain|HTML, default: HTML\n    MaxLength  => 50,      # (optional) performs trimming (for plain result only)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ArticleQuote" : {
               "my $HTMLBody = $LayoutObject->ArticleQuote(\n    TicketID           => $TicketID,\n    ArticleID          => $ArticleID,\n    FormID             => $Self->{FormID},\n    UploadCacheObject   => $Self->{UploadCacheObject},\n    AttachmentsInclude => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $HTMLBody = $LayoutObject->ArticleQuote(\n    TicketID           => $TicketID,\n    ArticleID          => $ArticleID,\n    FormID             => $Self->{FormID},\n    UploadCacheObject  => $Self->{UploadCacheObject},\n    AttachmentsInclude => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Ascii2Html" : {
               "my $HTML = $LayoutObject->Ascii2Html(\n    Text            => 'Some <> Test <font color=\"red\">Test</font>',\n    Max             => 20,       # max 20 chars flowed by [..]\n    VMax            => 15,       # first 15 lines\n    NewLine         => 0,        # move \\r to \\n\n    HTMLResultMode  => 0,        # replace \" \" with C<&nbsp;>\n    StripEmptyLines => 0,\n    Type            => 'Normal', # JSText or Normal text\n    LinkFeature     => 0,        # do some URL detections\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $HTMLStringRef = $LayoutObject->Ascii2Html(\n    Text => \\$String,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Ascii2RichText" : {
               "my $HTMLString = $LayoutObject->Ascii2RichText(\n    String => $TextString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Attachment" : {
               "$HTML = $LayoutObject->Attachment(\n    Type             => 'inline',          # optional, default: attachment, possible: inline|attachment\n    Filename         => 'FileName.png',    # optional\n    AdditionalHeader => $AdditionalHeader, # optional\n    ContentType      => 'image/png',\n    Content          => $Content,\n    Sandbox          => 1,                 # optional, default 0; use content security policy to prohibit external\n                                           #   scripts, flash etc.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$HTML = $LayoutObject->Attachment(\n    Type        => 'inline',        # optional, default: attachment, possible: inline|attachment\n    Filename    => 'FileName.html', # optional\n    ContentType => 'text/html',\n    Charset     => 'utf-8',         # optional\n    Content     => $Content,\n    NoCache     => 1,               # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Block" : {
               "$LayoutObject->Block(\n    Name => 'Row',\n    Data => {\n        Time => ...,\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "BuildDateSelection" : {
               "my $HTML = $LayoutObject->BuildDateSelection(\n    Prefix           => 'some prefix',        # optional, (needed to specify other parameters)\n    <Prefix>Year     => 2015,                 # optional, defaults to current year, used to set the initial value\n    <Prefix>Month    => 6,                    # optional, defaults to current month, used to set the initial value\n    <Prefix>Day      => 9,                    # optional, defaults to current day, used to set the initial value\n    <Prefix>Hour     => 12,                   # optional, defaults to current hour, used to set the initial value\n    <Prefix>Minute   => 26,                   # optional, defaults to current minute, used to set the initial value\n    <Prefix>Second   => 59,                   # optional, defaults to current second, used to set the initial value\n    <Prefix>Optional => 1,                    # optional, default 0, when active a checkbox is included to specify\n                                              #   if the values should be saved or not\n    <Prefix>Used     => 1,                    # optional, default 0, used to set the initial state of the checkbox\n                                              #   mentioned above\n    <Prefix>Required => 1,                    # optional, default 0 (Deprecated)\n    <prefix>Class    => 'some class',         # optional, specify an additional class to the HTML elements\n    Area     => 'some area',                  # optional, default 'Agent' (Deprecated)\n    DiffTime => 123,                          # optional, default 0, used to set the initial time influencing the\n                                              #   current time (in seconds)\n    OverrideTimeZone => 1,                    # optional (1 or 0), when active the time is not translated to the user\n                                              #   time zone\n    YearPeriodFuture => 3,                    # optional, used to define the number of years in future to be display\n                                              #   in the year select\n    YearPeriodPast   => 2,                    # optional, used to define the number of years in past to be display\n                                              #   in the year select\n    YearDiff         => 0,                    # optional. used to define the number of years to be displayed\n                                              #   in the year select (alternatively to YearPeriodFuture and YearPeriodPast)\n    ValidateDateInFuture     => 1,            # optional (1 or 0), when active sets an special class to validate\n                                              #   that the date set in the controls to be in the future\n    ValidateDateNotInFuture  => 1,            # optional (1 or 0), when active sets an special class to validate\n                                              #   that the date set in the controls not to be in the future\n    ValidateDateAfterPrefix  => 'Start',      # optional (Prefix), when defined sets a special class to validate\n                                              #   that the date set in the controls comes after the date with Prefix\n    ValidateDateAfterValue   => '2016-01-01', # optional (Date), when defined sets a special data parameter to validate\n                                              #   that the date set in the controls comes after the supplied date\n    ValidateDateBeforePrefix => 'End',        # optional (Prefix), when defined sets a special class to validate\n                                              #   that the date set in the controls comes before the date with Prefix\n    ValidateDateBeforeValue  => '2016-01-01', # optional (Date), when defined sets a special data parameter to validate\n                                              #   that the date set in the controls comes before the supplied date\n    Calendar => 2,                            # optional, used to define the SysConfig calendar on which the Datepicker\n                                              #   will be based on to show the vacation days and the start week day\n    Format   => 'DateInputFormat',            # optional, or 'DateInputFormatLong', used to define if only date or\n                                              #   date/time components should be shown (DateInputFormatLong shows date/time)\n    Validate => 1,                            # optional (1 or 0), defines if the date selection should be validated on\n                                              #   client side with JS\n    Disabled => 1,                            # optional (1 or 0), when active select and checkbox controls gets the\n                                              #   disabled attribute and input fields gets the read only attribute\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "BuildSelection" : {
               "my $HTML = $LayoutObject->BuildSelection(\n    Data            => $ArrayRef,        # use $HashRef, $ArrayRef or $ArrayHashRef (see below)\n    Name            => 'TheName',        # name of element\n    ID              => 'HTMLID',         # (optional) the HTML ID for this element, if not provided, the name will be used as ID as well\n    Multiple        => 0,                # (optional) default 0 (0|1)\n    Size            => 1,                # (optional) default 1 element size\n    Class           => 'class',          # (optional) a css class, include 'Modernize' to activate InputFields\n    Disabled        => 0,                # (optional) default 0 (0|1) disable the element\n    AutoComplete    => 'off',            # (optional)\n    OnChange        => 'javascript',     # (optional)\n    OnClick         => 'javascript',     # (optional)\n\n    SelectedID     => $SelectedID,                 # (optional) use integer or arrayref (unable to use with ArrayHashRef)\n    SelectedID     => [$SelectedID, 5, 3],         # (optional) use integer or arrayref (unable to use with ArrayHashRef)\n    SelectedValue  => 'test',            # (optional) use string or arrayref (unable to use with ArrayHashRef)\n    SelectedValue  => ['test', 'test1'], # (optional) use string or arrayref (unable to use with ArrayHashRef)\n\n    Sort           => 'NumericValue',    # (optional) (AlphanumericValue|NumericValue|AlphanumericKey|NumericKey|TreeView|IndividualKey|IndividualValue) unable to use with ArrayHashRef\n    SortIndividual => ['sec', 'min']     # (optional) only sort is set to IndividualKey or IndividualValue\n    SortReverse    => 0,                 # (optional) reverse the list\n\n    Translation    => 1,                 # (optional) default 1 (0|1) translate value\n    PossibleNone   => 0,                 # (optional) default 0 (0|1) add a leading empty selection\n    TreeView       => 0,                 # (optional) default 0 (0|1)\n    DisabledBranch => 'Branch',          # (optional) disable all elements of this branch (use string or arrayref)\n    Max            => 100,               # (optional) default 100 max size of the shown value\n    HTMLQuote      => 0,                 # (optional) default 1 (0|1) disable html quote\n    Title          => 'C<Tooltip> Text',    # (optional) string will be shown as c<Tooltip> on c<mouseover>\n    OptionTitle    => 1,                 # (optional) default 0 (0|1) show title attribute (the option value) on every option element\n\n    Filters => {                         # (optional) filter data, used by InputFields\n        LastOwners => {                  # filter id\n            Name   => 'Last owners',     # name of the filter\n            Values => {                  # filtered data structure\n                Key1 => 'Value1',\n                Key2 => 'Value2',\n                Key3 => 'Value3',\n            },\n            Active => 1,                 # (optional) default 0 (0|1) make this filter immediately active\n        },\n        InvolvedAgents => {\n            Name   => 'Involved in this ticket',\n            Values => \\%HashWithData,\n        },\n    },\n    ExpandFilters  => 1,                 # (optional) default 0 (0|1) expand filters list by default\n\n    ValidateDateAfter  => '2016-01-01',  # (optional) validate that date is after supplied value\n    ValidateDateBefore => '2016-01-01',  # (optional) validate that date is before supplied value\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "BuildSelectionJSON" : {
               "my $JSON = $LayoutObject->BuildSelectionJSON(\n    [\n        {\n            Data          => $ArrayRef,      # use $HashRef, $ArrayRef or $ArrayHashRef (see below)\n            Name          => 'TheName',      # name of element\n            SelectedID    => [$SelectedID, 5, 3],      # (optional) use integer or arrayref (unable to use with ArrayHashRef)\n            SelectedValue => 'test',         # (optional) use string or arrayref (unable to use with ArrayHashRef)\n            Sort          => 'NumericValue', # (optional) (AlphanumericValue|NumericValue|AlphanumericKey|NumericKey|TreeView) unable to use with ArrayHashRef\n            SortReverse   => 0,              # (optional) reverse the list\n            Translation   => 1,              # (optional) default 1 (0|1) translate value\n            PossibleNone  => 0,              # (optional) default 0 (0|1) add a leading empty selection\n            Max => 100,                      # (optional) default 100 max size of the shown value\n        },\n        {\n            # ...\n        }\n    ]\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ComplexTablePreferencesGet" : {
               "my %Preferences = $LayoutObject->ComplexTablePreferencesGet(\n    Config  => {\n        'DefaultColumns' => {\n            'Age' => 1,\n            'EscalationTime' => 1,\n            ...\n        },\n        Priority => {\n            'Age' => 120,\n            'TicketNumber' => 100,\n            ...\n        }\n    }.\n    PrefKey => \"LinkObject::ComplexTable-Ticket\",\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ComplexTablePreferencesSet" : {
               "my $Success = $LayoutObject->ComplexTablePreferencesSet(\n    DestinationObject => 'Ticket',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserAddressBookListShow" : {
               "my $Output = $LayoutObject->CustomerUserAddressBookListShow(\n    CustomerUserIDs => $CustomerUserIDsRef,                      # total list of customer user ids, that can be listed\n    Total           => scalar @{ $CustomerUserIDsRef },          # total number of customer user ids\n    View            => $Self->{View},                            # optional, the default value is 'AddressBook'\n    Filter          => 'All',\n    Filters         => \\%NavBarFilter,\n    LinkFilter      => $LinkFilter,\n    TitleName       => 'Overview: CustomerUsers',\n    TitleValue      => $Self->{Filter},\n    Env             => $Self,\n    LinkPage        => $LinkPage,\n    LinkSort        => $LinkSort,\n    Frontend        => 'Agent',                                  # optional (Agent|Customer), default: Agent, indicates from which frontend this function was called\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DatepickerGetVacationDays" : {
               "$LayoutObject->DatepickerGetVacationDays();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HTMLLinkQuote" : {
               "my $HTMLWithLinks = $LayoutObject->HTMLLinkQuote(\n    String => $HTMLString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $HTMLWithLinksRef = $LayoutObject->HTMLLinkQuote(\n    String => \\$HTMLString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Header" : {
               "my $Output = $LayoutObject->Header(\n    Type              => 'Small',                # (optional) '' (Default, full header) or 'Small' (blank header)\n    ShowToolbarItems  => 0,                      # (optional) default 1 (0|1)\n    ShowPrefLink      => 0,                      # (optional) default 1 (0|1)\n    ShowLogoutButton  => 0,                      # (optional) default 1 (0|1)\n\n    DisableIFrameOriginRestricted => 1,          # (optional, default 0) - suppress X-Frame-Options header.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HumanReadableDataSize" : {
               "my $SizeStr = $LayoutObject->HumanReadableDataSize(\n    Size => 123,  # size in bytes\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "JSONEncode" : {
               "my $JSON = $LayoutObject->JSONEncode(\n    Data        => $Data,\n    NoQuotes    => 0|1, # optional: no double quotes at the start and the end of JSON string\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkEncode" : {
               "my $ParamValueEncoded = $LayoutObject->LinkEncode($ParamValue);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkObjectSearchOptionList" : {
               "my @SearchOptionList = $LayoutObject->LinkObjectSearchOptionList(\n    Object    => 'Ticket',\n    SubObject => 'Bla',     # (optional)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkObjectSelectableObjectList" : {
               "my $String = $LayoutObject->LinkObjectSelectableObjectList(\n    Object   => 'Ticket',\n    Selected => $Identifier,  # (optional)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkObjectTableCreate" : {
               "my $String = $LayoutObject->LinkObjectTableCreate(\n    LinkListWithData => $LinkListWithDataRef,\n    ViewMode         => 'Simple', # (Simple|SimpleRaw|Complex|ComplexAdd|ComplexDelete|ComplexRaw)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkObjectTableCreateComplex" : {
               "my $String = $LayoutObject->LinkObjectTableCreateComplex(\n    LinkListWithData => $LinkListRef,\n    ViewMode         => 'Complex', # (Complex|ComplexAdd|ComplexDelete|ComplexRaw)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkObjectTableCreateSimple" : {
               "my $String = $LayoutObject->LinkObjectTableCreateSimple(\n    LinkListWithData => $LinkListWithDataRef,\n    ViewMode         => 'SimpleRaw',            # (optional) (Simple|SimpleRaw)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkQuote" : {
               "my $HTMLWithLinks = $LayoutObject->LinkQuote(\n    Text => $HTMLWithOutLinks,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $HTMLWithLinksRef = $LayoutObject->LinkQuote(\n    Text => \\$HTMLWithOutLinksRef,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LoaderCreateAgentCSSCalls" : {
               "$LayoutObject->LoaderCreateAgentCSSCalls(\n    Skin => 'MySkin', # optional, if not provided skin is the configured by default\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LoaderCreateAgentJSCalls" : {
               "$LayoutObject->LoaderCreateAgentJSCalls();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LoaderCreateCustomerCSSCalls" : {
               "$LayoutObject->LoaderCreateCustomerCSSCalls();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LoaderCreateCustomerJSCalls" : {
               "$LayoutObject->LoaderCreateCustomerJSCalls();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LoaderCreateJavaScriptTemplateData" : {
               "$LayoutObject->LoaderCreateJavaScriptTemplateData();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LoaderCreateJavaScriptTranslationData" : {
               "$LayoutObject->LoaderCreateJavaScriptTranslationData();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Notify" : {
               "my $Output = $LayoutObject->Notify(\n    Priority  => 'Warning',\n    Data      => 'Template content',\n    Link      => 'http://example.com/',\n    LinkClass => 'some_CSS_class',              # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Output = $LayoutObject->Notify(\n    Priority => 'Error',\n    Info => 'Some Error Message',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Output = $LayoutObject->Notify(\n    Priority => 'Error',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Output = $LayoutObject->Notify(\n    Priority => 'Warning',\n    Info => 'Some Info Message',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotifyNonUpdatedTickets" : {
               "my $Output = $LayoutObject->NotifyNonUpdatedTickets();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Output" : {
               "my $HTML = $LayoutObject->Output(\n    Template => '<b>[% Data.SomeKey | html %]</b>',\n    Data     => \\%Param,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $HTML = $LayoutObject->Output(\n    TemplateFile   => 'AdminLog.tt',\n    Data           => \\%Param,\n    AJAX           => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $HTML = $LayoutObject->Output(\n    TemplateFile => 'AdminLog.tt',\n    Data         => \\%Param,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PageNavBar" : {
               "my %PageNavBar = $LayoutObject->PageNavBar(\n    Limit       => 100,         # marks result of TotalHits red if Limit is gerater then AllHits\n    WindowSize  => 15,          # max shown pages to click\n    StartHit    => 1,           # start to show items\n    PageShown   => 15,          # number of shown items a page\n    AllHits     => 56,          # number of total hits\n    Action      => 'AgentXXX',  # e. g. 'Action=' . $Self->{LayoutObject}->{Action}\n    Link        => $Link,       # e. g. 'Subaction=View;'\n    AJAXReplace => 'IDElement', # IDElement which should be replaced\n    IDPrefix    => 'Tickets',   # Prefix for the id parameter\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Permission" : {
               "my $Access = $LayoutObject->Permission(\n    Action => 'AdminCustomerUser',\n    Type   => 'rw', # ro|rw possible\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PopupClose" : {
               "# load specific URL in main window\n$LayoutObject->PopupClose(\n    URL => \"Action=AgentTicketZoom;TicketID=$TicketID\"\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "# reload main window\n$LayoutObject->PopupClose(\n    Reload => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Redirect" : {
               "my $HTML = $LayoutObject->Redirect(\n    ExtURL => \"http://some.example.com/\",\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $HTML = $LayoutObject->Redirect(\n    OP => \"Action=AdminUserGroup;Subaction=User;ID=$UserID\",\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RichText2Ascii" : {
               "my $TextString = $LayoutObject->RichText2Ascii(\n    String => $HTMLString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RichTextDocumentComplete" : {
               "$HTMLBody = $LayoutObject->RichTextDocumentComplete(\n    String => $HTMLBody,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RichTextDocumentServe" : {
               "my %HTMLFile = $LayoutObject->RichTextDocumentServe(\n    Data => {\n        Content     => $HTMLBodyRef,\n        ContentType => 'text/html; charset=\"iso-8859-1\"',\n    },\n    URL               => 'AgentTicketAttachment;Subaction=HTMLView;TicketID=123;ArticleID=123;FileID=',\n    Attachments       => \\%AttachmentListOfInlineAttachments,\n\n    LoadInlineContent => 0,     # Serve the document including all inline content. WARNING: This might be dangerous.\n\n    LoadExternalImages => 0,    # Load external images? If this is 0, a message will be included if\n                                # external images were found and removed.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SkinValidate" : {
               "my $SkinIsValid = $LayoutObject->SkinValidate(\n    UserType => 'Agent'     #  Agent or Customer,\n    Skin => 'ExampleSkin',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TimeUnits" : {
               "my $TimeUnitsBlock = $LayoutObject->TimeUnits(\n    ID                => 'TimeUnits',       # (optional) the HTML ID for this element, if not provided, the name will be used as ID as well\n    Name              => 'TimeUnits',       # name of element\n    TimeUnits         => '123',\n    TimeUnitsRequired => '1',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "UserInitialsGet" : {
               "my $UserInitials = $LayoutObject->UserInitialsGet(\n    Fullname => 'John Doe',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $LayoutObject = $Kernel::OM->Get('Kernel::Output::HTML::Layout');",
         "Package" : "Kernel::Output::HTML::Layout"
      },
      "LinkObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "LinkAdd" : {
               "$True = $LinkObject->LinkAdd(\n    SourceObject => 'Ticket',\n    SourceKey    => '321',\n    TargetObject => 'FAQ',\n    TargetKey    => '5',\n    Type         => 'ParentChild',\n    State        => 'Valid',\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkCleanup" : {
               "$True = $LinkObject->LinkCleanup(\n    State  => 'Temporary',\n    Age    => ( 60 * 60 * 24 ),\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkDelete" : {
               "$True = $LinkObject->LinkDelete(\n    Object1 => 'Ticket',\n    Key1    => '321',\n    Object2 => 'FAQ',\n    Key2    => '5',\n    Type    => 'Normal',\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkDeleteAll" : {
               "$True = $LinkObject->LinkDeleteAll(\n    Object => 'Ticket',\n    Key    => '321',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkKeyList" : {
               "my %LinkKeyList = $LinkObject->LinkKeyList(\n    Object1   => 'Ticket',\n    Key1      => '321',\n    Object2   => 'FAQ',\n    State     => 'Valid',\n    Type      => 'ParentChild', # (optional)\n    Direction => 'Target',      # (optional) default Both (Source|Target|Both)\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkKeyListWithData" : {
               "my %LinkKeyList = $LinkObject->LinkKeyListWithData(\n    Object1   => 'Ticket',\n    Key1      => '321',\n    Object2   => 'FAQ',\n    State     => 'Valid',\n    Type      => 'ParentChild', # (optional)\n    Direction => 'Target',      # (optional) default Both (Source|Target|Both)\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkList" : {
               "my $LinkList = $LinkObject->LinkList(\n    Object    => 'Ticket',\n    Key       => '321',\n    Object2   => 'FAQ',         # (optional)\n    State     => 'Valid',\n    Type      => 'ParentChild', # (optional)\n    Direction => 'Target',      # (optional) default Both (Source|Target|Both)\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LinkListWithData" : {
               "my $LinkList = $LinkObject->LinkListWithData(\n    Object                          => 'Ticket',\n    Key                             => '321',\n    Object2                         => 'FAQ',         # (optional)\n    State                           => 'Valid',\n    Type                            => 'ParentChild', # (optional)\n    Direction                       => 'Target',      # (optional) default Both (Source|Target|Both)\n    UserID                          => $UserID,\n    ObjectParameters                => {              # (optional) backend specific flags\n        Ticket => {\n            IgnoreLinkedTicketStateTypes => 0|1,\n        },\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectDescriptionGet" : {
               "%Description = $LinkObject->ObjectDescriptionGet(\n    Object  => 'Ticket',\n    Key     => 123,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectLookup" : {
               "$Name = $LinkObject->ObjectLookup(\n    ObjectID => $ObjectID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$ObjectID = $LinkObject->ObjectLookup(\n    Name => 'Ticket',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectPermission" : {
               "$Permission = $LinkObject->ObjectPermission(\n    Object  => 'Ticket',\n    Key     => 123,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectSearch" : {
               "$ObjectList = $LinkObject->ObjectSearch(\n    Object       => 'ITSMConfigItem',\n    SubObject    => 'Computer'         # (optional)\n    SearchParams => $HashRef,          # (optional)\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PossibleLinkList" : {
               "my %PossibleLinkList = $LinkObject->PossibleLinkList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PossibleObjectsList" : {
               "my %PossibleObjectsList = $LinkObject->PossibleObjectsList(\n    Object => 'Ticket',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PossibleType" : {
               "my $True = $LinkObject->PossibleType(\n    Type1 => 'Normal',\n    Type2 => 'ParentChild',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PossibleTypesList" : {
               "my %PossibleTypesList = $LinkObject->PossibleTypesList(\n    Object1 => 'Ticket',\n    Object2 => 'FAQ',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateList" : {
               "my %StateList = $LinkObject->StateList(\n    Valid => 0,   # (optional) default 1 (0|1)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateLookup" : {
               "$Name = $LinkObject->StateLookup(\n    StateID => $StateID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$StateID = $LinkObject->StateLookup(\n    Name => 'Valid',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeGet" : {
               "%TypeData = $LinkObject->TypeGet(\n    TypeID => $TypeID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeGroupList" : {
               "my %TypeGroupList = $LinkObject->TypeGroupList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeList" : {
               "my %TypeList = $LinkObject->TypeList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeLookup" : {
               "$Name = $LinkObject->TypeLookup(\n    TypeID => $TypeID,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$TypeID = $LinkObject->TypeLookup(\n    Name   => 'Normal',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $LinkObject = $Kernel::OM->Get('Kernel::System::LinkObject');",
         "Package" : "Kernel::System::LinkObject"
      },
      "LoaderObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CacheDelete" : {
               "my @DeletedFiles = $LoaderObject->CacheDelete();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CacheGenerate" : {
               "my %GeneratedFiles = $LoaderObject->CacheGenerate();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetMinifiedFile" : {
               "my $MinifiedCSS = $LoaderObject->GetMinifiedFile(\n    Location => $Filename,\n    Type     => 'CSS',      # CSS | JavaScript\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "IsCSSMinifierXSAvailable" : {
               "my $IsCSSMinifierXSAvailable = $LoaderObject->IsCSSMinifierXSAvailable();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsJavaScriptMinifierXSAvailable" : {
               "my $IsJavaScriptMinifierXSAvailable = $LoaderObject->IsJavaScriptMinifierXSAvailable();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MinifyCSS" : {
               "my $MinifiedCSS = $LoaderObject->MinifyCSS( Code => $CSS );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MinifyFiles" : {
               "my $TargetFilename = $LoaderObject->MinifyFiles(\n    List  => [                          # optional,  minify list of files\n        $Filename,\n        $Filename2,\n    ],\n    Checksum             => '...'       # optional, pass a checksum for the minified file\n    Content              => '...'       # optional, pass direct (already minified) content instead of a file list\n    Type                 => 'CSS',      # CSS | JavaScript\n    TargetDirectory      => $TargetDirectory,\n    TargetFilenamePrefix => 'CommonCSS',    # optional, prefix for the target filename\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MinifyJavaScript" : {
               "my $MinifiedJS = $LoaderObject->MinifyJavaScript( Code => $JavaScript );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $LoaderObject = $Kernel::OM->Get('Kernel::System::Loader');",
         "Package" : "Kernel::System::Loader"
      },
      "LockObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "LockList" : {
               "my %List = $LockObject->LockList(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LockLookup" : {
               "my $Lock = $LockObject->LockLookup( LockID => $LockID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $LockID = $LockObject->LockLookup( Lock => 'lock' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LockViewableLock" : {
               "my @List = $LockObject->LockViewableLock(\n    Type => 'Name', # ID|Name\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @ListID = $LockObject->LockViewableLock(\n    Type => 'ID', # ID|Name\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $LockObject = $Kernel::OM->Get('Kernel::System::Lock');",
         "Package" : "Kernel::System::Lock"
      },
      "LogObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CleanUp" : {
               "$LogObject->CleanUp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Dumper" : {
               "$LogObject->Dumper(%Hash);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$LogObject->Dumper(@Array);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetLog" : {
               "my $CSVLog = $LogObject->GetLog();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetLogEntry" : {
               "my $Message = $LogObject->GetLogEntry(\n    Type => 'error', # error|info|notice\n    What => 'Message', # Message|Traceback\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $LogObject = $Kernel::OM->Get('Kernel::System::Log');",
         "Package" : "Kernel::System::Log"
      },
      "MailAccountObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GetAuthenticationTypes" : {
               "my %AuthenticationTypes = $MailAccountObject->GetAuthenticationTypes();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountAdd" : {
               "$MailAccountObject->MailAccountAdd(\n    Login         => 'mail',\n    Password      => 'SomePassword',\n    Host          => 'pop3.example.com',\n    Type          => 'POP3',\n    IMAPFolder    => 'Some Folder', # optional, only valid for IMAP-type accounts\n    ValidID       => $ValidID,\n    Trusted       => 0,\n    DispatchingBy => 'Queue', # Queue|From\n    QueueID       => $QueueID,\n    UserID        => $UserID,\n);" : [
                  "6.0"
               ],
               "my $MailAccountID = $MailAccountObject->MailAccountAdd(\n    Login               => 'mail',\n    Password            => 'SomePassword',\n    Host                => 'pop3.example.com',\n    Type                => 'POP3',\n    IMAPFolder          => 'Some Folder',       # optional, only valid for IMAP-type accounts\n    ValidID             => $ValidID,\n    Trusted             => 0,\n    AuthenticationType  => 'oauth2_token',      # optional; defaults to 'password'\n    OAuth2TokenConfigID => $OAuth2TokenConfigID,                   # optional\n    DispatchingBy       => 'Queue',             # Queue|From\n    QueueID             => $QueueID,\n    UserID              => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountBackendList" : {
               "my %List = $MailAccountObject->MailAccountBackendList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountCheck" : {
               "my %Check = $MailAccountObject->MailAccountCheck(\n    Login         => 'mail',\n    Password      => 'SomePassword',\n    Host          => 'pop3.example.com',\n    Type          => 'POP3', # POP3|POP3S|IMAP|IMAPS\n    Timeout       => '60',\n    Debug         => '0',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountDelete" : {
               "$MailAccountObject->MailAccountDelete(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountFetch" : {
               "my $Ok = $MailAccountObject->MailAccountFetch(\n    Login         => 'mail',\n    Password      => 'SomePassword',\n    Host          => 'pop3.example.com',\n    Type          => 'POP3', # POP3,POP3s,IMAP,IMAPS\n    Trusted       => 0,\n    DispatchingBy => 'Queue', # Queue|From\n    QueueID       => $QueueID,\n    UserID        => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountGet" : {
               "my %MailAccount = $MailAccountObject->MailAccountGet(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountGetAll" : {
               "my @MailAccounts = $MailAccountObject->MailAccountGetAll();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountList" : {
               "my %List = $MailAccountObject->MailAccountList(\n    Valid => 0, # just valid/all accounts\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MailAccountUpdate" : {
               "$MailAccountObject->MailAccountUpdate(\n    ID            => 1,\n    Login         => 'mail',\n    Password      => 'SomePassword',\n    Host          => 'pop3.example.com',\n    Type          => 'POP3',\n    IMAPFolder    => 'Some Folder', # optional, only valid for IMAP-type accounts\n    ValidID       => $ValidID,\n    Trusted       => 0,\n    DispatchingBy => 'Queue', # Queue|From\n    QueueID       => $QueueID,\n    UserID        => $UserID,\n);" : [
                  "6.0"
               ],
               "my $Success = $MailAccountObject->MailAccountUpdate(\n    ID                  => 1,\n    Login               => 'mail',\n    Password            => 'SomePassword',\n    Host                => 'pop3.example.com',\n    Type                => 'POP3',\n    IMAPFolder          => 'Some Folder', # optional, only valid for IMAP-type accounts\n    ValidID             => $ValidID,\n    Trusted             => 0,\n    AuthenticationType  => 'oauth2_token', # optional; defaults to 'password'\n    OAuth2TokenConfigID => $OAuth2TokenConfigID, # optional\n    DispatchingBy       => 'Queue', # Queue|From\n    QueueID             => $QueueID,\n    UserID              => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $MailAccountObject = $Kernel::OM->Get('Kernel::System::MailAccount');",
         "Package" : "Kernel::System::MailAccount"
      },
      "MailQueueObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Create" : {
               "my $Result = $MailQueueObject->Create(\n    ArticleID       => $ArticleID, # optional\n    MessageID       => $MessageID, # optional (in case article id was passed this should be also)\n    Sender          => '...',\n    Recipient       => '...' || [],\n    Message         => '...',\n    Attempts        => '...', # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Delete" : {
               "my $Result = $MailQueueObject->Delete(\n    %Filters,                       # See _FiltersSQLAndBinds\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Get" : {
               "my $Item = $MailQueueObject->Get(\n    ID              => '...' # optional\n    ArticleID       => $ArticleID # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "List" : {
               "my $List = $MailQueueObject->List(\n    ID              => '...' # optional\n    ArticleID       => $ArticleID # optional\n    Sender          => '...' # optional\n    Recipient       => '...' # optional\n    Attempts        => '...' # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Send" : {
               "my $List = $MailQueueObject->Send(\n    ID              => '...',\n    Sender          => '...',\n    Recipient       => '...',\n    Message         => '...',\n    Force           => '...' # optional, to force the sending even if isn't time\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Update" : {
               "my $Result = $MailQueueObject->Update(\n    Filters => {},\n    Data    => {},\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $MailQueueObject = $Kernel::OM->Get('Kernel::System::MailQueue');",
         "Package" : "Kernel::System::MailQueue"
      },
      "MainObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Die" : {
               "$MainObject->Die('some message to die');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DirectoryRead" : {
               "my @FilesInDirectory = $MainObject->DirectoryRead(\n    Directory => $Path,\n    Filter    => '*',\n    Recursive => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @FilesInDirectory = $MainObject->DirectoryRead(\n    Directory => $Path,\n    Filter    => '*',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @FilesInDirectory = $MainObject->DirectoryRead(\n    Directory => '/special/optional/directory/',\n    Filter    => '*',\n    Silent    => 1,     # will not log errors if the directory does not exist\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @FilesInDirectory = $MainObject->DirectoryRead(\n    Directory => '/tmp',\n    Filter    => 'Filenam*',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @FilesInDirectory = $MainObject->DirectoryRead(\n    Directory => '/tmp',\n    Filter    => \\@MyFilters,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Dump" : {
               "my $Dump = $MainObject->Dump(\n    $SomeVariable,\n    'ascii', # ascii|binary - default is binary\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Dump = $MainObject->Dump(\n    $SomeVariable,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Dump = $MainObject->Dump(\n    {\n        Key1 => $SomeVariable,\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FileDelete" : {
               "my $Success = $MainObject->FileDelete(\n    Directory       => 'c:\\some\\location',\n    Filename        => 'me_to/alal.xml',\n    # or Location\n    Location        => 'c:\\some\\location\\me_to\\alal.xml'\n\n    Type            => 'Local',   # optional - Local|Attachment|MD5\n    DisableWarnings => 1, # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FileGetMTime" : {
               "my $FileMTime = $MainObject->FileGetMTime(\n    Directory => 'c:\\some\\location',\n    Filename  => 'me_to/alal.xml',\n    # or Location\n    Location  => 'c:\\some\\location\\me_to\\alal.xml'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FileRead" : {
               "my $ContentARRAYRef = $MainObject->FileRead(\n    Directory => 'c:\\some\\location',\n    Filename  => 'file2read.txt',\n    # or Location\n    Location  => 'c:\\some\\location\\file2read.txt',\n\n    Result    => 'ARRAY', # optional - SCALAR|ARRAY\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $ContentSCALARRef = $MainObject->FileRead(\n    Directory       => 'c:\\some\\location',\n    Filename        => 'file2read.txt',\n    # or Location\n    Location        => 'c:\\some\\location\\file2read.txt',\n\n    Mode            => 'binmode', # optional - binmode|utf8\n    Type            => 'Local',   # optional - Local|Attachment|MD5\n    Result          => 'SCALAR',  # optional - SCALAR|ARRAY\n    DisableWarnings => 1,         # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $ContentSCALARRef = $MainObject->FileRead(\n    Directory => 'c:\\some\\location',\n    Filename  => 'file2read.txt',\n    # or Location\n    Location  => 'c:\\some\\location\\file2read.txt',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FileWrite" : {
               "my $FileLocation = $MainObject->FileWrite(\n    Directory  => 'c:\\some\\location',\n    Filename   => 'file2write.txt',\n    # or Location\n    Location   => 'c:\\some\\location\\file2write.txt',\n\n    Content    => \\$Content,\n    Mode       => 'binmode', # binmode|utf8\n    Type       => 'Local',   # optional - Local|Attachment|MD5\n    Permission => '644',     # optional - unix file permissions\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $FileLocation = $MainObject->FileWrite(\n    Directory => 'c:\\some\\location',\n    Filename  => 'file2write.txt',\n    # or Location\n    Location  => 'c:\\some\\location\\file2write.txt',\n\n    Content   => \\$Content,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FilenameCleanUp" : {
               "my $Filename = $MainObject->FilenameCleanUp(\n    Filename => 'me_to/alal.xml',\n    Type     => 'Local', # Local|Attachment|MD5\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Filename = $MainObject->FilenameCleanUp(\n    Filename => 'some:file.xml',\n    Type     => 'MD5', # Local|Attachment|MD5\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenerateRandomString" : {
               "my $String = $MainObject->GenerateRandomString(\n    Length     => 32,\n    Dictionary => [ 0..9, 'a'..'f' ], # hexadecimal\n    );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $String = $MainObject->GenerateRandomString(\n    Length => 32,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $String = $MainObject->GenerateRandomString();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MD5sum" : {
               "# note: needs more memory!\nmy $MD5Sum = $MainObject->MD5sum(\n    String => $SomeString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $MD5Sum = $MainObject->MD5sum(\n    Filename => '/path/to/me_to_alal.xml',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $MD5Sum = $MainObject->MD5sum(\n    String => \\$SomeString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Require" : {
               "my $Loaded = $MainObject->Require(\n    'Kernel::System::Example',\n    Silent => 1,                # optional, no log entry if module was not found\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RequireBaseClass" : {
               "my $Loaded = $MainObject->RequireBaseClass(\n    'Kernel::System::Example',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $MainObject = $Kernel::OM->Get('Kernel::System::Main');",
         "Package" : "Kernel::System::Main"
      },
      "MentionObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AddMention" : {
               "my $Success = $MentionObject->AddMention(\n    TicketID        => $TicketID,\n    ArticleID       => $ArticleID,\n    MentionedUserID => $MentionedUserID,\n    UserID          => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CanUserRemoveMention" : {
               "my $UserCanRemoveMention = $MentionObject->CanUserRemoveMention(\n    TicketID        => $TicketID,\n    MentionedUserID => $MentionedUserID,\n    UserID          => $UserID, # user who wants to remove the mention\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetDashboardWidgetTicketData" : {
               "my $Data = $MentionObject->GetDashboardWidgetTicketData(\n    UserID => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetMentionedUserIDsFromString" : {
               "my $MentionedUserIDs = $MentionObject->GetMentionedUserIDsFromString(\n    HTMLString => '...<a class=\"Mention\" href=\"...\" target=\"...\">@root@localhost<\\/a>...',\n\n    # optional\n    # plain text string must be given if mentions in quoted text should be ignored.\n    # they are not reliably parsable from the HTML string.\n    PlainTextString => '...@root@localhost...',\n\n    # optional\n    # Limit for number of returned user IDs. The rest will silently be ignored.\n    Limit => 5,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetTicketMentions" : {
               "my $Mentions = $MentionObject->GetTicketMentions(\n    TicketID  => $TicketID,\n    OrderBy   => 'create_time', # optional; default\n    SortOrder => 'ASC', # or 'DESC', optional; default\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetUserMentions" : {
               "my $Mentions = $MentionObject->GetUserMentions(\n    UserID     => $UserID,\n\n    # optional, defaults to 0 and then means that all mentions of all articles per ticket are\n    # counted as one combined mention;\n    # if set to 1, all mentions of every article count separately\n    PerArticle => 0,\n\n    OrderBy    => 'create_time', # optional; default\n    SortOrder  => 'ASC', # or 'DESC', optional; default\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsGroupBlocked" : {
               "my $GroupIsBlocked = $MentionObject->IsGroupBlocked(\n    Group => 'users',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "RemoveMention" : {
               "my $Success = $MentionObject->RemoveMention(\n    TicketID        => $TicketID,\n    MentionedUserID => $MentionedUserID,\n    UserID          => $UserID, # user who wants to remove the mention\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $MentionObject = $Kernel::OM->Get('Kernel::System::Mention');",
         "Package" : "Kernel::System::Mention"
      },
      "NotificationEventObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "NotificationAdd" : {
               "my $ID = $NotificationEventObject->NotificationAdd(\n    Name => 'Agent::OwnerUpdate',\n    Data => {\n        Events => [ 'TicketQueueUpdate' ],\n        ...\n        Queue => [ 'SomeQueue' ],\n    },\n    Message => {\n        en => {\n            Subject     => 'Hello',\n            Body        => 'Hello World',\n            ContentType => 'text/plain',\n        },\n        de => {\n            Subject     => 'Hallo',\n            Body        => 'Hallo Welt',\n            ContentType => 'text/plain',\n        },\n    },\n    Comment => 'An optional comment', # (optional)\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotificationBodyCheck" : {
               "my $Ok = $NotificationEventObject->NotificationBodyCheck(\n    Content => $BodyContent, # mandatory\n    UserID  => $UserID,            # mandatory\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotificationDelete" : {
               "$NotificationEventObject->NotificationDelete(\n    ID     => 1,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotificationEventCheck" : {
               "my @IDs = $NotificationEventObject->NotificationEventCheck(\n    Event => 'ArticleCreate',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotificationGet" : {
               "my %Notification = $NotificationEventObject->NotificationGet(\n    ID => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Notification = $NotificationEventObject->NotificationGet(\n    Name => 'NotificationName',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotificationImport" : {
               "my $NotificationImport = $NotificationEventObject->NotificationImport(\n    Content                   => $YAMLContent, # mandatory, YAML format\n    OverwriteExistingNotifications => 0,            # 0 || 1\n    UserID                    => $UserID,            # mandatory\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotificationList" : {
               "my %List = $NotificationEventObject->NotificationList(\n    Type    => 'Ticket', # type of notifications; default: 'Ticket'\n    Details => 1,        # include notification detailed data. possible (0|1) # ; default: 0\n    All     => 1,        # optional: if given all notification types will be returned, even if type is given (possible: 0|1)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotificationUpdate" : {
               "my $Ok = $NotificationEventObject->NotificationUpdate(\n    ID      => 123,\n    Name    => 'Agent::OwnerUpdate',\n    Data => {\n        Events => [ 'TicketQueueUpdate' ],\n        ...\n        Queue => [ 'SomeQueue' ],\n    },\n    Message => {\n        en => {\n            Subject     => 'Hello',\n            Body        => 'Hello World',\n            ContentType => 'text/plain',\n        },\n        de => {\n            Subject     => 'Hallo',\n            Body        => 'Hallo Welt',\n            ContentType => 'text/plain',\n        },\n    },\n    Comment => 'An optional comment',  # (optional)\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $NotificationEventObject = $Kernel::OM->Get('Kernel::System::NotificationEvent');",
         "Package" : "Kernel::System::NotificationEvent"
      },
      "OAuth2TokenConfigObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "DataAdd" : {
               "my $Success = $OAuth2TokenConfigObject->DataAdd(\n    ID         => '...',\n    Name       => '...',\n    Config     => '...',\n    ValidID    => $ValidID,\n    CreateTime => '...',\n    CreateBy   => '...',\n    ChangeTime => '...',\n    ChangeBy   => '...',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataDelete" : {
               "my $Success = $OAuth2TokenConfigObject->DataDelete(\n    ID         => '...', # optional\n    Name       => '...', # optional\n    Config     => '...', # optional\n    ValidID    => $ValidID, # optional\n    CreateTime => '...', # optional\n    CreateBy   => '...', # optional\n    ChangeTime => '...', # optional\n    ChangeBy   => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataGet" : {
               "my %Data = $OAuth2TokenConfigObject->DataGet(\n    ID         => '...', # optional\n    Name       => '...', # optional\n    Config     => '...', # optional\n    ValidID    => $ValidID, # optional\n    CreateTime => '...', # optional\n    CreateBy   => '...', # optional\n    ChangeTime => '...', # optional\n    ChangeBy   => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataListGet" : {
               "my @Data = $OAuth2TokenConfigObject->DataListGet(\n    ID         => '...', # optional\n    Name       => '...', # optional\n    Config     => '...', # optional\n    ValidID    => $ValidID, # optional\n    CreateTime => '...', # optional\n    CreateBy   => '...', # optional\n    ChangeTime => '...', # optional\n    ChangeBy   => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataSearch" : {
               "my %Data = $OAuth2TokenConfigObject->DataSearch(\n    Search     => 'test*test',\n    ID         => '...', # optional\n    Name       => '...', # optional\n    Config     => '...', # optional\n    ValidID    => $ValidID, # optional\n    CreateTime => '...', # optional\n    CreateBy   => '...', # optional\n    ChangeTime => '...', # optional\n    ChangeBy   => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataUpdate" : {
               "my $Success = $OAuth2TokenConfigObject->DataUpdate(\n    ID     => 1234,\n    UserID => $UserID,\n\n    # all other attributes are optional\n    Name       => '...',\n    Config     => '...',\n    ValidID    => $ValidID,\n    CreateTime => '...',\n    CreateBy   => '...',\n    ChangeTime => '...',\n    ChangeBy   => '...',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InitConfig" : {
               "my $Success = $OAuth2TokenConfigObject->InitConfig();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsOAuth2TokenConfigInUse" : {
               "my $IsInUse = $OAuth2TokenConfigObject->IsOAuth2TokenConfigInUse(\n    ID => 3,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "UsedOAuth2TokenConfigListGet" : {
               "my @UsedOAuth2TokenConfigListGet = $OAuth2TokenConfigObject->UsedOAuth2TokenConfigListGet(\n    Scope => 'MailAccount'      # optional, default 'undef', (MailAccount);\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $OAuth2TokenConfigObject = $Kernel::OM->Get('Kernel::System::OAuth2TokenConfig');",
         "Package" : "Kernel::System::OAuth2TokenConfig"
      },
      "OAuth2TokenObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AssembleSASLAuthString" : {
               "my $SASLAuthString = $OAuth2TokenObject->AssembleSASLAuthString(\n    Username    => 'user2',\n    OAuth2Token => 'the token',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataAdd" : {
               "my $Success = $OAuth2TokenObject->DataAdd(\n    ID                         => '...',\n    TokenConfigID              => $TokenConfigID,\n    AuthorizationCode          => '...',\n    Token                      => '...',\n    TokenExpirationDate        => '...',\n    RefreshToken               => '...',\n    RefreshTokenExpirationDate => '...',\n    ErrorMessage               => '...',\n    ErrorDescription           => '...',\n    ErrorCode                  => '...',\n    CreateTime                 => '...',\n    CreateBy                   => '...',\n    ChangeTime                 => '...',\n    ChangeBy                   => '...',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataDelete" : {
               "my $Success = $OAuth2TokenObject->DataDelete(\n    ID                         => '...', # optional\n    TokenConfigID              => $TokenConfigID, # optional\n    AuthorizationCode          => '...', # optional\n    Token                      => '...', # optional\n    TokenExpirationDate        => '...', # optional\n    RefreshToken               => '...', # optional\n    RefreshTokenExpirationDate => '...', # optional\n    ErrorMessage               => '...', # optional\n    ErrorDescription           => '...', # optional\n    ErrorCode                  => '...', # optional\n    CreateTime                 => '...', # optional\n    CreateBy                   => '...', # optional\n    ChangeTime                 => '...', # optional\n    ChangeBy                   => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataGet" : {
               "my %Data = $OAuth2TokenObject->DataGet(\n    ID                         => '...', # optional\n    TokenConfigID              => $TokenConfigID, # optional\n    AuthorizationCode          => '...', # optional\n    Token                      => '...', # optional\n    TokenExpirationDate        => '...', # optional\n    RefreshToken               => '...', # optional\n    RefreshTokenExpirationDate => '...', # optional\n    ErrorMessage               => '...', # optional\n    ErrorDescription           => '...', # optional\n    ErrorCode                  => '...', # optional\n    CreateTime                 => '...', # optional\n    CreateBy                   => '...', # optional\n    ChangeTime                 => '...', # optional\n    ChangeBy                   => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataListGet" : {
               "my @Data = $OAuth2TokenObject->DataListGet(\n    ID                         => '...', # optional\n    TokenConfigID              => $TokenConfigID, # optional\n    AuthorizationCode          => '...', # optional\n    Token                      => '...', # optional\n    TokenExpirationDate        => '...', # optional\n    RefreshToken               => '...', # optional\n    RefreshTokenExpirationDate => '...', # optional\n    ErrorMessage               => '...', # optional\n    ErrorDescription           => '...', # optional\n    ErrorCode                  => '...', # optional\n    CreateTime                 => '...', # optional\n    CreateBy                   => '...', # optional\n    ChangeTime                 => '...', # optional\n    ChangeBy                   => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataSearch" : {
               "my %Data = $OAuth2TokenObject->DataSearch(\n    Search                     => 'test*test',\n    ID                         => '...', # optional\n    TokenConfigID              => $TokenConfigID, # optional\n    AuthorizationCode          => '...', # optional\n    Token                      => '...', # optional\n    TokenExpirationDate        => '...', # optional\n    RefreshToken               => '...', # optional\n    RefreshTokenExpirationDate => '...', # optional\n    ErrorMessage               => '...', # optional\n    ErrorDescription           => '...', # optional\n    ErrorCode                  => '...', # optional\n    CreateTime                 => '...', # optional\n    CreateBy                   => '...', # optional\n    ChangeTime                 => '...', # optional\n    ChangeBy                   => '...', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataUpdate" : {
               "my $Success = $OAuth2TokenObject->DataUpdate(\n    ID                         => 1234,\n    UserID                     => $UserID,\n\n    # all other attributes are optional\n    TokenConfigID              => $TokenConfigID,\n    AuthorizationCode          => '...',\n    Token                      => '...',\n    TokenExpirationDate        => '...',\n    RefreshToken               => '...',\n    RefreshTokenExpirationDate => '...',\n    ErrorMessage               => '...',\n    ErrorDescription           => '...',\n    ErrorCode                  => '...',\n    CreateTime                 => '...',\n    CreateBy                   => '...',\n    ChangeTime                 => '...',\n    ChangeBy                   => '...',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GenerateAuthorizationCodeRequestURL" : {
               "my $URL = $OAuth2TokenObject->GenerateAuthorizationCodeRequestURL(\n    TokenConfigID => $TokenConfigID,\n    UserID        => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetAuthorizationCodeParameters" : {
               "my %AuthorizationCodeParameters = $OAuth2TokenObject->GetAuthorizationCodeParameters(\n    ParamObject => $ParamObject,\n    UserID      => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetAuthorizationCodeRequestRedirectURL" : {
               "my $RedirectURL = $OAuth2TokenObject->GetAuthorizationCodeRequestRedirectURL();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetToken" : {
               "my $Token = $OAuth2TokenObject->GetToken(\n    TokenConfigID => $TokenConfigID,\n    UserID        => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetTokenErrorMessage" : {
               "my $TokenErrorMessage = $OAuth2TokenObject->GetTokenErrorMessage(\n    TokenConfigID => $TokenConfigID,\n    UserID        => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "HasRefreshTokenExpired" : {
               "my $HasExpired = $OAuth2TokenObject->HasRefreshTokenExpired(\n    TokenConfigID => $TokenConfigID,\n    UserID        => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "HasTokenExpired" : {
               "my $HasExpired = $OAuth2TokenObject->HasTokenExpired(\n    TokenConfigID => $TokenConfigID,\n    UserID        => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InitConfig" : {
               "my $Success = $OAuth2TokenObject->InitConfig();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "RequestTokenByAuthorizationCode" : {
               "my %Token = $OAuth2TokenObject->RequestTokenByAuthorizationCode(\n    TokenConfigID     => $TokenConfigID,\n    AuthorizationCode => '...',\n    UserID            => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "RequestTokenByRefreshToken" : {
               "my %Token = $OAuth2TokenObject->RequestTokenByRefreshToken(\n    TokenConfigID => $TokenConfigID,\n    UserID        => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $OAuth2TokenObject = $Kernel::OM->Get('Kernel::System::OAuth2Token');",
         "Package" : "Kernel::System::OAuth2Token"
      },
      "OperationObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "HandleError" : {
               "my $Result = $OperationObject->HandleError(\n    Data => {                               # data payload\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Run" : {
               "my $Result = $OperationObject->Run(\n    Data => {                               # data payload before Operation\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $OperationObject = Kernel::GenericInterface::Operation",
         "Package" : "Kernel::GenericInterface::Operation"
      },
      "PDFObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "DimGet" : {
               "$Dim = $PDFObject->DimGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DimSet" : {
               "$Dim = $PDFObject->DimSet(\n    Dim => 'printable',  # (optional) default content (content|printable)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DocumentNew" : {
               "$True = $PDFObject->DocumentNew(\n    Title     => 'The Document Title',  # Title of PDF Document\n    Encode    => 'utf-8',               # Charset of Document\n    Testfonts => 1,                     # (optional) default 0\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DocumentOutput" : {
               "$DocumentString = $PDFObject->DocumentOutput();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HLine" : {
               "$True = $PDFObject->HLine(\n    Width     => 300,           # (optional) default 'end of printable dimension'\n    Type      => 'ReturnFalse'  # (optional) default Cut (ReturnFalse|Cut)\n    Color     => '#101010',     # (optional) default black\n    LineWidth => 1,             # (optional) default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Image" : {
               "$True = $PDFObject->Image(\n    File   => '/path/image.gif',  # (gif|jpg|png)\n    Type   => 'ReturnFalse'       # (optional) default Reduce (ReturnFalse|Reduce)\n    Width  => 300,                # width of image\n    Height => 150,                # height of image\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PageBlankNew" : {
               "$True = $PDFObject->PageBlankNew(\n    Width           => 200,          # (optional) default 595 (Din A4) - _ both or nothing\n    Height          => 300,          # (optional) default 842 (Din A4) -\n    PageOrientation => 'landscape',  # (optional) default normal (normal|landscape)\n    MarginTop       => 40,           # (optional) default 0 -\n    MarginRight     => 40,           # (optional) default 0  |_ all or nothing\n    MarginBottom    => 40,           # (optional) default 0  |\n    MarginLeft      => 40,           # (optional) default 0 -\n    ShowPageNumber  => 0,            # (optional) default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PageNew" : {
               "$PDFObject->PageNew(\n    Width           => 200,                 # (optional) default 595 (Din A4)\n    Height          => 300,                 # (optional) default 842 (Din A4)\n    PageOrientation => 'landscape',         # (optional) default normal (normal|landscape)\n    MarginTop       => 40,                  # (optional) default 0\n    MarginRight     => 40,                  # (optional) default 0\n    MarginBottom    => 40,                  # (optional) default 0\n    MarginLeft      => 40,                  # (optional) default 0\n    ShowPageNumber  => 0,                   # (optional) default 1\n    LogoFile        => '/path/to/file.jpg', # (optional) you can use jpg, gif and png-Images\n    HeaderRight     => 'Header Right Text', # (optional)\n    HeadlineLeft    => 'Headline Text',     # (optional)\n    HeadlineRight   => 'Headline Text',     # (optional)\n    FooterLeft      => 'Footer Left Text',  # (optional)\n    FooterRight     => 'Footer Right Text', # (optional)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PositionGet" : {
               "%Position = $PDFObject->PositionGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PositionSet" : {
               "$True = $PDFObject->PositionSet(\n    Move => 'absolut',  # (optional) default absolut (absolut|relativ)\n    X    => 10,         # (optional) (<integer>|left|center|right)\n    Y    => 20,         # (optional) (<integer>|top|middle|bottom)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Table" : {
               "%Return = $PDFObject->Table(\n    CellData            => $CellData,    # 2D arrayref (see example)\n    ColumnData          => $ColumnData,  # arrayref (see example)\n    RowData             => $RowData,     # arrayref (see example)\n    Type                => 'Cut',        # (optional) default ReturnLeftOver (ReturnLeftOver|ReturnLeftOverHard|Cut)\n    Width               => 300,          # (optional) default maximal width\n    Height              => 400,          # (optional) default minimal height\n    Font                => 'Monospaced', # (optional) default Proportional (see DocumentNew())\n    FontSize            => 9,            # (optional) default 11\n    FontColor           => 'red',        # (optional) default black\n    FontColorEven       => 'blue',       # (optional) cell font color for even rows\n    FontColorOdd        => 'green',      # (optional) cell font color for odd rows\n    Align               => 'right',      # (optional) default left (left|center|right)\n    Lead                => 3,            # (optional) default 1\n    Padding             => 18,           # (optional) default 3\n    PaddingTop          => 10,           # (optional) top cell padding, overides Padding\n    PaddingRight        => 30,           # (optional) right cell padding, overides Padding\n    PaddingBottom       => 30,           # (optional) bottom cell padding, overides Padding\n    PaddingLeft         => 10,           # (optional) left cell padding, overides Padding\n    BackgroundColor     => '#101010',    # (optional) default white\n    BackgroundColorEven => '#F0F0F0',    # (optional) cell background color for even rows\n    BackgroundColorOdd  => '#A0A0A0',    # (optional) cell background color for odd rows\n    Border              => 1,            # (optional) default 1 (values between 0 and 20)\n    BorderColor         => '#FF0000',    # (optional) default black\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Text" : {
               "%Return = $PDFObject->Text(\n    Text     => 'Text',              # Text\n    Width    => 300,                 # (optional) available width of textblock\n    Height   => 200,                 # (optional) available height of textblock\n    Type     => 'Cut',               # (optional) default ReturnLeftOver (ReturnLeftOver|ReturnLeftOverHard|Cut)\n    Font     => 'ProportionalBold',  # (optional) default Proportional  (see DocumentNew())\n    FontSize => 15,                  # (optional) default 10\n    Color    => '#FF0000',           # (optional) default #000000\n    Align    => 'center',            # (optional) default left (left|center|right)\n    Lead     => 20,                  # (optional) default 1 distance between lines\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $PDFObject = $Kernel::OM->Get('Kernel::System::PDF');",
         "Package" : "Kernel::System::PDF"
      },
      "PIDObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "PIDCreate" : {
               "$PIDObject->PIDCreate(\n    Name  => 'PostMasterPOP3',\n    Force => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$PIDObject->PIDCreate(\n    Name  => 'PostMasterPOP3',\n    TTL   => 60 * 60 * 24 * 3, # for 3 days, per default 1h is used\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$PIDObject->PIDCreate(\n    Name => 'PostMasterPOP3',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PIDDelete" : {
               "my $Success = $PIDObject->PIDDelete(\n    Name  => 'PostMasterPOP3',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "or to force delete even if the PID is registered by another host\nmy $Success = $PIDObject->PIDDelete(\n    Name  => 'PostMasterPOP3',\n    Force => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PIDGet" : {
               "my %PID = $PIDObject->PIDGet(\n    Name => 'PostMasterPOP3',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PIDUpdate" : {
               "my $Success = $PIDObject->PIDUpdate(\n    Name    => 'PostMasterPOP3',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $PIDObject = $Kernel::OM->Get('Kernel::System::PID');",
         "Package" : "Kernel::System::PID"
      },
      "PackageObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AnalyzePackageFrameworkRequirements" : {
               "my %CheckOk = $PackageObject->AnalyzePackageFrameworkRequirements(\n    Framework       => $Structure{Framework}, # [ { 'Content' => '4.0.x', 'Minimum' => '4.0.4'} ]\n    NoLog           => 1, # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CheckVersion" : {
               "    my $CheckOk = $PackageObject->CheckVersion(\n        VersionNew       => '1.3.92',\n        VersionInstalled => '1.3.91',\n        Type             => 'Min',     # 'Min' or 'Max'\n        ExternalPackage  => 1,         # optional\n    )\n\n" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CloudFileGet" : {
               "my $List = $PackageObject->CloudFileGet(\n    Operation => 'OperationName', # used as operation name by the Cloud Service API\n                                  # Possible operation names:\n                                  # - RepositoryListAvailable\n                                  # - FAOListAssigned\n                                  # - FAOListAssignedFileGet\n);" : [
                  "6.0"
               ]
            },
            "ConfiguredRepositoryListGet" : {
               "my %RepositoryList = $PackageObject->ConfiguredRepositoryListGet();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DeployCheck" : {
               "$PackageObject->DeployCheck(\n    Name    => 'Application A',\n    Version => '1.0',\n    Log     => 1, # Default: 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DeployCheckInfo" : {
               "my %Hash = $PackageObject->DeployCheckInfo();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetRequiredModules" : {},
            "GetRequiredPackages" : {
               "my $PackageRequired = $PackageObject->GetRequiredPackages(\n    Structure => \\%Structure,       # return of PackageParse()\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "PackageBuild" : {
               "my $Package = $PackageObject->PackageBuild(\n    Name => {\n        Content => 'SomePackageName',\n    },\n    Version => {\n        Content => '1.0',\n    },\n    Vendor => {\n        Content => 'OTRS AG',\n    },\n    URL => {\n        Content => 'L<http://otrs.org/>',\n    },\n    License => {\n        Content => 'GNU GENERAL PUBLIC LICENSE Version 3, November 2007',\n    }\n    Description => [\n        {\n            Lang    => 'en',\n            Content => 'english description',\n        },\n        {\n            Lang    => 'de',\n            Content => 'german description',\n        },\n    ],\n    Filelist = [\n        {\n            Location   => 'Kernel/System/Lala.pm'\n            Permission => '644',\n            Content    => $FileInString,\n        },\n        {\n            Location   => 'Kernel/System/Lulu.pm'\n            Permission => '644',\n            Content    => $FileInString,\n        },\n    ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageExport" : {
               "$PackageObject->PackageExport(\n    String => $FileString,\n    Home   => '/path/to/export'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageFileGetMD5Sum" : {
               "my $MD5Sum = $PackageObject->PackageFileGetMD5Sum(\n    Name => 'Package Name',\n    Version => 123.0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageInstall" : {
               "$PackageObject->PackageInstall(\n    String    => $FileString,\n    Force     => 1,             # optional 1 or 0, for to install package even if validation fails\n    FromCloud => 1,             # optional 1 or 0, it indicates if package's origin is Cloud or not\n);" : [
                  "6.0"
               ],
               "$PackageObject->PackageInstall(\n    String    => $FileString,\n    Force     => 1,             # optional 1 or 0, for to install package even if validation fails\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "PackageInstallDefaultFiles" : {
               "$PackageObject->PackageInstallDefaultFiles();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageInstallOrderListGet" : {
               "my %Result = $PackageObject->PackageInstallOrderListGet(\n    InstalledPackages => \\@PackageList,      # as returned from RepositoryList(Result => 'short')\n    OnlinePackages    => \\@PackageList,      # as returned from PackageOnlineList()\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Result = $PackageObject->PackageInstallOrderListGet(\n    InstalledPackages => \\@PakageList,      # as returned from RepositoryList(Result => 'short')\n    OnlinePackages    => \\@PakageList,      # as returned from PackageOnlineList()\n);" : [
                  "6.0"
               ]
            },
            "PackageIsInstalled" : {
               "$PackageObject->PackageIsInstalled(\n    String => $PackageString,    # Attribute String or Name is required\n    Name   => $NameOfThePackage,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageOnlineGet" : {
               "$PackageObject->PackageOnlineGet(\n    Source => 'http://host.example.com/',\n    File   => 'SomePackage-1.0.opm',\n);" : [
                  "6.0"
               ],
               "$PackageObject->PackageOnlineGet(\n    Source => 'http://host.example.com/', # or the name of a configured repository in Package::RepositoryList\n    File   => 'SomePackage-1.0.opm',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "PackageOnlineList" : {
               "my @List = $PackageObject->PackageOnlineList(\n    URL                => '',\n    Lang               => 'en',\n    Cache              => 0,    # (optional) do not use cached data\n    FromCloud          => 1,    # optional 1 or 0, it indicates if a Cloud Service\n                                #  should be used for getting the packages list\n    IncludeSameVersion => 1,    # (optional) to also get packages already installed and with the same version\n);" : [
                  "6.0"
               ]
            },
            "PackageOnlineRepositories" : {
               "my %List = $PackageObject->PackageOnlineRepositories();" : [
                  "6.0"
               ]
            },
            "PackageParse" : {
               "my %Structure = $PackageObject->PackageParse( String => $FileString );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageReinstall" : {
               "$PackageObject->PackageReinstall( String => $FileString );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageUninstall" : {
               "$PackageObject->PackageUninstall( String => $FileString );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageUpgrade" : {
               "$PackageObject->PackageUpgrade(\n    String => $FileString,\n    Force  => 1,             # optional 1 or 0, for to install package even if validation fails\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageUpgradeAll" : {
               "my %Result = $PackageObject->PackageUpgradeAll(\n    Force           => 1,     # optional 1 or 0, Upgrades packages even if validation fails.\n    SkipDeployCheck => 1,     # optional 1 or 0, If active it does not check file deployment status\n                              #     for already updated packages.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageUpgradeAllDataDelete" : {
               "my $Success = $PackageObject->PackageUpgradeAllDataDelete();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageUpgradeAllIsRunning" : {
               "my %Result = $PackageObject->PackageUpgradeAllIsRunning();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PackageVerify" : {
               "$PackageObject->PackageVerify(\n    Package   => $Package,\n    Structure => \\%Structure,\n);" : [
                  "6.0"
               ],
               "$PackageObject->PackageVerify(\n    Package => $Package,\n    Name    => 'FAQ',\n);" : [
                  "6.0"
               ]
            },
            "PackageVerifyAll" : {
               "my %VerificationInfo = $PackageObject->PackageVerifyAll();" : [
                  "6.0"
               ]
            },
            "PackageVerifyInfo" : {
               "my %Hash = $PackageObject->PackageVerifyInfo();" : [
                  "6.0"
               ]
            },
            "RepositoryAdd" : {
               "$PackageObject->RepositoryAdd(\n    String    => $FileString,\n    FromCloud => 0,             # optional 1 or 0, it indicates if package came from Cloud or not\n);" : [
                  "6.0"
               ],
               "$PackageObject->RepositoryAdd(\n    String    => $FileString,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "RepositoryCloudList" : {
               "my $List = $PackageObject->RepositoryCloudList();" : [
                  "6.0"
               ]
            },
            "RepositoryGet" : {
               "my $Package = $PackageObject->RepositoryGet(\n    Name    => 'Application A',\n    Version => '1.0',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $PackageScalar = $PackageObject->RepositoryGet(\n    Name            => 'Application A',\n    Version         => '1.0',\n    Result          => 'SCALAR',\n    DisableWarnings => 1,                 # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RepositoryList" : {
               "my @List = $PackageObject->RepositoryList(\n    Result => 'short',  # will only return name, version, install_status md5sum, vendor and build commit ID\n    instead of the structure\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @List = $PackageObject->RepositoryList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RepositoryPackageListGet" : {
               "my @List = $PackageObject->RepositoryPackageListGet(\n    Source             => 'Example repository 1', # the value of key 'Name' in item of SysConfig option Package::RepositoryList or a direct download URL\n    Lang               => 'en',\n    Cache              => 0,    # (optional) use cached data\n    IncludeSameVersion => 1,    # (optional) also get packages already installed and with the same version\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "RepositoryRemove" : {
               "$PackageObject->RepositoryRemove(\n    Name    => 'Application A',\n    Version => '1.0',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RootRepositoryListGet" : {
               "my %List = $PackageObject->RootRepositoryListGet();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $PackageObject = $Kernel::OM->Get('Kernel::System::Package');",
         "Package" : "Kernel::System::Package"
      },
      "ParamObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Error" : {
               "if ( $ParamObject->Error() ) {\n    print STDERR $ParamObject->Error() . \"\\n\";\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetArray" : {
               "my @Param = $ParamObject->GetArray(\n    Param => 'ID',\n    Raw   => 1,     # optional, input data is not changed\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetCookie" : {
               "my $String = $ParamObject->GetCookie(\n    Key => ID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetParam" : {
               "my $Param = $ParamObject->GetParam(\n    Param => 'ID',\n    Raw   => 1,       # optional, input data is not changed\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetParamNames" : {
               "    my @ParamNames = $ParamObject->GetParamNames();\n    print join \" :: \", @ParamNames;\n    #prints Action :: Subaction :: Name\n\n" : [
                  "6.0"
               ],
               "my @ParamNames = $ParamObject->GetParamNames();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetParams" : {
               "my %Params = $ParamObject->GetParams(\n    Params           => [ 'TicketID', 'Queue', ]      # optional, only these parameters are fetched and returned\n    Raw              => 1,                            # optional, input data is not changed\n    JSONDecodeParams => ['ParamNameWithJSONData1',]   # optional, this JSON-decodes the given parameters\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetUploadAll" : {
               "my %File = $ParamObject->GetUploadAll(\n    Param  => 'FileParam',  # the name of the request parameter containing the file data\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "IsAJAXRequest" : {
               "my $IsAJAXRequest = $ParamObject->IsAJAXRequest();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "LoadFormDraft" : {
               "my $FormDraftID = $ParamObject->LoadFormDraft(\n    FormDraftID => $FormDraftID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SaveFormDraft" : {
               "my $FormDraftID = $ParamObject->SaveFormDraft(\n    UserID         => $UserID\n    ObjectType     => 'Ticket',\n    ObjectID       => $ObjectID,\n    OverrideParams => {               # optional, can contain strings and array references\n        Subaction   => undef,\n        UserID      => $UserID,\n        CustomParam => [ 1, 2, 3, ],\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SetCookie" : {
               "$ParamObject->SetCookie(\n    Key     => ID,\n    Value   => 123456,\n    Expires => '+3660s',\n    Path    => 'otrs/',     # optional, only allow cookie for given path\n    Secure  => 1,           # optional, set secure attribute to disable cookie on HTTP (HTTPS only)\n    HTTPOnly => 1,          # optional, sets HttpOnly attribute of cookie to prevent access via JavaScript\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ParamObject = $Kernel::OM->Get('Kernel::System::Web::Request');",
         "Package" : "Kernel::System::Web::Request"
      },
      "ParserObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GetAttachments" : {
               "my @Attachments = $ParserObject->GetAttachments();\nfor my $Attachment (@Attachments) {\n    print $Attachment->{Filename};\n    print $Attachment->{Charset};\n    print $Attachment->{MimeType};\n    print $Attachment->{ContentType};\n    print $Attachment->{Content};\n\n    # optional\n    print $Attachment->{ContentID};\n    print $Attachment->{ContentAlternative};\n    print $Attachment->{ContentMixed};\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetCharset" : {
               "my $Charset = $ParserObject->GetCharset();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetContentDisposition" : {
               "my $ContentDisposition = $ParserObject->GetContentDisposition();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetContentType" : {
               "my $ContentType = $ParserObject->GetContentType();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetEmailAddress" : {
               "my $SenderEmail = $ParserObject->GetEmailAddress(\n    Email => 'Juergen Weber <juergen.qeber@air.com>',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetMessageBody" : {
               "my $Body = $ParserObject->GetMessageBody();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetParam" : {
               "my $To = $ParserObject->GetParam( WHAT => 'To' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetPlainEmail" : {
               "my $Email = $ParserObject->GetPlainEmail();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetRealname" : {
               "my $Realname = $ParserObject->GetRealname(\n    Email => 'Juergen Weber <juergen.qeber@air.com>',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetReferences" : {
               "my @References = $ParserObject->GetReferences();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetReturnCharset" : {
               "my $Charset = $ParserObject->GetReturnCharset();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetReturnContentType" : {
               "my $ContentType = $ParserObject->GetReturnContentType();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SplitAddressLine" : {
               "my @Addresses = $ParserObject->SplitAddressLine(\n    Line => 'Juergen Weber <juergen.qeber@air.com>, me@example.com, hans@example.com (Hans Huber)',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ParserObject = Kernel::System::EmailParser",
         "Package" : "Kernel::System::EmailParser"
      },
      "PostMasterObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CheckFollowUp" : {
               "my ($TicketNumber, $TicketID) = $PostMasterObject->CheckFollowUp(\n    Subject => 'Re: [Ticket:#123456] Some Subject',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetEmailParams" : {
               "my %Header = $PostMasterObject->GetEmailParams();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Run" : {
               "$PostMasterObject->Run(\n    Queue   => 'Junk',  # optional, specify target queue for new tickets\n    QueueID => $QueueID,       # optional, specify target queue for new tickets\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $PostMasterObject = $Kernel::OM->Create(\n        'Kernel::System::PostMaster',\n        ObjectParams => {\n            Email        => \\@ArrayOfEmailContent,\n            Trusted      => 1, # 1|0 ignore X-OTRS header if false\n        },\n    );",
         "Package" : "Kernel::System::PostMaster"
      },
      "PriorityObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "PriorityAdd" : {
               "my $True = $PriorityObject->PriorityAdd(\n    Name    => 'Prio',\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PriorityGet" : {
               "my %PriorityData = $PriorityObject->PriorityGet(\n    PriorityID => $PriorityID,\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PriorityList" : {
               "my %PriorityList = $PriorityObject->PriorityList(\n    Valid => 0,   # (optional) default 1 (0|1)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PriorityLookup" : {
               "my $Priority = $PriorityObject->PriorityLookup(\n    PriorityID => $PriorityID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $PriorityID = $PriorityObject->PriorityLookup(\n    Priority => '3 normal',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PriorityUpdate" : {
               "my $True = $PriorityObject->PriorityUpdate(\n    PriorityID     => $PriorityID,\n    Name           => 'New Prio',\n    ValidID        => $ValidID,\n    UserID         => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $PriorityObject = $Kernel::OM->Get('Kernel::System::Priority');",
         "Package" : "Kernel::System::Priority"
      },
      "ProcessObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ProcessGet" : {
               "my $Process = $ProcessObject->ProcessGet(\n    ProcessEntityID => $ProcessEntityID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ProcessList" : {
               "my $ProcessList = $ProcessObject->ProcessList(\n    ProcessState => ['Active'],           # Active, FadeAway, Inactive\n    Interface    => ['AgentInterface'],   # optional, ['AgentInterface'] or ['CustomerInterface'] or ['AgentInterface', 'CustomerInterface'] or 'all'\n    Silent       => 1                     # optional, 1 || 0, default 0, if set to 1 does not log errors if there are no processes configured\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ProcessStartpointGet" : {
               "my $Start = $ProcessObject->ProcessStartpointGet(\n    ProcessEntityID => $ProcessEntityID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ProcessTicketActivitySet" : {
               "my $Success = $ProcessObject->ProcessTicketActivitySet(\n    ProcessEntityID  => $ProcessEntityID,\n    ActivityEntityID => $ActivityEntityID,\n    TicketID         => $TicketID,\n    UserID           => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ProcessTicketProcessSet" : {
               "my $Success = $ProcessObject->ProcessTicketProcessSet(\n    ProcessEntityID => $ProcessEntityID,\n    TicketID        => $TicketID,\n    UserID          => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ProcessTransition" : {
               "my $ProcessTransition = $ProcessObject->ProcessTransition(\n    ProcessEntityID  => $ProcessEntityID,\n    ActivityEntityID => $ActivityEntityID,\n    TicketID         => $TicketID,\n    UserID           => $UserID,\n    CheckOnly        => 1,             # optional\n    Data             => {              # optional\n        Queue         => 'Raw',\n        DynamicField1 => 'Value',\n        Subject       => 'Testsubject',\n        #...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ProcessObject = $Kernel::OM->Get('Kernel::System::ProcessManagement::Process');",
         "Package" : "Kernel::System::ProcessManagement::Process"
      },
      "ProviderObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Run" : {
               "# put this in the handler script\n$ProviderObject->Run();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ProviderObject = $Kernel::OM->Get('Kernel::GenericInterface::Provider');",
         "Package" : "Kernel::GenericInterface::Provider"
      },
      "QueueObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GetAllCustomQueues" : {
               "my @Queues = $QueueObject->GetAllCustomQueues( UserID => $UserID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetAllQueues" : {
               "my %Queues = $QueueObject->GetAllQueues( UserID => $UserID, Type => 'ro' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Queues = $QueueObject->GetAllQueues();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetFollowUpLockOption" : {
               "my $FollowUpLockOption = $QueueObject->GetFollowUpLockOption( QueueID => $QueueID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetFollowUpOption" : {
               "my $FollowUpOption = $QueueObject->GetFollowUpOption( QueueID => $QueueID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetFollowUpOptionList" : {
               "my %FollowUpOptionList = $QueueObject->GetFollowUpOptionList(\n    Valid => 0,             # (optional) default 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetQueueGroupID" : {
               "my $GroupID = $QueueObject->GetQueueGroupID( QueueID => $QueueID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetSignature" : {
               "my $Signature = $QueueObject->GetSignature(QueueID => 123);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetSystemAddress" : {
               "my %Address = $QueueObject->GetSystemAddress(\n    QueueID => $QueueID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NameExistsCheck" : {
               "$Exist = $QueueObject->NameExistsCheck(\n    Name => 'Some::Queue',\n    ID => 1, # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueueAdd" : {
               "my $QueueID = $QueueObject->QueueAdd(\n    Name                => 'Some::Queue',\n    ValidID             => $ValidID,\n    GroupID             => $GroupID,\n    Calendar            => '1',         # (optional)\n    FirstResponseTime   => 120,         # (optional)\n    FirstResponseNotify => 60,          # (optional, notify agent if first response escalation is 60% reached)\n    UpdateTime          => 180,         # (optional)\n    UpdateNotify        => 80,          # (optional, notify agent if update escalation is 80% reached)\n    SolutionTime        => 580,         # (optional)\n    SolutionNotify      => 80,          # (optional, notify agent if solution escalation is 80% reached)\n    UnlockTimeout       => 480,         # (optional)\n    FollowUpID          => $FollowUpID,           # possible (1), reject (2) or new ticket (3) (optional, default 0)\n    FollowUpLock        => 0,           # yes (1) or no (0) (optional, default 0)\n    DefaultSignKey      => 'key name',  # (optional)\n    SystemAddressID     => $SystemAddressID,\n    SalutationID        => $SalutationID,\n    SignatureID         => $SignatureID,\n    Comment             => 'Some comment',\n    UserID              => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueueGet" : {
               "my %Queue = $QueueObject->QueueGet(\n    ID    => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Queue = $QueueObject->QueueGet(\n    Name  => 'Some::Queue',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueueList" : {
               "my %Queues = $QueueObject->QueueList( Valid => 1 );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Queues = $QueueObject->QueueList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueueLookup" : {
               "my $Queue = $QueueObject->QueueLookup( QueueID => $QueueID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $QueueID = $QueueObject->QueueLookup( Queue => $Queue );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueuePreferencesGet" : {
               "my %Preferences = $QueueObject->QueuePreferencesGet(\n    QueueID => $QueueID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueuePreferencesSet" : {
               "$QueueObject->QueuePreferencesSet(\n    QueueID => $QueueID,\n    Key     => 'UserComment',\n    Value   => 'some comment',\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueueStandardTemplateMemberAdd" : {
               "my $Success = $QueueObject->QueueStandardTemplateMemberAdd(\n    QueueID            => $QueueID,\n    StandardTemplateID => $StandardTemplateID,\n    Active             => 1,        # to set/confirm (1) or remove (0) the relation\n    UserID             => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueueStandardTemplateMemberList" : {
               "my %Queues = $QueueObject->QueueStandardTemplateMemberList( StandardTemplateID => $StandardTemplateID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Responses = $QueueObject->QueueStandardTemplateMemberList(\n    QueueID       => $QueueID,\n    TemplateTypes => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Templates = $QueueObject->QueueStandardTemplateMemberList( QueueID => $QueueID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "QueueUpdate" : {
               "my $Success = $QueueObject->QueueUpdate(\n    QueueID             => $QueueID,\n    Name                => 'Some::Queue',\n    ValidID             => $ValidID,\n    GroupID             => $GroupID,\n    Calendar            => '1', # (optional) default ''\n    FirstResponseTime   => 120, # (optional)\n    FirstResponseNotify => 60,  # (optional, notify agent if first response escalation is 60% reached)\n    UpdateTime          => 180, # (optional)\n    UpdateNotify        => 80,  # (optional, notify agent if update escalation is 80% reached)\n    SolutionTime        => 580, # (optional)\n    SolutionNotify      => 80,  # (optional, notify agent if solution escalation is 80% reached)\n    SystemAddressID     => $SystemAddressID,\n    SalutationID        => $SalutationID,\n    SignatureID         => $SignatureID,\n    UserID              => $UserID,\n    FollowUpID          => $FollowUpID,\n    Comment             => 'Some Comment2',\n    DefaultSignKey      => ''\n    UnlockTimeOut       => ''\n    FollowUpLock        => 1,\n    ParentQueueID       => $ParentQueueID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $QueueObject = $Kernel::OM->Get('Kernel::System::Queue');",
         "Package" : "Kernel::System::Queue"
      },
      "ReferenceDataObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CountryList" : {
               "my $CountryList = $ReferenceDataObject->CountryList(\n   Result => 'CODE', # optional: returns CODE => Country pairs conform ISO 3166-2.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ReferenceDataObject = $Kernel::OM->Get('Kernel::System::ReferenceData');",
         "Package" : "Kernel::System::ReferenceData"
      },
      "RequesterObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Run" : {
               "my $Result = $RequesterObject->Run(\n    WebserviceID => $WebserviceID,                      # ID of the configured remote web service to use OR\n    Invoker      => 'some_operation',       # Name of the Invoker to be used for sending the request\n    Asynchronous => 1,                      # Optional, 1 or 0, defaults to 0\n    Data         => {                       # Data payload for the Invoker request (remote web service)\n       #...\n    },\n    PastExecutionData => {                  # Meta data containing information about previous request attempts, optional\n        #...\n    }\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $RequesterObject = $Kernel::OM->Get('Kernel::GenericInterface::Requester');",
         "Package" : "Kernel::GenericInterface::Requester"
      },
      "SLAObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "SLAAdd" : {
               "my $SLAID = $SLAObject->SLAAdd(\n    ServiceIDs          => [ 1, 5, 7 ],  # (optional)\n    Name                => 'SLA Name',\n    Calendar            => 'Calendar1',  # (optional)\n    FirstResponseTime   => 120,          # (optional)\n    FirstResponseNotify => 60,           # (optional) notify agent if first response escalation is 60% reached\n    UpdateTime          => 180,          # (optional)\n    UpdateNotify        => 80,           # (optional) notify agent if update escalation is 80% reached\n    SolutionTime        => 580,          # (optional)\n    SolutionNotify      => 80,           # (optional) notify agent if solution escalation is 80% reached\n    ValidID             => $ValidID,\n    Comment             => 'Comment',    # (optional)\n    UserID              => $UserID,\n\n    # ITSMCore (if installed)\n    TypeID                  => $TypeID,\n    MinTimeBetweenIncidents => 3443,     # (optional)\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $SLAID = $SLAObject->SLAAdd(\n    ServiceIDs          => [ 1, 5, 7 ],  # (optional)\n    Name                => 'SLA Name',\n    Calendar            => 'Calendar1',  # (optional)\n    FirstResponseTime   => 120,          # (optional)\n    FirstResponseNotify => 60,           # (optional) notify agent if first response escalation is 60% reached\n    UpdateTime          => 180,          # (optional)\n    UpdateNotify        => 80,           # (optional) notify agent if update escalation is 80% reached\n    SolutionTime        => 580,          # (optional)\n    SolutionNotify      => 80,           # (optional) notify agent if solution escalation is 80% reached\n    ValidID             => $ValidID,\n    Comment             => 'Comment',    # (optional)\n    UserID              => $UserID,\n);" : [
                  "6.0",
                  "6.4"
               ]
            },
            "SLAGet" : {
               "my %SLAData = $SLAObject->SLAGet(\n    SLAID  => $SLAID,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SLAList" : {
               "my %SLAList = $SLAObject->SLAList(\n    ServiceID => $ServiceID,  # (optional)\n    Valid     => 0,  # (optional) default 1 (0|1)\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SLALookup" : {
               "my $SLAID = $SLAObject->SLALookup(\n    Name => 'SLA Name',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $SLAName = $SLAObject->SLALookup(\n    SLAID => $SLAID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SLAPreferencesGet" : {
               "my %Preferences = $SLAObject->SLAPreferencesGet(\n    SLAID  => $SLAID,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SLAPreferencesSet" : {
               "$SLAObject->SLAPreferencesSet(\n    SLAID  => $SLAID,\n    Key    => 'UserComment',\n    Value  => 'some comment',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SLAUpdate" : {
               "my $True = $SLAObject->SLAUpdate(\n    SLAID               => $SLAID,\n    ServiceIDs          => [ 1, 2, 3 ],  # (optional)\n    Name                => 'Service Name',\n    Calendar            => 'Calendar1',  # (optional)\n    FirstResponseTime   => 120,          # (optional)\n    FirstResponseNotify => 60,           # (optional) notify agent if first response escalation is 60% reached\n    UpdateTime          => 180,          # (optional)\n    UpdateNotify        => 80,           # (optional) notify agent if update escalation is 80% reached\n    SolutionTime        => 580,          # (optional)\n    SolutionNotify      => 80,           # (optional) notify agent if solution escalation is 80% reached\n    ValidID             => $ValidID,\n    Comment             => 'Comment',    # (optional)\n    UserID              => $UserID,\n\n    # ITSMCore\n    TypeID                  => $TypeID,\n    MinTimeBetweenIncidents => 3443,  # (optional)\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $True = $SLAObject->SLAUpdate(\n    SLAID               => $SLAID,\n    ServiceIDs          => [ 1, 2, 3 ],  # (optional)\n    Name                => 'Service Name',\n    Calendar            => 'Calendar1',  # (optional)\n    FirstResponseTime   => 120,          # (optional)\n    FirstResponseNotify => 60,           # (optional) notify agent if first response escalation is 60% reached\n    UpdateTime          => 180,          # (optional)\n    UpdateNotify        => 80,           # (optional) notify agent if update escalation is 80% reached\n    SolutionTime        => 580,          # (optional)\n    SolutionNotify      => 80,           # (optional) notify agent if solution escalation is 80% reached\n    ValidID             => $ValidID,\n    Comment             => 'Comment',    # (optional)\n    UserID              => $UserID,\n);" : [
                  "6.0",
                  "6.4"
               ]
            }
         },
         "ObjectManager" : "my $SLAObject = $Kernel::OM->Get('Kernel::System::SLA');",
         "Package" : "Kernel::System::SLA"
      },
      "SalutationObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "SalutationAdd" : {
               "my $ID = $SalutationObject->SalutationAdd(\n    Name        => 'New Salutation',\n    Text        => \"--\\nSome Salutation Infos\",\n    ContentType => 'text/plain; charset=utf-8',\n    Comment     => 'some comment',\n    ValidID     => $ValidID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SalutationGet" : {
               "my %Salutation = $SalutationObject->SalutationGet(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SalutationList" : {
               "my %List = $SalutationObject->SalutationList(\n    Valid => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %List = $SalutationObject->SalutationList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SalutationUpdate" : {
               "$SalutationObject->SalutationUpdate(\n    ID          => 123,\n    Name        => 'New Salutation',\n    Text        => \"--\\nSome Salutation Infos\",\n    ContentType => 'text/plain; charset=utf-8',\n    Comment     => 'some comment',\n    ValidID     => $ValidID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SalutationObject = $Kernel::OM->Get('Kernel::System::Salutation');",
         "Package" : "Kernel::System::Salutation"
      },
      "SchedulerDBObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CronTaskCleanup" : {
               "my $Success = $SchedulerDBObject->CronTaskCleanup();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CronTaskSummary" : {
               "my @Summary = $SchedulerDBObject->CronTaskSummary();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CronTaskToExecute" : {
               "my $Success = $SchedulerDBObject->CronTaskToExecute(\n    NodeID => $NodeID,    # the ID of the node in a cluster environment\n    PID    => $PID,  # the process ID of the daemon that is creating the tasks to execution\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FutureTaskAdd" : {
               "my $TaskID = $SchedulerDBObject->FutureTaskAdd(\n    ExecutionTime            => '2015-01-01 00:00:00',\n    Type                     => 'GenericInterface',  # e. g. GenericInterface, Test\n    Name                     => 'any name',          # optional\n    Attempts                 => 5,                   # optional (default 1)\n    MaximumParallelInstances => 2,                   # optional (default 0), number of tasks\n                                                     #   with the same type (and name if provided)\n                                                     #   that can exists at the same time,\n                                                     #   value of 0 means unlimited\n    Data => {                                        # data payload\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FutureTaskDelete" : {
               "my $Success = $SchedulerDBObject->FutureTaskDelete(\n    TaskID => $TaskID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FutureTaskGet" : {
               "my %Task = $SchedulerDBObject->FutureTaskGet(\n    TaskID => $TaskID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FutureTaskList" : {
               "my @List = $SchedulerDBObject->FutureTaskList(\n    Type => 'some type',  # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FutureTaskSummary" : {
               "my @Summary = $SchedulerDBObject->FutureTaskSummary();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FutureTaskToExecute" : {
               "my $Success = $SchedulerDBObject->FutureTaskToExecute(\n    NodeID => $NodeID,    # the ID of the node in a cluster environment\n    PID    => $PID,  # the process ID of the daemon that is moving the tasks to execution\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenericAgentTaskCleanup" : {
               "my $Success = $SchedulerDBObject->GenericAgentTaskCleanup();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenericAgentTaskSummary" : {
               "my @Summary = $SchedulerDBObject->GenericAgentTaskSummary();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenericAgentTaskToExecute" : {
               "my $Success = $SchedulerDBObject->GenericAgentTaskToExecute(\n    NodeID => $NodeID,    # the ID of the node in a cluster environment\n    PID    => $PID,  # the process ID of the daemon that is creating the tasks to execution\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RecurrentTaskDelete" : {
               "my $Success = $SchedulerDBObject->RecurrentTaskDelete(\n    TaskID => $TaskID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RecurrentTaskExecute" : {
               "my $Success = $SchedulerDBObject->RecurrentTaskExecute(\n    NodeID                   => $NodeID,                 # the ID of the node in a cluster environment\n    PID                      => $PID,               # the process ID of the daemon that is creating\n                                                   #    the tasks to execution\n    TaskName                 => 'UniqueTaskName',\n    TaskType                 => 'Cron',\n    PreviousEventTimestamp   => 1433212343,\n    MaximumParallelInstances => 1,                 # optional (default 0) number of tasks with the\n                                                   #    same name and type that can be in execution\n                                                   #    table at the same time, value of 0 means\n                                                   #    unlimited\n    Data                   => {                    # data payload\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RecurrentTaskGet" : {
               "my %Task = $SchedulerDBObject->RecurrentTaskGet(\n    TaskID => $TaskID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RecurrentTaskList" : {
               "my @List = $SchedulerDBObject->RecurrentTaskList(\n    Type => 'some type',  # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RecurrentTaskSummary" : {
               "my @Summary = $SchedulerDBObject->RecurrentTaskSummary(\n    Type         => 'some_type',\n    DisplayType  => 'some type',\n    TaskLookup   => {                       # only tasks with names in this table will be shown\n        TaskName1 => '* * * * *',           #   the value of the items in this table is a crontab\n        TaskName3 => '*/1 3,4 * * * 0',     #   format schedule\n    }\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RecurrentTaskUnlockExpired" : {
               "my $Success = $SchedulerDBObject->RecurrentTaskUnlockExpired(\n    Type => 'some_type',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RecurrentTaskWorkerInfoSet" : {
               "my $Success = $SchedulerDBObject->RecurrentTaskWorkerInfoSet(\n    LastWorkerTaskID      => $LastWorkerTaskID,        # the task ID from the worker table that is performing the\n                                         #      recurring task\n    LastWorkerStatis      => 1,          # optional 1 or 0, defaults to 0, 1 means success\n    LastWorkerRunningTime => 123,        # optional, defaults to 0, the number in seconds a worker took\n                                         #      to complete the task\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskAdd" : {
               "my $TaskID = $SchedulerDBObject->TaskAdd(\n    Type                     => 'GenericInterface',     # e. g. GenericInterface, Test\n    Name                     => 'any name',             # optional\n    Attempts                 => 5,                      # optional (default 1)\n    MaximumParallelInstances => 2,                      # optional (default 0), number of tasks\n                                                        #   with the same type (and name if\n                                                        #   provided) that can exists at the same\n                                                        #   time, value of 0 means unlimited\n    Data => {                                           # data payload\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskCleanup" : {
               "my $Success = $SchedulerDBObject->TaskCleanup();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskDelete" : {
               "my $Success = $SchedulerDBObject->TaskDelete(\n    TaskID => $TaskID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskGet" : {
               "my %Task = $SchedulerDBObject->TaskGet(\n    TaskID => $TaskID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskList" : {
               "my @List = $SchedulerDBObject->TaskList(\n    Type => 'some type',  # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskListUnlocked" : {
               "my @TaskList = $SchedulerDBObject->TaskListUnlocked();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskLock" : {
               "my $Success = $SchedulerDBObject->TaskLock(\n    TaskID => $TaskID,\n    NodeID => $NodeID,    # the id on the node in a cluster environment\n    PID    => $PID,  # the process ID of the worker that is locking the task\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskLockUpdate" : {
               "my $Success = $SchedulerDBObject->TaskLockUpdate(\n    TaskIDs => [123, 456],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskSummary" : {
               "my @Summary = $SchedulerDBObject->TaskSummary();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskUnlockExpired" : {
               "my $Success = $SchedulerDBObject->TaskUnlockExpired();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SchedulerDBObject = $Kernel::OM->Get('Kernel::System::Daemon::SchedulerDB');",
         "Package" : "Kernel::System::Daemon::SchedulerDB"
      },
      "SchedulerObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "FutureTaskDelete" : {
               "my $Success = $SchedulerObject->FutureTaskDelete(\n    TaskID => $TaskID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FutureTaskList" : {
               "my @List = $SchedulerObject->FutureTaskList(\n    Type => 'some type',  # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskAdd" : {
               "my $Success = $SchedulerObject->TaskAdd(\n    ExecutionTime            => '2015-01-01 00:00:00',  # task will be executed immediately if no execution\n                                                        #   time is given\n    Type                     => 'GenericInterface',     # e. g. GenericInterface, Test\n    Name                     => 'any name',             # optional\n    Attempts                 => 5,                      # optional (default 1)\n    MaximumParallelInstances => 2,                      # optional, number of tasks with the same type\n                                                        #   (and name if provided) that can exists at\n                                                        #   the same time, value of 0 means unlimited\n    Data => {                                           # data payload\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TaskList" : {
               "my @List = $SchedulerObject->TaskList(\n    Type => 'some type',  # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SchedulerObject = $Kernel::OM->Get('Kernel::System::Scheduler');",
         "Package" : "Kernel::System::Scheduler"
      },
      "SearchProfileObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "SearchProfileAdd" : {
               "$SearchProfileObject->SearchProfileAdd(\n    Base      => 'TicketSearch',\n    Name      => 'last-search',\n    Key       => 'Body',\n    Value     => $String,    # SCALAR|ARRAYREF\n    UserLogin => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchProfileDelete" : {
               "$SearchProfileObject->SearchProfileDelete(\n    Base      => 'TicketSearch',\n    Name      => 'last-search',\n    UserLogin => 'me',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchProfileGet" : {
               "my %SearchProfileData = $SearchProfileObject->SearchProfileGet(\n    Base      => 'TicketSearch',\n    Name      => 'last-search',\n    UserLogin => 'me',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchProfileList" : {
               "my %SearchProfiles = $SearchProfileObject->SearchProfileList(\n    Base      => 'TicketSearch',\n    UserLogin => 'me',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchProfileUpdateUserLogin" : {
               "my $Result = $SearchProfileObject->SearchProfileUpdateUserLogin(\n    Base         => 'TicketSearch',\n    UserLogin    => 'me',\n    NewUserLogin => 'newme',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SearchProfileObject = $Kernel::OM->Get('Kernel::System::SearchProfile');",
         "Package" : "Kernel::System::SearchProfile"
      },
      "SeleniumObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AJAXCompleted" : {
               "$SeleniumObject->AJAXCompleted();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "AgentInterface" : {
               "$SeleniumObject->AgentInterface(\n    Action      => 'AgentTicketZoom',\n    WaitForAJAX => 0,                     # optional, default 1\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "AgentLogin" : {
               "my %UserData = $SeleniumObject->AgentLogin(\n    Groups => ['admin', 'users'],           # optional, list of groups to add this user to (rw rights)\n    Language => 'de'                        # optional, defaults to 'en' if not set\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "AgentRequest" : {
               "$SeleniumObject->AgentRequest(\n    Action      => 'CustomerUserSearch',\n    Param       => {\n        Term => 'test-customer-user'\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CreateScreenshot" : {
               "my $Success = $SeleniumObject->CreateScreenshot();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerInterface" : {
               "$SeleniumObject->CustomerInterface(\n    Action      => 'CustomerTicketMessage',\n    WaitForAJAX => 0,                      # optional, default 1\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerRequest" : {
               "$SeleniumObject->CustomerRequest(\n    Action      => 'CustomerUserSearch',\n    Param       => {\n        Term => 'test-customer-user'\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserLogin" : {
               "my %CustomerUserData = $SeleniumObject->CustomerUserLogin(\n    Language => 'de' # optional, defaults to 'en' if not set\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DragAndDrop" : {
               "$SeleniumObject->DragAndDrop(\n    Element         => '.Element', # (required) css selector of element which should be dragged\n    Target          => '.Target',  # (required) css selector of element on which the dragged element should be dropped\n    TargetOffset    => {           # (optional) Offset for target. If not specified, the mouse will move to the middle of the element.\n        X   => 150,\n        Y   => 100,\n    }\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ElementExists" : {
               "$SeleniumObject->ElementExists(\n    Selector     => '#GroupID',\n    SelectorType => 'css',        # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ElementExistsNot" : {
               "$SeleniumObject->ElementExistsNot(\n    Selector     => '#GroupID',\n    SelectorType => 'css',        # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "FindElementSave" : {
               "my $Element = $SeleniumObject->FindElementSave(\n    Selector     => '#GroupID',\n    SelectorType => 'css',        # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetScreenshotDirectory" : {
               "my %ScreenshotDirectory = $SeleniumObject->GetScreenshotDirectory(\n    Directory => 'Captured',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetScreenshotFileName" : {
               "my $ScreenshotFileName = $SeleniumObject->GetScreenshotFileName(\n    Filename => 'ZnunyRocks',\n    # or\n    Line     => '359',\n    Function => 'InputFieldID',\n    Hook     => 'BEFORE',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetScreenshotURL" : {
               "my $ScreenshotURL = $SeleniumObject->GetScreenshotURL(\n    WebPath  = '/otrs-web/SeleniumScreenshots/ZnunyRocks/',\n    Filename = 'AgentTicketZoom',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetSeleniumHome" : {
               "my $SeleniumHome = $SeleniumObject->GetSeleniumHome(\n    Directory => '/opt/otrs',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "HandleError" : {
               "$SeleniumObject->HandleError($@);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "InputExists" : {
               "my $Result = $SeleniumObject->InputExists(\n    Attribute => 'QueueID',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputFieldID" : {
               "my $Result = $SeleniumObject->InputFieldID(\n    Attribute => 'QueueID',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputFieldIDMapping" : {
               "my $Result = $SeleniumObject->InputFieldIDMapping(\n    Action  => 'AgentTicketZoom',\n    Mapping => {\n        ...\n        QueueID => $QueueID,\n        ...\n    },\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Result = $SeleniumObject->InputFieldIDMapping(\n    Action  => 'AgentTicketZoom',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputFieldValueSet" : {
               "$SeleniumObject->InputFieldValueSet(\n    Element => 'css-selector',              # (required) css selector\n    Value   => 3,                           # (optional) Value\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "InputGet" : {
               "my $Result = $SeleniumObject->InputGet(\n    Attribute => 'QueueID',\n    Options   => {                          # optional\n        KeyOrValue => 'Value',              # default is 'Key'\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputHide" : {
               "my $Result = $SeleniumObject->InputHide(\n    Attribute => 'QueueID',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputMandatory" : {
               "my $Result = $SeleniumObject->InputMandatory(\n    Attribute => 'QueueID',\n    Mandatory => 1,         # 1 or 0\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Result = $SeleniumObject->InputMandatory(\n    Attribute => 'QueueID',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputModule" : {
               "my $Result = $SeleniumObject->InputModule(\n    Action => 'QueueID',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputSet" : {
               "my $Result = $SeleniumObject->InputSet(\n    Attribute   => 'DynamicField_ExampleCheckbox',\n    WaitForAJAX => 0,                       # optional, default 1\n    Content     => undef,                   # optional, none removes content\n    Options     => {                        # optional\n        TriggerChange => 1,                 # default is 1\n    }\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Result = $SeleniumObject->InputSet(\n    Attribute   => 'QueueID',\n    WaitForAJAX => 0,                       # optional, default 1\n    Content     => 'Misc',                  # optional, none removes content\n    Options     => {                        # optional\n        KeyOrValue    => 'Value',           # default is 'Key'\n        TriggerChange => 0,                 # default is 1\n    }\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Result = $SeleniumObject->InputSet(\n    Attribute => 'DynamicField_NameOfYourDateOrDateTimeField',\n    Content   => {\n        Year   => '2016',\n        Month  => '08',\n        Day    => '30',\n        Hour   => '00',\n        Minute => '00',\n        Second => '00',\n        Used   => 1, # THIS ONE IS IMPORTANT -\n                   # if not set to 1 field will not get activated and though not transmitted\n    },\n    WaitForAJAX => 1,\n    Options     => {\n        TriggerChange => 1,\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputShow" : {
               "my $Result = $SeleniumObject->InputShow(\n    Attribute => 'QueueID',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InputType" : {
               "my $Result = $SeleniumObject->InputType(\n    FieldID => $FieldID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Login" : {
               "$SeleniumObject->Login(\n    Type     => 'Agent', # Agent|Customer\n    User     => 'someuser',\n    Password => 'somepassword',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "PageContains" : {
               "$SeleniumObject->PageContains(\n    String  => 'Ticked locked.',\n    Message => \"Page contains 'Ticket locked.'\" # optional - default\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "PageContainsNot" : {
               "$SeleniumObject->PageContainsNot(\n    String  => 'Ticked locked.',\n    Message => \"Page does not contain 'Ticket locked.'\" # optional - default\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "PublicInterface" : {
               "$SeleniumObject->PublicInterface(\n    Action      => 'PublicFAQ',\n    WaitForAJAX => 0,             # optional, default 1\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "PublicRequest" : {
               "$SeleniumObject->PublicRequest(\n    Action      => 'PublicUserSearch',\n    Param       => {\n        Term => 'test-customer-user'\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "RequestURLBuild" : {
               "my $RequestURL = $SeleniumObject->RequestURLBuild(\n    Interface   => 'Agent',           # or Customer or Public\n    Param       => {                  # optional\n        Action => AgentTicketZoom,\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "RunTest" : {
               "$SeleniumObject->RunTest( sub { ... } );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SelectOption" : {
               "my $Success = $SeleniumObject->SelectOption(\n    Selector => 'li.ui-menu-item',\n    Content  => 'ABCDEFG',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "SendKeys" : {
               "my $Success = $SeleniumObject->SendKeys(\n    Selector     => '#DynamicField_Test',\n    SelectorType => 'css',                  # optional\n    Content      => 'ABCDEFG',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "SwitchToFrame" : {
               "my $Success = $SeleniumObject->SwitchToFrame(\n    FrameSelector => '.Iframe',     # (required) CSS selector of the frame element\n    WaitForLoad   => 1,             # (optional) Wait until the frame has loaded, if necessary\n    Time          => 20,            # (optional) Wait time in seconds (default 20)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SwitchToMainWindow" : {
               "$SeleniumObject->SwitchToMainWindow(\n    WaitForAJAX => 0, # optional, default 1\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "SwitchToPopUp" : {
               "$SeleniumObject->SwitchToPopUp(\n    WaitForAJAX => 0, # optional, default 1\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "VerifiedClick" : {
               "$SeleniumObject->VerifiedClick(\n    $Button             # optional, see Selenium docs\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "VerifiedGet" : {
               "$SeleniumObject->VerifiedGet(\n    $URL,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "VerifiedRefresh" : {
               "$SeleniumObject->VerifiedRefresh();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "VerifiedSubmit" : {
               "$SeleniumObject->VerifiedSubmit();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WaitFor" : {
               "my $Success = $SeleniumObject->WaitFor(\n    AlertPresent   => 1,                                 # Wait until an alert, confirm or prompt dialog is present\n    Callback       => sub { ... }                        # Wait until function returns true\n    ElementExists  => 'xpath-selector'                   # Wait until an element is present\n    ElementExists  => ['css-selector', 'css'],\n    ElementMissing => 'xpath-selector',                  # Wait until an element is not present\n    ElementMissing => ['css-selector', 'css'],\n    JavaScript     => 'return $(\".someclass\").length',   # JavaScript code that checks condition\n    WindowCount    => 2,                                 # Wait until this many windows are open\n    Time           => 20,                                # optional, wait time in seconds (default 20)\n    SkipDie        => 1,                                 # Instead of a dying process do return the result of the wait for\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Success = $SeleniumObject->WaitFor(\n    AlertPresent   => 1,                                 # Wait until an alert, confirm or prompt dialog is present\n    Callback       => sub { ... }                        # Wait until function returns true\n    ElementExists  => 'xpath-selector'                   # Wait until an element is present\n    ElementExists  => ['css-selector', 'css'],\n    ElementMissing => 'xpath-selector',                  # Wait until an element is not present\n    ElementMissing => ['css-selector', 'css'],\n    JavaScript     => 'return $(\".someclass\").length',   # JavaScript code that checks condition\n    WindowCount    => 2,                                 # Wait until this many windows are open\n    Time           => 20,                                # optional, wait time in seconds (default 20)\n);" : [
                  "6.0"
               ]
            },
            "WaitForjQueryEventBound" : {
               "$SeleniumObject->WaitForjQueryEventBound(\n    CSSSelector => 'li > a#Test',       # (required) css selector\n    Event       => 'click',             # (optional) Specify event name. Default 'click'.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "get" : {
               "$SeleniumObject->get(\n    $URL,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "get_alert_text" : {
               "my $AlertText = $SeleniumObject->get_alert_text();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SeleniumObject = $Kernel::OM->Get('Kernel::System::UnitTest::Selenium');",
         "Package" : "Kernel::System::UnitTest::Selenium"
      },
      "ServiceObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CustomerUserServiceMemberAdd" : {
               "$ServiceObject->CustomerUserServiceMemberAdd(\n    CustomerUserLogin => 'Test1',\n    ServiceID         => $ServiceID,\n    Active            => 1,\n    UserID            => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CustomerUserServiceMemberList" : {
               "$ServiceObject->CustomerUserServiceMemberList(\n    CustomerUserLogin => 'Test',\n    Result            => 'HASH',\n    DefaultServices   => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$ServiceObject->CustomerUserServiceMemberList(\n    ServiceID => $ServiceID,\n    Result    => 'HASH',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetAllCustomServices" : {
               "my @Services = $ServiceObject->GetAllCustomServices( UserID => $UserID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServiceAdd" : {
               "my $ServiceID = $ServiceObject->ServiceAdd(\n    Name     => 'Service Name',\n    ParentID => $ParentID,           # (optional)\n    ValidID  => $ValidID,\n    Comment  => 'Comment',    # (optional)\n    UserID   => $UserID,\n\n    # ITSMCore (if installed)\n    TypeID      => $TypeID,\n    Criticality => '3 normal',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $ServiceID = $ServiceObject->ServiceAdd(\n    Name     => 'Service Name',\n    ParentID => $ParentID,           # (optional)\n    ValidID  => $ValidID,\n    Comment  => 'Comment',    # (optional)\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4"
               ]
            },
            "ServiceGet" : {
               "# With installed ITSM:\nmy %ServiceData = $ServiceObject->ServiceGet(\n    ServiceID     => $ServiceID,\n    IncidentState => 1, # Optional, returns CurInciState etc.\n    UserID        => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %ServiceData = $ServiceObject->ServiceGet(\n    Name    => 'Service::SubService',\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %ServiceData = $ServiceObject->ServiceGet(\n    ServiceID => $ServiceID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServiceList" : {
               "my %ServiceList = $ServiceObject->ServiceList(\n    Valid        => 0,   # (optional) default 1 (0|1)\n    KeepChildren => 0,   # (optional) default 0 (0|1); when Valid=1 set to 1 if you want to include also valid child services of invalid services.\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServiceListGet" : {
               "my $ServiceList = $ServiceObject->ServiceListGet(\n    Valid  => 0,   # (optional) default 1 (0|1)\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServiceLookup" : {
               "my $ServiceID = $ServiceObject->ServiceLookup(\n    Name => 'Service::SubService',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $ServiceName = $ServiceObject->ServiceLookup(\n    ServiceID => $ServiceID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServiceParentsGet" : {
               "my $ServiceParentsList = $ServiceObject->ServiceParentsGet(\n    ServiceID => $ServiceID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServicePreferencesGet" : {
               "my %Preferences = $ServiceObject->ServicePreferencesGet(\n    ServiceID => $ServiceID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServicePreferencesSet" : {
               "$ServiceObject->ServicePreferencesSet(\n    ServiceID => $ServiceID,\n    Key       => 'UserComment',\n    Value     => 'some comment',\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServiceSearch" : {
               "my @ServiceList = $ServiceObject->ServiceSearch(\n    Name   => 'Service Name', # (optional)\n    Limit  => 122,            # (optional) default 1000\n    UserID => $UserID,\n\n    # ITSMCore (if installed)\n    TypeIDs       => 2,\n    Criticalities => [ '2 low', '3 normal' ],\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my @ServiceList = $ServiceObject->ServiceSearch(\n    Name   => 'Service Name', # (optional)\n    Limit  => 122,            # (optional) default 1000\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4"
               ]
            },
            "ServiceUpdate" : {
               "my $True = $ServiceObject->ServiceUpdate(\n    ServiceID => $ServiceID,\n    ParentID  => $ParentID,           # (optional)\n    Name      => 'Service Name',\n    ValidID   => $ValidID,\n    Comment   => 'Comment',    # (optional)\n    UserID    => $UserID,\n\n    # ITSMCore (if installed)\n    TypeID      => $TypeID,\n    Criticality => '3 normal',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $True = $ServiceObject->ServiceUpdate(\n    ServiceID => $ServiceID,\n    ParentID  => $ParentID,           # (optional)\n    Name      => 'Service Name',\n    ValidID   => $ValidID,\n    Comment   => 'Comment',    # (optional)\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4"
               ]
            }
         },
         "ObjectManager" : "my $ServiceObject = $Kernel::OM->Get('Kernel::System::Service');",
         "Package" : "Kernel::System::Service"
      },
      "SessionObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CheckAgentSessionLimitPriorWarning" : {
               "my $PriorMessage = $SessionObject->CheckAgentSessionLimitPriorWarning();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CheckSessionID" : {
               "my $Ok = $SessionObject->CheckSessionID(\n    SessionID => $SessionID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CleanUp" : {
               "$SessionObject->CleanUp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CreateSessionID" : {
               "my $SessionID = $SessionObject->CreateSessionID(\n    UserLogin => 'root',\n    UserEmail => 'root@example.com',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetActiveSessions" : {
               "my %Result = $SessionObject->GetActiveSessions(\n    UserType => '(User|Customer)',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetAllSessionIDs" : {
               "my @Sessions = $SessionObject->GetAllSessionIDs();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetExpiredSessionIDs" : {
               "my @Sessions = $SessionObject->GetExpiredSessionIDs();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetSessionIDData" : {
               "my %Data = $SessionObject->GetSessionIDData(\n    SessionID => $SessionID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RemoveSessionByUser" : {
               "$SessionObject->RemoveSessionByUser(\n    UserLogin => 'some_user_login'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "RemoveSessionID" : {
               "$SessionObject->RemoveSessionID(SessionID => '1234567890123456');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SessionIDErrorMessage" : {
               "my $Message = $SessionObject->SessionIDErrorMessage();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "UpdateSessionID" : {
               "$SessionObject->UpdateSessionID(\n    SessionID => $SessionID,\n    Key       => 'LastScreenOverview',\n    Value     => 'SomeInfo',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SessionObject = $Kernel::OM->Get('Kernel::System::AuthSession');",
         "Package" : "Kernel::System::AuthSession"
      },
      "SignatureObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "SignatureAdd" : {
               "my $ID = $SignatureObject->SignatureAdd(\n    Name        => 'New Signature',\n    Text        => \"--\\nSome Signature Infos\",\n    ContentType => 'text/plain; charset=utf-8',\n    Comment     => 'some comment',\n    ValidID     => $ValidID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SignatureGet" : {
               "my %Signature = $SignatureObject->SignatureGet(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SignatureList" : {
               "my %List = $SignatureObject->SignatureList(\n    Valid => 0,  # optional, defaults to 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SignatureUpdate" : {
               "$SignatureObject->SignatureUpdate(\n    ID          => 123,\n    Name        => 'New Signature',\n    Text        => \"--\\nSome Signature Infos\",\n    ContentType => 'text/plain; charset=utf-8',\n    Comment     => 'some comment',\n    ValidID     => $ValidID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SignatureObject = $Kernel::OM->Get('Kernel::System::Signature');",
         "Package" : "Kernel::System::Signature"
      },
      "StandardTemplateObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "NameExistsCheck" : {
               "$Exist = $StandardTemplateObject->NameExistsCheck(\n    Name => 'Some::Template',\n    ID => 1, # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StandardTemplateAdd" : {
               "my $ID = $StandardTemplateObject->StandardTemplateAdd(\n    Name         => 'New Standard Template',\n    Template     => 'Thank you for your email.',\n    ContentType  => 'text/plain; charset=utf-8',\n    TemplateType => 'Answer',                     # or 'Forward' or 'Create'\n    ValidID      => $ValidID,\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StandardTemplateDelete" : {
               "$StandardTemplateObject->StandardTemplateDelete(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StandardTemplateGet" : {
               "my %StandardTemplate = $StandardTemplateObject->StandardTemplateGet(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StandardTemplateList" : {
               "my %StandardTemplates = $StandardTemplateObject->StandardTemplateList(\n    Valid => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %StandardTemplates = $StandardTemplateObject->StandardTemplateList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StandardTemplateLookup" : {
               "my $StandardTemplateID = $StandardTemplateObject->StandardTemplateLookup(\n    StandardTemplate => 'Std Template Name',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $StandardTemplateName = $StandardTemplateObject->StandardTemplateLookup(\n    StandardTemplateID => $StandardTemplateID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StandardTemplateUpdate" : {
               "$StandardTemplateObject->StandardTemplateUpdate(\n    ID           => 123,\n    Name         => 'New Standard Template',\n    Template     => 'Thank you for your email.',\n    ContentType  => 'text/plain; charset=utf-8',\n    TemplateType => 'Answer',\n    ValidID      => $ValidID,\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $StandardTemplateObject = $Kernel::OM->Get('Kernel::System::StandardTemplate');",
         "Package" : "Kernel::System::StandardTemplate"
      },
      "StateObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "StateAdd" : {
               "my $ID = $StateObject->StateAdd(\n    Name    => 'New State',\n    Comment => 'some comment',\n    ValidID => $ValidID,\n    TypeID  => $TypeID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateGet" : {
               "my %State = $StateObject->StateGet(\n    ID    => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %State = $StateObject->StateGet(\n    Name  => 'New State',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateGetStatesByType" : {
               "my %List = $StateObject->StateGetStatesByType(\n    Type   => 'Viewable',\n    Result => 'HASH', # HASH|ID|Name\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @List = $StateObject->StateGetStatesByType(\n    StateType => ['open', 'new'],\n    Result    => 'ID', # HASH|ID|Name\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateList" : {
               "my %List = $StateObject->StateList(\n    UserID => $UserID,\n    Valid  => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %List = $StateObject->StateList(\n    UserID => $UserID,\n    Valid  => 1, # is default\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %List = $StateObject->StateList(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateLookup" : {
               "my $State = $StateObject->StateLookup(\n    StateID => $StateID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $StateID = $StateObject->StateLookup(\n    State => 'closed successful',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateTypeList" : {
               "my %ListType = $StateObject->StateTypeList(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateTypeLookup" : {
               "my $StateType = $StateObject->StateTypeLookup(\n    StateTypeID => $StateTypeID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $StateTypeID = $StateObject->StateTypeLookup(\n    StateType => 'pending auto',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StateUpdate" : {
               "$StateObject->StateUpdate(\n    ID             => 123,\n    Name           => 'New State',\n    Comment        => 'some comment',\n    ValidID        => $ValidID,\n    TypeID         => $TypeID,\n    UserID         => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $StateObject = $Kernel::OM->Get('Kernel::System::State');",
         "Package" : "Kernel::System::State"
      },
      "StatsObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Export" : {
               "my $ExportFile = $StatsObject->Export(\n    StatID => $StatID,\n    ExportStatNumber => 1 || 0, # optional, only useful move statistics from the test system to the productive system\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetDynamicFiles" : {
               "my $FileHash = $StatsObject->GetDynamicFiles();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetObjectBehaviours" : {
               "my $Behaviours = $StatsObject->GetObjectBehaviours(\n    ObjectModule => 'Kernel::System::Stats::Dynamic::TicketList',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetObjectName" : {
               "my $ObjectName = $StatsObject->GetObjectName(\n    ObjectModule => 'Kernel::System::Stats::Dynamic::TicketList',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetParams" : {
               "my $Params = $StatsObject->GetParams( StatID => $StatID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetStaticFiles" : {
               "my $FileHash = $StatsObject->GetStaticFiles(\n    OnlyUnusedFiles => 1 | 0, # optional default 0\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetStatsList" : {
               "my $ArrayRef = $StatsObject->GetStatsList(\n    AccessRw  => 1, # Optional, indicates that user may see all statistics\n    OrderBy   => 'ID' || 'Title' || 'Object', # optional\n    Direction => 'ASC' || 'DESC',             # optional\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetStatsObjectAttributes" : {
               "my %ObjectAttributes = $StatsObject->GetStatsObjectAttributes(\n    ObjectModule => 'Ticket',\n    Use          => 'UseAsXvalue' || 'UseAsValueSeries' || 'UseAsRestriction',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Import" : {
               "my $StatID = $StatsObject->Import(\n    UserID  => $UserID,\n    Content => $UploadStuff{Content},\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectFileCheck" : {
               "my $ObjectFileCheck = $StatsObject->ObjectFileCheck(\n    Type => 'static',\n    Name => 'NewTickets',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ObjectModuleCheck" : {
               "my $ObjectModuleCheck = $StatsObject->ObjectModuleCheck(\n    StatType                     => 'static',\n    ObjectModule                 => 'Kernel::System::Stats::Static::StateAction',\n    CheckAlreadyUsedStaticObject => 1,                                             # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatNumber2StatID" : {
               "my $StatID = $StatsObject->StatNumber2StatID(\n    StatNumber => 11212,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsAdd" : {
               "my $StatID = $StatsObject->StatsAdd(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsCleanUp" : {
               "my $Result = $StatsObject->StatsCleanUp(\n    UserID => $UserID,\n\n    ObjectNames => [ 'Ticket', 'TicketList' ],\n    or\n    CheckAllObjects => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsDelete" : {
               "$StatsObject->StatsDelete( StatID => $StatID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsGet" : {
               "my $HashRef = $StatsObject->StatsGet(\n    StatID             => $StatID,\n    NoObjectAttributes => 1,       # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsInstall" : {
               "my $Result = $StatsObject->StatsInstall(\n    FilePrefix => 'FAQ',  # (optional)\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsListGet" : {
               "my $StatsRef = $StatsObject->StatsListGet(\n    AccessRw => 1, # Optional, indicates that user may see all statistics\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsResultCacheCompute" : {
               "my $StatArray = $StatsObject->StatsResultCacheCompute(\n    StatID       => $StatID,\n    UserID       => $UserID,        # target UserID\n    UserGetParam => \\%UserGetParam, # user settings of non-fixed fields\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsResultCacheGet" : {
               "my $StatArray = $StatsObject->StatsResultCacheGet(\n    StatID       => $StatID,\n    UserID       => $UserID,    # target UserID\n    UserGetParam => \\%GetParam,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsRun" : {
               "my $StatArray = $StatsObject->StatsRun(\n    StatID     => $StatID,\n    GetParam   => \\%GetParam,\n    Preview    => 1,        # optional, return fake data for preview (only for dynamic stats)\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsUninstall" : {
               "my $Result = $StatsObject->StatsUninstall(\n    FilePrefix => 'FAQ',  # (optional)\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StatsUpdate" : {
               "$StatsObject->StatsUpdate(\n    StatID => $StatID,\n    Hash   => \\%Hash,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StringAndTimestamp2Filename" : {
               "my $Filename = $StatsObject->StringAndTimestamp2Filename(\n    String   => 'Title',\n    TimeZone => 'Europe/Berlin',  # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SumBuild" : {
               "$StatArray = $StatsObject->SumBuild(\n    Array  => \\@Result,\n    SumRow => 1,\n    SumCol => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $StatsObject = $Kernel::OM->Get('Kernel::System::Stats');",
         "Package" : "Kernel::System::Stats"
      },
      "StdAttachmentObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "StdAttachmentAdd" : {
               "my $ID = $StdAttachmentObject->StdAttachmentAdd(\n    Name        => 'Some Name',\n    ValidID     => $ValidID,\n    Content     => $Content,\n    ContentType => 'text/xml',\n    Filename    => 'SomeFile.xml',\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StdAttachmentDelete" : {
               "$StdAttachmentObject->StdAttachmentDelete(\n    ID => $ID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StdAttachmentGet" : {
               "my %Data = $StdAttachmentObject->StdAttachmentGet(\n    ID => $ID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StdAttachmentList" : {
               "my %List = $StdAttachmentObject->StdAttachmentList(\n    Valid => 0,  # optional, defaults to 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StdAttachmentLookup" : {
               "my $ID = $StdAttachmentObject->StdAttachmentLookup(\n    StdAttachment => 'Some Name',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Name = $StdAttachmentObject->StdAttachmentLookup(\n    StdAttachmentID => $StdAttachmentID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StdAttachmentStandardTemplateMemberAdd" : {
               "my $Success = $StdAttachmentObject->StdAttachmentStandardTemplateMemberAdd(\n    AttachmentID       => $AttachmentID,\n    StandardTemplateID => $StandardTemplateID,\n    Active             => 1,        # optional\n    UserID             => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StdAttachmentStandardTemplateMemberList" : {
               "my %List = $StdAttachmentObject->StdAttachmentStandardTemplateMemberList(\n    AttachmentID => $AttachmentID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "or\nmy %List = $StdAttachmentObject->StdAttachmentStandardTemplateMemberList(\n    StandardTemplateID => $StandardTemplateID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "StdAttachmentUpdate" : {
               "my $ID = $StdAttachmentObject->StdAttachmentUpdate(\n    ID          => $ID,\n    Name        => 'Some Name',\n    ValidID     => $ValidID,\n    Content     => $Content,\n    ContentType => 'text/xml',\n    Filename    => 'SomeFile.xml',\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $StdAttachmentObject = $Kernel::OM->Get('Kernel::System::StdAttachment');",
         "Package" : "Kernel::System::StdAttachment"
      },
      "StorableObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Clone" : {
               "my $StorableData = $StorableObject->Clone(\n    Data => $Data,          # must be a reference\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Deserialize" : {
               "my $PerlStructureScalar = $StorableObject->Deserialize(\n    Data => $StorableString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Serialize" : {
               "my $StoableString = $StorableObject->Serialize(\n    Data => $Data,          # must be a reference,\n    Sort => 1,              # optional 1 or 0, default 0\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $StorableObject = $Kernel::OM->Get('Kernel::System::Storable');",
         "Package" : "Kernel::System::Storable"
      },
      "SupportBundleGeneratorObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Generate" : {
               "my $Result = $SupportBundleGeneratorObject->Generate();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenerateConfigurationDump" : {
               "my ( $Content, $Filename ) = $SupportBundleGeneratorObject->GenerateConfigurationDump();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenerateCustomFilesArchive" : {
               "my ( $Content, $Filename ) = $SupportBundleGeneratorObject->GenerateCustomFilesArchive();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GeneratePackageList" : {
               "my ( $Content, $Filename ) = $SupportBundleGeneratorObject->GeneratePackageList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenerateRegistrationInfo" : {
               "my ( $Content, $Filename ) = $SupportBundleGeneratorObject->GenerateRegistrationInfo();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenerateSupportData" : {
               "my ( $Content, $Filename ) = $SupportBundleGeneratorObject->GenerateSupportData();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SupportBundleGeneratorObject = $Kernel::OM->Get('Kernel::System::SupportBundleGenerator');",
         "Package" : "Kernel::System::SupportBundleGenerator"
      },
      "SupportDataCollectorObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CleanupAsynchronous" : {
               "my $Success = $SupportDataCollectorObject->CleanupAsynchronous();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Collect" : {
               "my %Result = $SupportDataCollectorObject->Collect(\n    UseCache   => 1,    # (optional) to get data from cache if any\n    WebTimeout => 60,   # (optional)\n    Debug      => 1,    # (optional)\n    Hostname   => 'my.test.host:8080' # (optional, for testing purposes)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CollectAsynchronous" : {
               "my %Result = $SupportDataCollectorObject->CollectAsynchronous();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SupportDataCollectorObject = $Kernel::OM->Get('Kernel::System::SupportDataCollector');",
         "Package" : "Kernel::System::SupportDataCollector"
      },
      "SysConfigObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ConfigurationCategoriesGet" : {
               "my %Categories = $SysConfigObject->ConfigurationCategoriesGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationDeploy" : {
               "my %Result = $SysConfigObject->ConfigurationDeploy(\n    Comments            => \"Some comments\",     # (optional)\n    NoValidation        => 0,                   # (optional) 1 or 0, default 0, skips settings validation\n    UserID              => $UserID,                 # if ExclusiveLockGUID is used, UserID must match the user that creates the lock\n    Force               => 1,                   # (optional) proceed even if lock is set to another user\n    NotDirty            => 1,                   # (optional) do not use any values from modified dirty settings\n    AllSettings         => 1,                   # (optional) use dirty modified settings from all users\n    DirtySettings       => [                    # (optional) use only this dirty modified settings from the current user\n        'SettingOne',\n        'SettingTwo',\n    ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationDeployCleanup" : {
               "my $Success = $SysConfigObject->ConfigurationDeployCleanup();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationDeployGet" : {
               "my %Deployment = $SysConfigObject->ConfigurationDeployGet(\n    DeploymentID => $DeploymentID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationDeployGetLast" : {
               "my %Deployment = $SysConfigObject->ConfigurationDeployGetLast();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationDeployList" : {
               "my @List = $SysConfigObject->ConfigurationDeployList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationDeploySettingsListGet" : {
               "my @List = $SysConfigObject->ConfigurationDeploySettingsListGet(\n    DeploymentID => $DeploymentID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationDirtySettingsList" : {
               "my @Result = $SysConfigObject->ConfigurationDirtySettingsList(\n    ChangeBy => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationDump" : {
               "my $ConfigurationDumpYAML = $SysConfigObject->ConfigurationDump(\n    OnlyValues           => 0,  # optional, default 0, dumps only the setting effective value instead of the whole setting attributes.\n    SkipDefaultSettings  => 0,  # optional, default 0, do not include default settings\n    SkipModifiedSettings => 0,  # optional, default 0, do not include modified settings\n    SkipUserSettings     => 0,  # optional, default 0, do not include user settings\n    DeploymentID         => $DeploymentID, # optional, if it is provided the modified settings are retrieved from versions\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $ConfigurationDumpYAML = $SysConfigObject->ConfigurationDump(\n    OnlyValues => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationEntitiesGet" : {
               "my %Result = $SysConfigObject->ConfigurationEntitiesGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationEntityCheck" : {
               "my @Result = $SysConfigObject->ConfigurationEntityCheck(\n    EntityType  => 'Priority',\n    EntityName  => '3 normal',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationInvalidList" : {
               "my @List = $SysConfigObject->ConfigurationInvalidList(\n    CachedOnly  => 0,   # (optional) Default 0. If enabled, system will return cached value.\n                        #                 If there is no cache yet, system will return empty list, but\n                        #                 it will also trigger async call to generate cache.\n    Undeployed  => 1,   # (optional) Default 0. Check settings that are not deployed as well.\n    NoCache     => 1,   # (optional) Default 0. If enabled, system won't check the cached value.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationIsDirtyCheck" : {
               "my $Result = $SysConfigObject->ConfigurationIsDirtyCheck(\n    UserID => $UserID,      # optional, the user that changes a modified setting\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationList" : {
               "my @SettingList = $SysConfigObject->ConfigurationList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationListGet" : {
               "my @List = $SysConfigObject->ConfigurationListGet(\n    Navigation           => 'SomeNavigationGroup',  # (optional) limit to the settings that have provided navigation\n    TargetUserID         => $TargetUserID,                      # (optional) if provided, system returns setting for particular user only,\n                                                    #       otherwise, returns global setting list\n    IsValid              => 1,                      # (optional) by default returns valid and invalid settings.\n    Invisible            => 0,                      # (optional) Include Invisible settings. By default, not included.\n    UserPreferencesGroup => 'Advanced',             # (optional) filter list by group.\n    Translate            => 0,                      # (optional) Translate translatable string in EffectiveValue. Default 0.\n    OverriddenInXML      => 1,                      # (optional) Consider changes made in Perl files. Default 0. Use it in modules only!\n    UserID               => $UserID,                      # Required if OverriddenInXML is set.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationLoad" : {
               "my $Success = $SysConfigObject->ConfigurationLoad(\n    ConfigurationYAML   => $YAMLString,     # a YAML string in the format of L<ConfigurationDump()>\n    UserID              => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationLockedSettingsList" : {
               "my @Result = $SysConfigObject->ConfigurationLockedSettingsList(\n    ExclusiveLockUserID       => $ExclusiveLockUserID, # Optional, ID of the user for which the default setting is locked\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationNavigationTree" : {
               "my %Result = $SysConfigObject->ConfigurationNavigationTree(\n    RootNavigation         => 'Parent',     # (optional) If provided only sub groups of the root navigation are returned.\n    UserModificationActive => 1,            # (optional) Return settings that can be modified on user level only.\n    IsValid                => 1,            # (optional) By default, display all settings.\n    Category               => 'OTRS'        # (optional)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationSearch" : {
               "my @Result = $SysConfigObject->ConfigurationSearch(\n    Search           => 'The search string', # (optional)\n    Category         => 'OTRS'               # (optional)\n    IncludeInvisible => 1,                   # (optional) Default 0.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationTranslatableStrings" : {
               "my @TranslatableStrings = $SysConfigObject->ConfigurationTranslatableStrings();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationTranslatedGet" : {
               "my %Result = $SysConfigObject->ConfigurationTranslatedGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ConfigurationXML2DB" : {
               "my $Success = $SysConfigObject->ConfigurationXML2DB(\n    UserID    => $UserID,                  # UserID\n    Directory => '/some/folder',     # (optional) Provide directory where XML files are stored (default: Kernel/Config/Files/XML).\n    Force     => 1,                  # (optional) Force Setting update, even if it's locked by another user. Default: 0.\n    CleanUp   => 1,                  # (optional) Remove all settings that are not present in XML files. Default: 0.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "CreateZZZAAutoBackup" : {
               "my $Success = $SysConfigObject->CreateZZZAAutoBackup();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DeleteZZZAAutoBackup" : {
               "my $Success = $SysConfigObject->DeleteZZZAAutoBackup();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ForbiddenValueTypesGet" : {
               "my %ForbiddenValueTypes = $SysConfigObject->ForbiddenValueTypesGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GlobalEffectiveValueGet" : {
               "my $EffectiveValue = $SysConfigObject->GlobalEffectiveValueGet(\n    SettingName    => 'Setting::Name',  # (required)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "OverriddenFileNameGet" : {
               "my $FileName = $SysConfigObject->OverriddenFileNameGet(\n    SettingName    => 'Setting::Name',  # (required)\n    UserID         => $UserID,                # (required)\n    EffectiveValue => '3',              # (optional) EffectiveValue stored in the DB.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingAddItem" : {
               "my %Result = $SysConfigObject->SettingAddItem(\n    SettingStructure  => [],         # (required) array that contains structure\n                                     #  where a new item should be inserted (can be empty)\n    Setting           => {           # (required) Setting hash (from SettingGet())\n        'DefaultID' => '8905',\n        'DefaultValue' => [ 'Item 1', 'Item 2' ],\n        'Description' => 'Simple array item(Min 1, Max 3).',\n        'Name' => 'TestArray',\n        ...\n    },\n    Key               => 'HashKey',  # (optional) hash key\n    IDSuffix          => '_Array3,   # (optional) suffix that will be added to all input/select fields\n                                     #    (it is used in the JS on Update, during EffectiveValue calculation)\n    Value             => [           # (optional) Perl structure\n        {\n            'Array' => [\n                'Item' => [\n                    {\n                    'Content' => 'Item 1',\n                    },\n                    ...\n                ],\n            ],\n        },\n    ],\n    AddSettingContent => 0,          # (optional) if enabled, result will be inside of div with class \"SettingContent\"\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingEffectiveValueCheck" : {
               "my %Result = $SysConfigObject->SettingEffectiveValueCheck(\n    EffectiveValue => 'open',     # (optional)\n    XMLContentParsed => {         # (required)\n        Value => [\n            {\n                'Item' => [\n                    {\n                        'Content' => \"Scalar value\",\n                    },\n                ],\n            },\n        ],\n    },\n    StoreCache            => 1,               # (optional) Store result in the Cache. Default 0.\n    SettingUID            => $SettingUID    # (required if StoreCache)\n    NoValidation          => 1,               # (optional) no value type validation.\n    CurrentSystemTime     => 1507894796935,   # (optional) Use provided 1507894796935, otherwise calculate\n    ExpireTime            => 1507894896935,   # (optional) Use provided ExpireTime for cache, otherwise calculate\n    UserID                => $UserID,               # (required) UserID\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingEffectiveValueGet" : {
               "my $Result = $SysConfigObject->SettingEffectiveValueGet(\n    Translate => 1,                      # (optional) Translate translatable strings. Default 0.\n    Value  => [                          # (required) parsed XML structure\n        {\n            'Item' => [\n                {\n                    'ValueType' => 'String',\n                    'Content' => '3600',\n                    'ValueRegex' => ''\n                },\n            ],\n        },\n        Objects => {\n            Select => { ... },\n            PerlModule => { ... },\n            # ...\n        }\n    ];\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingGet" : {
               "my %Setting = $SysConfigObject->SettingGet(\n    Name            => 'Setting::Name',  # (required) Setting name\n    Default         => 1,                # (optional) Returns the default setting attributes only\n    ModifiedID      => $ModifiedID,            # (optional) Get setting value for given ModifiedID.\n    TargetUserID    => $TargetUserID,                # (optional) Get setting value for specific user.\n    Deployed        => 1,                # (optional) Get deployed setting value. Default 0.\n    OverriddenInXML => 1,                # (optional) Consider changes made in perl files. Default 0.\n    Translate       => 1,                # (optional) Translate translatable strings in EffectiveValue. Default 0.\n    NoLog           => 1,                # (optional) Do not log error if a setting does not exist.\n    NoCache         => 1,                # (optional) Do not create cache.\n    UserID          => $UserID,                # Required only if OverriddenInXML is set.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingLock" : {
               "my $ExclusiveLockGUID = $SysConfigObject->SettingLock(\n    DefaultID => $DefaultID,                     # the ID of the setting that needs to be locked\n                                        #    or\n    Name      => 'SettingName',         # the Name of the setting that needs to be locked\n                                        #    or\n    LockAll   => 1,                     # system locks all settings\n    Force     => 1,                     # (optional) Force locking (do not check if it's already locked by another user). Default: 0.\n    UserID    => $UserID,                     # (required)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingLockCheck" : {
               "my %Result = $SysConfigObject->SettingLockCheck(\n    DefaultID           => $DefaultID,                     # the ID of the setting that needs to be checked\n    ExclusiveLockGUID   => $ExclusiveLockGUID,                     # lock GUID\n    ExclusiveLockUserID => $ExclusiveLockUserID,                     # UserID\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingNavigationToPath" : {
               "my @Path = $SysConfigObject->SettingNavigationToPath(\n    Navigation => 'Frontend::Agent::ToolBarModule',  # (optional)\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingRender" : {
               "my $HTMLStr = $SysConfigObject->SettingRender(\n    Setting   => {\n        Name             => 'Setting Name',\n        XMLContentParsed => $XMLParsedToPerl,\n        EffectiveValue   => \"Product 6\",        # or a complex structure\n        DefaultValue     => \"Product 5\",        # or a complex structure\n        IsAjax           => 1,                  # (optional) is AJAX request. Default 0.\n        # ...\n    },\n    RW => 1,                                    # (optional) Allow editing. Default 0.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingReset" : {
               "my $Result = $SysConfigObject->SettingReset(\n    Name                  => 'Setting Name',                # (required) Setting name\n    TargetUserID          => $TargetUserID,                             # (optional) UserID for settings in AgentPreferences\n                                                            # or\n    ExclusiveLockGUID     => $LockingString,                # (optional) the GUID used to locking the setting\n    UserID                => $UserID,                             # (required) UserID that creates modification\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingUnlock" : {
               "my $Success = $SysConfigObject->SettingUnlock(\n    DefaultID => $DefaultID,                     # the ID of the setting that needs to be unlocked\n                                        #   or\n    Name      => 'SettingName',         # the name of the setting that needs to be locked\n                                        #   or\n    UnlockAll => 1,                     # unlock all settings\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingUpdate" : {
               "my %Result = $SysConfigObject->SettingUpdate(\n    Name                   => 'Setting::Name',           # (required) setting name\n    IsValid                => 1,                         # (optional) 1 or 0, modified 0\n    EffectiveValue         => $SettingEffectiveValue,    # (optional)\n    UserModificationActive => 0,                         # (optional) 1 or 0, modified 0\n    TargetUserID           => $TargetUserID,                         # (optional) ID of the user for which the modified setting is meant,\n                                                         #   leave it undef for global changes.\n    ExclusiveLockGUID      => $LockingString,            # the GUID used to locking the setting\n    UserID                 => $UserID,                         # (required) UserID\n    NoValidation           => 1,                         # (optional) no value type validation.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingsSet" : {
               "my $Success = $SysConfigObject->SettingsSet(\n    UserID   => $UserID,                                      # (required) UserID\n    Comments => 'Deployment comment',                   # (optional) Comment\n    Settings => [                                       # (required) List of settings to update.\n        {\n            Name                   => 'Setting::Name',  # (required)\n            EffectiveValue         => 'Value',          # (optional)\n            IsValid                => 1,                # (optional)\n            UserModificationActive => 1,                # (optional)\n        },\n        ...\n    ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SettingsUpdatedList" : {
               "my @List = $SysConfigObject->SettingsUpdatedList(\n    Settings => [                                               # (required) List of settings that needs to be checked\n        {\n            SettingName           => 'SettingName',\n            ChangeTime            => '2017-01-13 11:23:07',\n            IsLockedByAnotherUser => 0,\n        },\n        ...\n    ],\n    UserID => $UserID,                                                # (required) Current user id\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValueAttributeList" : {
               "my @ValueAttributeList = $SysConfigObject->ValueAttributeList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SysConfigObject = $Kernel::OM->Get('Kernel::System::SysConfig');",
         "Package" : "Kernel::System::SysConfig"
      },
      "SystemAddressObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "NameExistsCheck" : {
               "my $Exists = $SystemAddressObject->NameExistsCheck(\n    Name => 'Some Address',\n    ID   => 1,                  # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressAdd" : {
               "my $ID = $SystemAddressObject->SystemAddressAdd(\n    Name     => 'info@example.com',\n    Realname => 'Hotline',\n    ValidID  => $ValidID,\n    QueueID  => $QueueID,\n    Comment  => 'some comment',\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressGet" : {
               "my %SystemAddress = $SystemAddressObject->SystemAddressGet(\n    ID => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressIsLocalAddress" : {
               "if ( $SystemAddressObject->SystemAddressIsLocalAddress( Address => 'info@example.com' ) ) {\n    # is local\n}\nelse {\n    # is not local\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressIsUsed" : {
               "my $SytemAddressIsUsed = $SystemAddressObject->SystemAddressIsUsed(\n    SystemAddressID => $SystemAddressID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressList" : {
               "my %List = $SystemAddressObject->SystemAddressList(\n    Valid => 0,  # optional, defaults to 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressLookup" : {
               "my $Name = $SystemAddressObject->SystemAddressLookup(\n    ID              => 2,\n    # or\n    SystemAddressID => $SystemAddressID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $SystemAddressID = $SystemAddressObject->SystemAddressLookup(\n    Name          => 'info@znuny.com',\n    # or\n    SystemAddress => 'info@znuny.com',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressQueueID" : {
               "my $QueueID = $SystemAddressObject->SystemAddressQueueID( Address => 'info@example.com' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressQueueList" : {
               "my %List = $SystemAddressObject->SystemAddressQueueList(\n    Valid => 0,  # optional, defaults to 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemAddressUpdate" : {
               "$SystemAddressObject->SystemAddressUpdate(\n    ID       => 1,\n    Name     => 'info@example.com',\n    Realname => 'Hotline',\n    ValidID  => $ValidID,\n    QueueID  => $QueueID,\n    Comment  => 'some comment',\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SystemAddressObject = $Kernel::OM->Get('Kernel::System::SystemAddress');",
         "Package" : "Kernel::System::SystemAddress"
      },
      "SystemDataObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "SystemDataAdd" : {
               "my $Result = $SystemDataObject->SystemDataAdd(\n    Key    => 'SomeKey',\n    Value  => 'Some Value',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Result = $SystemDataObject->SystemDataAdd(\n    Key    => 'SystemRegistration::Version',\n    Value  => 'Some Value',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemDataDelete" : {
               "$SystemDataObject->SystemDataDelete(\n    Key    => 'OTRS Version',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemDataGet" : {
               "my $SystemData = $SystemDataObject->SystemDataGet(\n    Key => 'OTRS Version',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemDataGroupGet" : {
               "my %SystemData = $SystemDataObject->SystemDataGroupGet(\n    Group => 'SystemRegistration',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemDataUpdate" : {
               "my $Result = $SystemDataObject->SystemDataUpdate(\n    Key    => 'OTRS Version',\n    Value  => 'Some New Value',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SystemDataObject = $Kernel::OM->Get('Kernel::System::SystemData');",
         "Package" : "Kernel::System::SystemData"
      },
      "SystemMaintenanceObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "SystemMaintenanceAdd" : {
               "my $ID = $SystemMaintenanceObject->SystemMaintenanceAdd(\n    StartDate        => 1485346000               # mandatory\n    StopDate         => 1485349600               # mandatory\n    Comment          => 'Comment',               # mandatory\n    LoginMessage     => 'A login message.',      # optional\n    ShowLoginMessage => 1,                       # optional\n    NotifyMessage    => 'Notification message.', # optional\n    ValidID          => $ValidID,                       # mandatory\n    UserID           => $UserID,                     # mandatory\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemMaintenanceDelete" : {
               "my $Success = $SystemMaintenanceObject->SystemMaintenanceDelete(\n    ID     => 123,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemMaintenanceGet" : {
               "my $SystemMaintenance = $SystemMaintenanceObject->SystemMaintenanceGet(\n    ID     => 123,          # mandatory\n    UserID => $UserID,          # mandatory\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemMaintenanceIsActive" : {
               "my $ActiveMaintenance = $SystemMaintenanceObject->SystemMaintenanceIsActive();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemMaintenanceIsComing" : {
               "my %SystemMaintenanceIsComing = $SystemMaintenanceObject->SystemMaintenanceIsComing();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemMaintenanceList" : {
               "my $List = $SystemMaintenanceObject->SystemMaintenanceList(\n    ValidIDs => ['1','2'],           # optional, to filter SystemMaintenances that match listed valid IDs\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemMaintenanceListGet" : {
               "my $List = $SystemMaintenanceObject->SystemMaintenanceListGet(\n    UserID   => $UserID,\n    ValidIDs => ['1','2'], # optional, to filter SystemMaintenances that match listed valid IDs\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemMaintenanceUpdate" : {
               "my $Success = $SystemMaintenanceObject->SystemMaintenanceUpdate(\n    ID               => 123,                        # mandatory\n    StartDate        => 1485346000,                 # mandatory\n    StopDate         => 1485349600,                 # mandatory\n    Comment          => 'Comment',                  # mandatory\n    LoginMessage     => 'Description',              # optional\n    ShowLoginMessage => 1,                          # optional\n    NotifyMessage    => 'Notification for showing', # optional\n    ValidID          => $ValidID,                  # mandatory\n    UserID           => $UserID,                        # mandatory\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $SystemMaintenanceObject = $Kernel::OM->Get('Kernel::System::SystemMaintenance');",
         "Package" : "Kernel::System::SystemMaintenance"
      },
      "TemplateGeneratorObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Attributes" : {
               "my %Attributes = $TemplateGeneratorObject->Attributes(\n    TicketID   => $TicketID,\n    ArticleID  => $ArticleID,\n    ResponseID => $ResponseID\n    UserID     => $UserID,\n    Action     => 'Forward', # Possible values are Reply and Forward, Reply is default.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "AutoResponse" : {
               "my %AutoResponse = $TemplateGeneratorObject->AutoResponse(\n    TicketID         => $TicketID,\n    OrigHeader       => {},\n    AutoResponseType => 'auto reply',\n    UserID           => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GenericAgentArticle" : {
               "my $GenericAgentArticle = $TemplateGeneratorObject->GenericAgentArticle(\n    Notification    => $NotificationDataHashRef,\n    TicketID        => $TicketID,\n    UserID          => $UserID,\n    Data            => $ArticleHashRef,             # Optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "NotificationEvent" : {
               "my %NotificationEvent = $TemplateGeneratorObject->NotificationEvent(\n    AppointmentID => $AppointmentID,\n    Recipient     => $UserDataHashRef,          # Agent data get result\n    Notification  => $NotificationDataHashRef,\n    UserID        => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %NotificationEvent = $TemplateGeneratorObject->NotificationEvent(\n    TicketData            => $TicketDataHashRef,\n    Recipient             => $UserDataHashRef,          # Agent or Customer data get result\n    Notification          => $NotificationDataHashRef,\n    CustomerMessageParams => $ArticleHashRef,           # optional\n    UserID                => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Salutation" : {
               "my $Salutation = $TemplateGeneratorObject->Salutation(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n    Data     => $ArticleHashRef,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Sender" : {
               "my $Sender = $TemplateGeneratorObject->Sender(\n    QueueID    => $QueueID,\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Signature" : {
               "my $Signature = $TemplateGeneratorObject->Signature(\n    QueueID => $QueueID,\n    UserID  => $UserID,\n    Data    => $ArticleHashRef,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Signature = $TemplateGeneratorObject->Signature(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n    Data     => $ArticleHashRef,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Template" : {
               "my $Template = $TemplateGeneratorObject->Template(\n    TemplateID => $TemplateID\n    TicketID   => $TicketID,                  # Optional\n    Data       => $ArticleHashRef,      # Optional\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TemplateGeneratorObject = $Kernel::OM->Get('Kernel::System::TemplateGenerator');",
         "Package" : "Kernel::System::TemplateGenerator"
      },
      "TicketAttributeRelationsObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AddTicketAttributeRelations" : {
               "my $ID = $TicketAttributeRelationsObject->AddTicketAttributeRelations(\n    Filename                 => 'csv-filename.csv',\n    Data                     => 'Data from CSV or Excel file',\n    DynamicFieldConfigUpdate => 1, # optional, this option will create dynamic field values for the CSV file\n    Priority                 => 123,\n    UserID                   => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DeleteTicketAttributeRelations" : {
               "my $Success = $TicketAttributeRelationsObject->DeleteTicketAttributeRelations(\n    ID     => 123,\n    UserID => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ExistsTicketAttributeRelationsFilename" : {
               "my $ID = $TicketAttributeRelationsObject->ExistsTicketAttributeRelationsFilename(\n    Filename => 'test1.csv',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetAllTicketAttributeRelations" : {
               "my $TicketAttributeRelations = $TicketAttributeRelationsObject->GetAllTicketAttributeRelations(\n    UserID => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetTicketAttributeRelations" : {
               "my $TicketAttributeRelations = $TicketAttributeRelationsObject->GetTicketAttributeRelations(\n    ID => 123,\n    # or\n    # Filename => 'test.csv',\n\n    UserID  => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "UpdateTicketAttributeRelations" : {
               "my $Success = $TicketAttributeRelationsObject->UpdateTicketAttributeRelations(\n    ID                       => 123,\n    Filename                 => 'csv-filename.csv',\n    Data                     => 'Data from CSV or Excel file',\n    DynamicFieldConfigUpdate => 1, # optional, this option will create dynamic field values for the csv file\n    Priority                 => 123,\n    UserID                   => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TicketAttributeRelationsObject = $Kernel::OM->Get('Kernel::System::TicketAttributeRelations');",
         "Package" : "Kernel::System::TicketAttributeRelations"
      },
      "TicketObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GetSubscribedUserIDsByQueueID" : {
               "my @UserIDs = $TicketObject->GetSubscribedUserIDsByQueueID(\n    QueueID => $QueueID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetSubscribedUserIDsByServiceID" : {
               "my @UserIDs = $TicketObject->GetSubscribedUserIDsByServiceID(\n    ServiceID => $ServiceID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetTNByString" : {
               "my $TicketNumber = $TicketObject->GetTNByString($Subject);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HistoryAdd" : {
               "my $Success = $TicketObject->HistoryAdd(\n    Name         => 'Some Comment',\n    HistoryType  => 'Move', # see system tables\n    TicketID     => $TicketID,\n    ArticleID    => $ArticleID, # not required!\n    QueueID      => $QueueID, # not required!\n    TypeID       => $TypeID, # not required!\n    CreateUserID => $CreateUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HistoryDelete" : {
               "my $Success = $TicketObject->HistoryDelete(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HistoryGet" : {
               "my @HistoryLines = $TicketObject->HistoryGet(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HistoryTicketGet" : {
               "my %HistoryData = $TicketObject->HistoryTicketGet(\n    StopYear   => 2003,\n    StopMonth  => 12,\n    StopDay    => 24,\n    StopHour   => 10, (optional, default 23)\n    StopMinute => 0,  (optional, default 59)\n    StopSecond => 0,  (optional, default 59)\n    TicketID   => $TicketID,\n    Force      => 0,     # 1: don't use cache\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HistoryTicketStatusGet" : {
               "my %Tickets = $TicketObject->HistoryTicketStatusGet(\n    StartDay   => 12,\n    StartMonth => 1,\n    StartYear  => 2006,\n    StopDay    => 18,\n    StopMonth  => 1,\n    StopYear   => 2006,\n    Force      => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "HistoryTypeLookup" : {
               "my $ID = $TicketObject->HistoryTypeLookup( Type => 'Move' );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "OwnerCheck" : {
               "my $AccessOk = $TicketObject->OwnerCheck(\n    TicketID => $TicketID,\n    OwnerID  => $OwnerID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my ($OwnerID, $Owner) = $TicketObject->OwnerCheck(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchUnknownTicketCustomers" : {
               "my $UnknownTicketCustomerList = $TicketObject->SearchUnknownTicketCustomers(\n    SearchTerm => 'SomeSearchTerm',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAccountTime" : {
               "my $Success = $TicketObject->TicketAccountTime(\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID,\n    TimeUnit  => '4.5',\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAccountedTimeGet" : {
               "my $AccountedTime = $TicketObject->TicketAccountedTimeGet(TicketID => 1234);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAcl" : {
               "$Success = $TicketObject->TicketAcl(\n    Data => {\n        1 => 'new',\n        2 => 'open',\n        # ...\n    },\n    ReturnType    => 'Ticket',\n    ReturnSubType => 'State',\n    UserID        => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketAcl(\n    Data => {                            # Values to restrict\n        1 => AgentTicketZoom,\n        # ...\n    },\n\n    Action        => 'AgentTicketZoom',           # Optional\n    TicketID      => $TicketID,                         # Optional\n    DynamicField  => {                            # Optional\n        DynamicField_NameX => 123,\n        DynamicField_NameZ => 'some value',\n    },\n\n    QueueID          => $QueueID,                      # Optional\n    Queue            => 'some queue name',        # Optional\n    NewQueueID       => $NewQueueID,                      # Optional, QueueID or NewQueueID can be\n                                                  #   used and they both refers to QueueID\n\n    ServiceID        => $ServiceID,                      # Optional\n    Service          => 'some service name',      # Optional\n\n    TypeID           => $TypeID,\n    Type             => 'some ticket type name',  # Optional\n\n    PriorityID       => $PriorityID,                      # Optional\n    NewPriorityID    => $NewPriorityID,                      # Optional, PriorityID or NewPriorityID can be\n                                                  #   used and they both refers to PriorityID\n    Priority         => 'some priority name',     # Optional\n\n    SLAID            => $SLAID,\n    SLA              => 'some SLA name',          # Optional\n\n    StateID          => $StateID,                      # Optional\n    NextStateID      => $NextStateID,                      # Optional, StateID or NextStateID can be\n                                                  #   used and they both refers to StateID\n    State            => 'some ticket state name', # Optional\n\n    OwnerID          => $OwnerID,                      # Optional\n    NewOwnerID       => $NewOwnerID,                      # Optional, OwnerID or NewOwnerID can be\n                                                  #   used and they both refers to OwnerID\n    Owner            => 'some user login'         # Optional\n\n    ResponsibleID    => $ResponsibleID,                      # Optional\n    NewResponsibleID => $NewResponsibleID,                      # Optional, ResponsibleID or NewResposibleID\n                                                  #   can be used and they both refers to\n                                                  #     ResponsibleID\n    Responsible      => 'some user login'         # Optional\n\n    ReturnType     => 'Action',                   # To match Possible, PossibleAdd or\n                                                  #   PossibleNot key in ACL\n    ReturnSubType  => '-',                        # To match Possible, PossibleAdd or\n                                                  #   PossibleNot sub-key in ACL\n\n    UserID         => $UserID,                        # UserID => 1 is not affected by this function\n    CustomerUserID => $CustomerUserID,           # UserID or CustomerUserID are mandatory\n\n    # Process Management Parameters\n    ProcessEntityID        => $ProcessEntityID,                # Optional\n    ActivityEntityID       => $ActivityEntityID,                # Optional\n    ActivityDialogEntityID => $ActivityDialogEntityID,                # Optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAclActionData" : {
               "my %AclAction = $TicketObject->TicketAclActionData();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketAclData" : {
               "my %Acl = $TicketObject->TicketAclData();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketArchiveFlagGet" : {
               "if ( $TicketObject->TicketArchiveFlagGet( TicketID => $TicketID ) ) {\n    print \"Ticket is archived!\\n\";\n}\nelse {\n    print \"Ticket is not archived!\\n\";\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketArchiveFlagSet" : {
               "my $Success = $TicketObject->TicketArchiveFlagSet(\n    ArchiveFlag => 'y',  # (y|n)\n    TicketID    => $TicketID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketArticleStorageSwitch" : {
               "my $Success = $TicketObject->TicketArticleStorageSwitch(\n    TicketID    => $TicketID,\n    Source      => 'ArticleStorageDB',\n    Destination => 'ArticleStorageFS',\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCalendarGet" : {
               "my $Calendar = $TicketObject->TicketCalendarGet(\n    QueueID => $QueueID,\n    SLAID   => $SLAID,   # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCheckForProcessType" : {
               "$TicketObject->TicketCheckForProcessType(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCheckNumber" : {
               "my $TicketID = $TicketObject->TicketCheckNumber(\n    Tn => '200404051004575',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCountByAttribute" : {
               "my $TicketCount = $TicketObject->TicketCountByAttribute(\n    Attribute => 'ServiceID',\n    TicketIDs => [ 1, 2, 3 ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCreate" : {
               "my $TicketID = $TicketObject->TicketCreate(\n    TN            => $TicketObject->TicketCreateNumber(), # optional\n    Title         => 'Some Ticket Title',\n    Queue         => 'Raw',              # or QueueID => $QueueID,\n    Lock          => 'unlock',\n    Priority      => '3 normal',         # or PriorityID => $PriorityID,\n    State         => 'new',              # or StateID => $StateID,\n    Type          => 'Incident',         # or TypeID = 1 or Ticket type default (Ticket::Type::Default), not required\n    Service       => 'Service A',        # or ServiceID => $ServiceID, not required\n    SLA           => 'SLA A',            # or SLAID => $SLAID, not required\n    CustomerID    => $CustomerID,\n    CustomerUser  => 'customer@example.com',\n    OwnerID       => $OwnerID,\n    ResponsibleID => $ResponsibleID,                # not required\n    ArchiveFlag   => 'y',                # (y|n) not required\n    UserID        => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $TicketID = $TicketObject->TicketCreate(\n    Title        => 'Some Ticket Title',\n    Queue        => 'Raw',            # or QueueID => $QueueID,\n    Lock         => 'unlock',\n    Priority     => '3 normal',       # or PriorityID => $PriorityID,\n    State        => 'new',            # or StateID => $StateID,\n    CustomerID   => $CustomerID,\n    CustomerUser => 'customer@example.com',\n    OwnerID      => $OwnerID,\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCreateNumber" : {
               "my $TicketNumber = $TicketObject->TicketCreateNumber();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCustomerPermission" : {
               "my $Access = $TicketObject->TicketCustomerPermission(\n    Type     => 'ro',\n    TicketID => $TicketID,\n    LogNo    => 1,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Access = $TicketObject->TicketCustomerPermission(\n    Type     => 'ro',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketCustomerSet" : {
               "my $Success = $TicketObject->TicketCustomerSet(\n    No       => 'client123',\n    User     => 'client-user-123',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketDeepGet" : {
               "my %Ticket = $TicketObject->TicketDeepGet(\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID, # optional\n    UserID    => $UserID,\n\n    # Also fetch all attachments for all articles of the given ticket.\n    GetAllArticleAttachments => 1, # defaults to 0\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "TicketDelete" : {
               "my $Success = $TicketObject->TicketDelete(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketEscalationDateCalculation" : {
               "my %Escalation = $TicketObject->TicketEscalationDateCalculation(\n    Ticket => $Param{Ticket},\n    UserID => $Param{UserID},\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketEscalationIndexBuild" : {
               "my $Success = $TicketObject->TicketEscalationIndexBuild(\n    TicketID => $Param{TicketID},\n    UserID   => $Param{UserID},\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketEscalationPreferences" : {
               "my %Escalation = $TicketObject->TicketEscalationPreferences(\n    Ticket => $Param{Ticket},\n    UserID => $Param{UserID},\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketFlagDelete" : {
               "my $Success = $TicketObject->TicketFlagDelete(\n    TicketID => $TicketID,\n    Key      => 'Seen',\n    AllUsers => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketFlagDelete(\n    TicketID => $TicketID,\n    Key      => 'Seen',\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketFlagGet" : {
               "my %Flags = $TicketObject->TicketFlagGet(\n    TicketID => $TicketID,\n    UserID   => $UserID,  # to get flags of one user\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @Flags = $TicketObject->TicketFlagGet(\n    TicketID => $TicketID,\n    AllUsers => 1,    # to get flags of all users\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketFlagSet" : {
               "my $Success = $TicketObject->TicketFlagSet(\n    TicketID => $TicketID,\n    Key      => 'Seen',\n    Value    => 1,\n    UserID   => $UserID, # apply to this user\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketGet" : {
               "my %Ticket = $TicketObject->TicketGet(\n    TicketID      => $TicketID,\n    DynamicFields => 0,         # Optional, default 0. To include the dynamic field values for this ticket on the return structure.\n    UserID        => $UserID,\n    Silent        => 0,         # Optional, default 0. To suppress the warning if the ticket does not exist.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Ticket = $TicketObject->TicketGet(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n    Extended => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketIDLookup" : {
               "my $TicketID = $TicketObject->TicketIDLookup(\n    TicketNumber => $TicketNumber,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketInvolvedAgentsList" : {
               "my @InvolvedAgents = $TicketObject->TicketInvolvedAgentsList(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketLockGet" : {
               "if ($TicketObject->TicketLockGet(TicketID => 123)) {\n    print \"Ticket is locked!\\n\";\n}\nelse {\n    print \"Ticket is not locked!\\n\";\n}" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketLockSet" : {
               "my $Success = $TicketObject->TicketLockSet(\n    Lock     => 'lock',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketLockSet(\n    LockID   => $LockID,\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketMerge" : {
               "my $Success = $TicketObject->TicketMerge(\n    MainTicketID  => $MainTicketID,\n    MergeTicketID => $MergeTicketID,\n    UserID        => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketMergeDynamicFields" : {
               "my $Success = $TicketObject->TicketMergeDynamicFields(\n    MainTicketID  => $MainTicketID,\n    MergeTicketID => $MergeTicketID,\n    UserID        => $UserID,\n    DynamicFields => ['DynamicField_TicketFreeText1'], # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketMergeLinkedObjects" : {
               "my $Success = $TicketObject->TicketMergeLinkedObjects(\n    MainTicketID  => $MainTicketID,\n    MergeTicketID => $MergeTicketID,\n    UserID        => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketMoveList" : {
               "my %Queues = $TicketObject->TicketMoveList(\n    QueueID => $QueueID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Queues = $TicketObject->TicketMoveList(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Queues = $TicketObject->TicketMoveList(\n    Type           => 'create',\n    CustomerUserID => $CustomerUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Queues = $TicketObject->TicketMoveList(\n    Type   => 'create',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketMoveQueueList" : {
               "my @QueueIDList = $TicketObject->TicketMoveQueueList(\n    TicketID => $TicketID,\n    Type     => 'ID',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @QueueList = $TicketObject->TicketMoveQueueList(\n    TicketID => $TicketID,\n    Type     => 'Name',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketNumberLookup" : {
               "my $TicketNumber = $TicketObject->TicketNumberLookup(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketOwnerList" : {
               "my @Owner = $TicketObject->TicketOwnerList(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketOwnerSet" : {
               "my $Success = $TicketObject->TicketOwnerSet(\n    TicketID  => $TicketID,\n    NewUserID => $NewUserID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketOwnerSet(\n    TicketID => $TicketID,\n    NewUser  => 'some-user-login',\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketPendingTimeSet" : {
               "my $Success = $TicketObject->TicketPendingTimeSet(\n    Diff     => ( 7 * 24 * 60 ),  # minutes (here: 10080 minutes - 7 days)\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketPendingTimeSet(\n    String   => '0000-00-00 00:00:00',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketPendingTimeSet(\n    String   => '2003-08-14 22:05:00',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketPendingTimeSet(\n    Year     => 0000,\n    Month    => 00,\n    Day      => 00,\n    Hour     => 00,\n    Minute   => 00,\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketPendingTimeSet(\n    Year     => 2003,\n    Month    => 08,\n    Day      => 14,\n    Hour     => 22,\n    Minute   => 05,\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketPermission" : {
               "my $Access = $TicketObject->TicketPermission(\n    Type     => 'ro',\n    TicketID => $TicketID,\n    LogNo    => 1,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Access = $TicketObject->TicketPermission(\n    Type     => 'ro',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketPriorityList" : {
               "my %Priorities = $TicketObject->TicketPriorityList(\n    QueueID => $QueueID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Priorities = $TicketObject->TicketPriorityList(\n    TicketID       => $TicketID,\n    CustomerUserID => $CustomerUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Priorities = $TicketObject->TicketPriorityList(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketPrioritySet" : {
               "my $Success = $TicketObject->TicketPrioritySet(\n    TicketID   => $TicketID,\n    PriorityID => $PriorityID,\n    UserID     => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketPrioritySet(\n    TicketID => $TicketID,\n    Priority => 'low',\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketQueueID" : {
               "my $QueueID = $TicketObject->TicketQueueID(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketQueueSet" : {
               "my $Success = $TicketObject->TicketQueueSet(\n    Queue    => 'Some Queue Name',\n    TicketID => $TicketID,\n    Comment  => 'some comment', # optional\n    ForceNotificationToUserID => [$ForceNotificationToUserID,43,56], # if you want to force somebody\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketQueueSet(\n    Queue    => 'Some Queue Name',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketQueueSet(\n    QueueID  => $QueueID,\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketResponsibleList" : {
               "my @Responsible = $TicketObject->TicketResponsibleList(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketResponsibleSet" : {
               "my $Success = $TicketObject->TicketResponsibleSet(\n    TicketID  => $TicketID,\n    NewUser   => 'some-user-login',\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketResponsibleSet(\n    TicketID  => $TicketID,\n    NewUserID => $NewUserID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketSLAList" : {
               "my %SLAs = $TicketObject->TicketSLAList(\n    QueueID   => $QueueID,\n    ServiceID => $ServiceID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %SLAs = $TicketObject->TicketSLAList(\n    ServiceID      => $ServiceID,\n    CustomerUserID => $CustomerUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %SLAs = $TicketObject->TicketSLAList(\n    ServiceID => $ServiceID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %SLAs = $TicketObject->TicketSLAList(\n    TicketID  => $TicketID,\n    ServiceID => $ServiceID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketSLASet" : {
               "my $Success = $TicketObject->TicketSLASet(\n    SLA      => 'SLA A',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketSLASet(\n    SLAID    => $SLAID,\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketSearch" : {
               "my @TicketIDs = $TicketObject->TicketSearch(\n    # result (optional, default is 'HASH')\n    Result => 'ARRAY' || 'HASH' || 'COUNT',\n\n    # limit the number of found tickets (optional, default is 10000)\n    Limit => 100,\n\n    # Use TicketSearch as a ticket filter on a single ticket,\n    # or a predefined ticket list\n    TicketID     => $TicketID,\n    TicketID     => [$TicketID, 1235],\n\n    # ticket number (optional) as STRING or as ARRAYREF\n    # The value will be treated as a SQL query expression.\n    TicketNumber => '%123546%',\n    TicketNumber => ['%123546%', '%123666%'],\n\n    # ticket title (optional) as STRING or as ARRAYREF\n    # The value will be treated as a SQL query expression.\n    # When ConditionInline is set then remaining whitespace will be treated as a && condition and\n    # and the settings of ContentSearchPrefix and ContentSearchSuffix will be honored.\n    Title => '%SomeText%',\n    Title => ['%SomeTest1%', '%SomeTest2%'],\n\n    Queues   => ['system queue', 'other queue'],\n    QueueIDs => [1, 42, 512],\n\n    # use also sub queues of Queue|Queues in search\n    UseSubQueues => 0,\n\n    # You can use types like normal, ...\n    Types   => ['normal', 'change', 'incident'],\n    TypeIDs => [3, 4],\n\n    # You can use states like new, open, pending reminder, ...\n    States   => ['new', 'open'],\n    StateIDs => [3, 4],\n\n    # (Open|Closed) tickets for all closed or open tickets.\n    StateType => 'Open',\n\n    # You also can use real state types like new, open, closed,\n    # pending reminder, pending auto, removed and merged.\n    StateType    => ['open', 'new'],\n    StateTypeIDs => [1, 2, 3],\n\n    Priorities  => ['1 very low', '2 low', '3 normal'],\n    PriorityIDs => [1, 2, 3],\n\n    Services   => ['Service A', 'Service B'],\n    ServiceIDs => [1, 2, 3],\n\n    SLAs   => ['SLA A', 'SLA B'],\n    SLAIDs => [1, 2, 3],\n\n    Locks   => ['unlock'],\n    LockIDs => [1, 2, 3],\n\n    OwnerIDs => [1, 12, 455, 32]\n\n    ResponsibleIDs => [1, 12, 455, 32]\n\n    WatchUserIDs => [1, 12, 455, 32]\n\n    # CustomerID (optional) as STRING or as ARRAYREF\n    # The value will be treated as a SQL query expression.\n    CustomerID => $CustomerID,\n    CustomerID => [$CustomerID],\n\n    # CustomerIDRaw (optional) as STRING or as ARRAYREF\n    # CustomerID without QueryCondition checking.\n    # The param CustomerID will be ignored when CustomerIDRaw is set.\n    # The raw values will be quoted and combined with 'OR' for the query.\n    CustomerIDRaw => '123 + 345',\n    CustomerIDRaw => ['123', 'ABC','123 && 456','ABC % efg'],\n\n    # CustomerUserLogin (optional) as STRING as ARRAYREF\n    # The value will be treated as a SQL query expression.\n    CustomerUserLogin => 'uid123',\n    CustomerUserLogin => ['uid123', 'uid777'],\n\n    # CustomerUserLoginRaw (optional) as STRING as ARRAYREF\n    # CustomerUserLogin without QueryCondition checking.\n    # The param CustomerUserLogin will be ignored when CustomerUserLoginRaw is set.\n    # The raw values will be quoted and combined with 'OR' for the query.\n    CustomerUserLoginRaw => 'uid',\n    CustomerUserLoginRaw => 'uid + 123',\n    CustomerUserLoginRaw => ['uid  -  123', 'uid # 777 + 321'],\n\n    # create ticket properties (optional)\n    CreatedUserIDs     => [1, 12, 455, 32]\n    CreatedTypes       => ['normal', 'change', 'incident'],\n    CreatedTypeIDs     => [1, 2, 3],\n    CreatedPriorities  => ['1 very low', '2 low', '3 normal'],\n    CreatedPriorityIDs => [1, 2, 3],\n    CreatedStates      => ['new', 'open'],\n    CreatedStateIDs    => [3, 4],\n    CreatedQueues      => ['system queue', 'other queue'],\n    CreatedQueueIDs    => [1, 42, 512],\n\n    # DynamicFields\n    #   At least one operator must be specified. Operators will be connected with AND,\n    #       values in an operator with OR.\n    #   You can also pass more than one argument to an operator: ['value1', 'value2']\n    DynamicField_FieldNameX => {\n        Empty             => 1,                       # will return dynamic fields without a value\n                                                      # set to 0 to search fields with a value present\n        Equals            => 123,\n        Like              => 'value*',                # \"equals\" operator with wildcard support\n        GreaterThan       => '2001-01-01 01:01:01',\n        GreaterThanEquals => '2001-01-01 01:01:01',\n        SmallerThan       => '2002-02-02 02:02:02',\n        SmallerThanEquals => '2002-02-02 02:02:02',\n    }" : [
                  "6.0",
                  "6.4"
               ],
               "my @TicketIDs = $TicketObject->TicketSearch(\n    # result (optional, default is 'HASH')\n    Result => 'ARRAY' || 'HASH' || 'COUNT',\n\n    # limit the number of found tickets (optional, default is 10000)\n    Limit => 100,\n\n    # Use TicketSearch as a ticket filter on a single ticket,\n    # or a predefined ticket list\n    TicketID     => $TicketID,\n    TicketID     => [$TicketID, 1235],\n\n    # ticket number (optional) as STRING or as ARRAYREF\n    # The value will be treated as a SQL query expression.\n    TicketNumber => '%123546%',\n    TicketNumber => ['%123546%', '%123666%'],\n\n    # ticket title (optional) as STRING or as ARRAYREF\n    # The value will be treated as a SQL query expression.\n    # When ConditionInline is set then remaining whitespace will be treated as a && condition and\n    # and the settings of ContentSearchPrefix and ContentSearchSuffix will be honored.\n    Title => '%SomeText%',\n    Title => ['%SomeTest1%', '%SomeTest2%'],\n\n    Queues   => ['system queue', 'other queue'],\n    QueueIDs => [1, 42, 512],\n\n    # use also sub queues of Queue|Queues in search\n    UseSubQueues => 0,\n\n    # You can use types like normal, ...\n    Types   => ['normal', 'change', 'incident'],\n    TypeIDs => [3, 4],\n\n    # You can use states like new, open, pending reminder, ...\n    States   => ['new', 'open'],\n    StateIDs => [3, 4],\n\n    # (Open|Closed) tickets for all closed or open tickets.\n    StateType => 'Open',\n\n    # You also can use real state types like new, open, closed,\n    # pending reminder, pending auto, removed and merged.\n    StateType    => ['open', 'new'],\n    StateTypeIDs => [1, 2, 3],\n\n    Priorities  => ['1 very low', '2 low', '3 normal'],\n    PriorityIDs => [1, 2, 3],\n\n    Services   => ['Service A', 'Service B'],\n    ServiceIDs => [1, 2, 3],\n\n    SLAs   => ['SLA A', 'SLA B'],\n    SLAIDs => [1, 2, 3],\n\n    Locks   => ['unlock'],\n    LockIDs => [1, 2, 3],\n\n    OwnerIDs => [1, 12, 455, 32]\n\n    ResponsibleIDs => [1, 12, 455, 32]\n\n    WatchUserIDs => [1, 12, 455, 32]\n\n    # CustomerID (optional) as STRING or as ARRAYREF\n    # The value will be treated as a SQL query expression.\n    CustomerID => $CustomerID,\n    CustomerID => [$CustomerID],\n\n    # CustomerIDRaw (optional) as STRING or as ARRAYREF\n    # CustomerID without QueryCondition checking.\n    # The param CustomerID will be ignored when CustomerIDRaw is set.\n    # The raw values will be quoted and combined with 'OR' for the query.\n    CustomerIDRaw => '123 + 345',\n    CustomerIDRaw => ['123', 'ABC','123 && 456','ABC % efg'],\n\n    # CustomerUserLogin (optional) as STRING as ARRAYREF\n    # The value will be treated as a SQL query expression.\n    CustomerUserLogin => 'uid123',\n    CustomerUserLogin => ['uid123', 'uid777'],\n\n    # CustomerUserLoginRaw (optional) as STRING as ARRAYREF\n    # CustomerUserLogin without QueryCondition checking.\n    # The param CustomerUserLogin will be ignored when CustomerUserLoginRaw is set.\n    # The raw values will be quoted and combined with 'OR' for the query.\n    CustomerUserLoginRaw => 'uid',\n    CustomerUserLoginRaw => 'uid + 123',\n    CustomerUserLoginRaw => ['uid  -  123', 'uid # 777 + 321'],\n\n    # create ticket properties (optional)\n    CreatedUserIDs     => [1, 12, 455, 32]\n    CreatedTypes       => ['normal', 'change', 'incident'],\n    CreatedTypeIDs     => [1, 2, 3],\n    CreatedPriorities  => ['1 very low', '2 low', '3 normal'],\n    CreatedPriorityIDs => [1, 2, 3],\n    CreatedStates      => ['new', 'open'],\n    CreatedStateIDs    => [3, 4],\n    CreatedQueues      => ['system queue', 'other queue'],\n    CreatedQueueIDs    => [1, 42, 512],\n\n    # DynamicFields\n    #   At least one operator must be specified. Operators will be connected with AND,\n    #       values in an operator with OR.\n    #   You can also pass more than one argument to an operator: ['value1', 'value2']\n    DynamicField_FieldNameX => {\n        Empty             => 1,                       # will return dynamic fields without a value\n                                                      # set to 0 to search fields with a value present\n        Equals            => 123,\n        Like              => 'value*',                # \"equals\" operator with wildcard support\n        GreaterThan       => '2001-01-01 01:01:01',\n        GreaterThanEquals => '2001-01-01 01:01:01',\n        SmallerThan       => '2002-02-02 02:02:02',\n        SmallerThanEquals => '2002-02-02 02:02:02',\n    },\n\n    # User ID for searching tickets by ticket flags (optional, defaults to UserID)\n    TicketFlagUserID => $TicketFlagUserID,\n\n    # search for ticket flags\n    TicketFlag => {\n        Seen => 1,\n    },\n\n    # search for ticket flag that is absent, or a different value than the\n    # one given:\n    NotTicketFlag => {\n        Seen => 1,\n    },\n\n    # User ID for searching tickets by article flags (optional, defaults to UserID)\n    ArticleFlagUserID => $ArticleFlagUserID,\n\n\n    # search for tickets by the presence of flags on articles\n    ArticleFlag => {\n        Important => 1,\n    },\n\n    # article stuff (optional)\n    MIMEBase_From    => '%spam@example.com%',\n    MIMEBase_To      => '%service@example.com%',\n    MIMEBase_Cc      => '%client@example.com%',\n    MIMEBase_Subject => '%VIRUS 32%',\n    MIMEBase_Body    => '%VIRUS 32%',\n\n    # attachment stuff (optional, applies only for ArticleStorageDB)\n    AttachmentName => '%anyfile.txt%',\n\n    # use full article text index if configured (optional, defaults to off)\n    FullTextIndex => 1,\n\n    # article content search (AND or OR for From, To, Cc, Subject and Body) (optional, defaults to 'AND')\n    ContentSearch => 'AND',\n\n    # article content search prefix (for From, To, Cc, Subject and Body) (optional, defaults to '*')\n    # For Title the default is the empty string.\n    ContentSearchPrefix => '*',\n\n    # article content search suffix (for From, To, Cc, Subject and Body) (optional, defaults to '*')\n    # For Title the default is the empty string.\n    ContentSearchSuffix => '*',\n\n    # content conditions for From, To, Cc, Subject, Body,\n    # and Title (all optional)\n    # For Title it also activates ContentSearchPrefix and ContentSearchSuffix,\n    ConditionInline => 1,\n\n    # articles created more than 60 minutes ago (article older than 60 minutes) (optional)\n    ArticleCreateTimeOlderMinutes => 60,\n    # articles created less than 120 minutes ago (article newer than 60 minutes) (optional)\n    ArticleCreateTimeNewerMinutes => 120,\n\n    # articles with create time after ... (article newer than this date) (optional)\n    ArticleCreateTimeNewerDate => '2006-01-09 00:00:01',\n    # articles with created time before ... (article older than this date) (optional)\n    ArticleCreateTimeOlderDate => '2006-01-19 23:59:59',\n\n    # tickets created more than 60 minutes ago (ticket older than 60 minutes)  (optional)\n    TicketCreateTimeOlderMinutes => 60,\n    # tickets created less than 120 minutes ago (ticket newer than 120 minutes) (optional)\n    TicketCreateTimeNewerMinutes => 120,\n\n    # tickets with create time after ... (ticket newer than this date) (optional)\n    TicketCreateTimeNewerDate => '2006-01-09 00:00:01',\n    # tickets with created time before ... (ticket older than this date) (optional)\n    TicketCreateTimeOlderDate => '2006-01-19 23:59:59',\n\n    # ticket history entries that created more than 60 minutes ago (optional)\n    TicketChangeTimeOlderMinutes => 60,\n    # ticket history entries that created less than 120 minutes ago (optional)\n    TicketChangeTimeNewerMinutes => 120,\n\n    # ticket history entry create time after ... (ticket history entries newer than this date) (optional)\n    TicketChangeTimeNewerDate => '2006-01-09 00:00:01',\n    # ticket history entry create time before ... (ticket history entries older than this date) (optional)\n    TicketChangeTimeOlderDate => '2006-01-19 23:59:59',\n\n    # tickets changed more than 60 minutes ago (optional)\n    TicketLastChangeTimeOlderMinutes => 60,\n    # tickets changed less than 120 minutes ago (optional)\n    TicketLastChangeTimeNewerMinutes => 120,\n\n    # tickets with changed time after ... (ticket changed newer than this date) (optional)\n    TicketLastChangeTimeNewerDate => '2006-01-09 00:00:01',\n    # tickets with changed time before ... (ticket changed older than this date) (optional)\n    TicketLastChangeTimeOlderDate => '2006-01-19 23:59:59',\n\n    # tickets closed more than 60 minutes ago (optional)\n    TicketCloseTimeOlderMinutes => 60,\n    # tickets closed less than 120 minutes ago (optional)\n    TicketCloseTimeNewerMinutes => 120,\n\n    # tickets with closed time after ... (ticket closed newer than this date) (optional)\n    TicketCloseTimeNewerDate => '2006-01-09 00:00:01',\n    # tickets with closed time before ... (ticket closed older than this date) (optional)\n    TicketCloseTimeOlderDate => '2006-01-19 23:59:59',\n\n    # tickets with last close time more than 60 minutes ago (optional)\n    TicketLastCloseTimeOlderMinutes => 60,\n    # tickets with last close time less than 120 minutes ago (optional)\n    TicketLastCloseTimeNewerMinutes => 120,\n\n    # tickets with last close time after ... (ticket last close newer than this date) (optional)\n    TicketLastCloseTimeNewerDate => '2006-01-09 00:00:01',\n    # tickets with last close time before ... (ticket last close older than this date) (optional)\n    TicketLastCloseTimeOlderDate => '2006-01-19 23:59:59',\n\n    # tickets with pending time of more than 60 minutes ago (optional)\n    TicketPendingTimeOlderMinutes => 60,\n    # tickets with pending time of less than 120 minutes ago (optional)\n    TicketPendingTimeNewerMinutes => 120,\n\n    # tickets with pending time after ... (optional)\n    TicketPendingTimeNewerDate => '2006-01-09 00:00:01',\n    # tickets with pending time before ... (optional)\n    TicketPendingTimeOlderDate => '2006-01-19 23:59:59',\n\n    # you can use all following escalation options with this four different ways of escalations\n    # TicketEscalationTime...\n    # TicketEscalationUpdateTime...\n    # TicketEscalationResponseTime...\n    # TicketEscalationSolutionTime...\n\n    # ticket escalation time of more than 60 minutes ago (optional)\n    TicketEscalationTimeOlderMinutes => -60,\n    # ticket escalation time of less than 120 minutes ago (optional)\n    TicketEscalationTimeNewerMinutes => -120,\n\n    # tickets with escalation time after ... (optional)\n    TicketEscalationTimeNewerDate => '2006-01-09 00:00:01',\n    # tickets with escalation time before ... (optional)\n    TicketEscalationTimeOlderDate => '2006-01-09 23:59:59',\n\n    # search in archive (optional)\n    # if archiving is on, if not specified the search processes unarchived only\n    # 'y' searches archived tickets, 'n' searches unarchived tickets\n    # if specified together all tickets are searched\n    ArchiveFlags => ['y', 'n'],\n\n    # OrderBy (optional, default is 'Down')\n    OrderBy => 'Down',  # Down|Up\n    # SortBy (optional, default is 'Age')\n    SortBy  => 'Age',   # Created|Owner|Responsible|CustomerID|State|TicketNumber|Queue|Priority|Age|Type|Lock\n                        # Changed|Title|Service|SLA|PendingTime|EscalationTime\n                        # EscalationUpdateTime|EscalationResponseTime|EscalationSolutionTime\n                        # DynamicField_FieldNameX\n\n    # OrderBy and SortBy as ARRAY for sub sorting (optional)\n    OrderBy => ['Down', 'Up'],\n    SortBy  => ['Priority', 'Age'],\n\n    # user search (UserID is required)\n    UserID     => $UserID,\n    Permission => 'ro' || 'rw', # optional, default is 'ro'\n\n    # customer search (CustomerUserID is required)\n    CustomerUserID => $CustomerUserID,\n    Permission     => 'ro' || 'rw', # optional, default is 'ro'\n\n    # CacheTTL, cache search result in seconds (optional, the default is four minutes)\n    CacheTTL => 60 * 15,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "TicketServiceList" : {
               "my %Services = $TicketObject->TicketServiceList(\n    CustomerUserID => $CustomerUserID,\n    QueueID        => $QueueID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Services = $TicketObject->TicketServiceList(\n    CustomerUserID => $CustomerUserID,\n    TicketID       => $TicketID,\n    UserID         => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Services = $TicketObject->TicketServiceList(\n    QueueID        => $QueueID,\n    UserID         => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketServiceSet" : {
               "my $Success = $TicketObject->TicketServiceSet(\n    Service  => 'Service A',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketServiceSet(\n    ServiceID => $ServiceID,\n    TicketID  => $TicketID,\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketStateList" : {
               "my %States = $TicketObject->TicketStateList(\n    QueueID => $QueueID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %States = $TicketObject->TicketStateList(\n    TicketID       => $TicketID,\n    CustomerUserID => $CustomerUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %States = $TicketObject->TicketStateList(\n    TicketID => $TicketID,\n    Type     => 'open',\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %States = $TicketObject->TicketStateList(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketStateSet" : {
               "my $Success = $TicketObject->TicketStateSet(\n    State     => 'open',\n    TicketID  => $TicketID,\n    ArticleID => $ArticleID, #optional, for history\n    UserID    => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketStateSet(\n    StateID  => $StateID,\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketSubjectBuild" : {
               "my $NewSubject = $TicketObject->TicketSubjectBuild(\n    TicketNumber => $TicketNumber,\n    Subject      => $OldSubject,\n    Action       => 'Forward', # Possible values are Reply and Forward, Reply is default.\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $NewSubject = $TicketObject->TicketSubjectBuild(\n    TicketNumber => $TicketNumber,\n    Subject      => $OldSubject,\n    Action       => 'Reply',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $NewSubject = $TicketObject->TicketSubjectBuild(\n    TicketNumber => $TicketNumber,\n    Subject      => $OldSubject,\n    Type         => 'New',\n    Action       => 'Reply',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $NewSubject = $TicketObject->TicketSubjectBuild(\n    TicketNumber => $TicketNumber,\n    Subject      => $OldSubject,\n    Type         => 'New',\n    NoCleanup    => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketSubjectClean" : {
               "my $NewSubject = $TicketObject->TicketSubjectClean(\n    TicketNumber => $TicketNumber,\n    Subject      => $OldSubject,\n    Size         => $SubjectSizeToBeDisplayed   # optional, if 0 do not cut subject\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketTitleUpdate" : {
               "my $Success = $TicketObject->TicketTitleUpdate(\n    Title    => 'Some Title',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketTypeList" : {
               "my %Types = $TicketObject->TicketTypeList(\n    CustomerUserID => $CustomerUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Types = $TicketObject->TicketTypeList(\n    QueueID => $QueueID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Types = $TicketObject->TicketTypeList(\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Types = $TicketObject->TicketTypeList(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketTypeSet" : {
               "my $Success = $TicketObject->TicketTypeSet(\n    Type     => 'normal',\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Success = $TicketObject->TicketTypeSet(\n    TypeID   => $TypeID,\n    TicketID => $TicketID,\n    UserID   => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketUnlockTimeoutUpdate" : {
               "my $Success = $TicketObject->TicketUnlockTimeoutUpdate(\n    UnlockTimeout => $Epoch,\n    TicketID      => $TicketID,\n    UserID        => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketWatchGet" : {
               "my %Watch = $TicketObject->TicketWatchGet(\n    TicketID => $TicketID,\n    Notify   => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Watch = $TicketObject->TicketWatchGet(\n    TicketID => $TicketID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @Watch = $TicketObject->TicketWatchGet(\n    TicketID => $TicketID,\n    Result   => 'ARRAY',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketWatchSubscribe" : {
               "my $Success = $TicketObject->TicketWatchSubscribe(\n    TicketID    => $TicketID,\n    WatchUserID => $WatchUserID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TicketWatchUnsubscribe" : {
               "my $Success = $TicketObject->TicketWatchUnsubscribe(\n    TicketID    => $TicketID,\n    WatchUserID => $WatchUserID,\n    UserID      => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TicketObject = $Kernel::OM->Get('Kernel::System::Ticket');",
         "Package" : "Kernel::System::Ticket"
      },
      "TicketToUnitTestObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CreateUnitTest" : {
               "my $Output = $TicketToUnitTestObject->CreateUnitTest(\n    TicketID => $TicketID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetCreateObjects" : {
               "my $Output = $TicketToUnitTestObject->GetCreateObjects();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetFooter" : {
               "my $Output = $TicketToUnitTestObject->GetFooter();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetHeader" : {
               "my $Output = $TicketToUnitTestObject->GetHeader();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetNeededObjects" : {
               "my $Output = $TicketToUnitTestObject->GetNeededObjects();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetTicketAttributes" : {
               "my %TicketAttributes = $TicketToUnitTestObject->GetTicketAttributes(\n    TicketAttributes => \\%TicketAttributes,\n    HistoryTicket    => \\%HistoryTicket,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "HistoryTicketGet" : {
               "my %HistoryData = $TicketToUnitTestObject->HistoryTicketGet(\n    StopYear   => 2003,\n    StopMonth  => 12,\n    StopDay    => 24,\n    StopHour   => 10, (optional, default 23)\n    StopMinute => 0,  (optional, default 59)\n    StopSecond => 0,  (optional, default 59)\n    TicketID   => $TicketID,\n    Force      => 0,     # 1: don't use cache\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "SystemTimeTicketGet" : {
               "my %HistoryData = $TicketToUnitTestObject->SystemTimeTicketGet(\n    SystemTime => 19435456436,\n    TicketID   => $TicketID,\n    Force      => 0, # cache\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TicketToUnitTestObject = $Kernel::OM->Get('Kernel::System::UnitTest::TicketToUnitTest');",
         "Package" : "Kernel::System::UnitTest::TicketToUnitTest"
      },
      "TimeAccountingWebserviceObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "TimeAccountingSearch" : {
               "my @TimeAccountingEntries = $TimeAccountingWebserviceObject->TimeAccountingSearch(\n    Start  => '2017-01-01 10:00:00',\n    End    => '2018-01-01 10:00:00',\n    UserID => $UserID,\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TimeAccountingWebserviceObject = $Kernel::OM->Get('Kernel::System::TimeAccountingWebservice');",
         "Package" : "Kernel::System::TimeAccountingWebservice"
      },
      "TimeObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CurrentTimestamp" : {
               "my $TimeStamp = $TimeObject->CurrentTimestamp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Date2SystemTime" : {
               "my $SystemTime = $TimeObject->Date2SystemTime(\n    Year   => 2004,\n    Month  => 8,\n    Day    => 14,\n    Hour   => 22,\n    Minute => 45,\n    Second => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "DestinationTime" : {
               "my $DestinationTime = $TimeObject->DestinationTime(\n    StartTime => $Created,\n    Time      => 60*60*24*2,\n    Calendar  => 3, # '' is default\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $DestinationTime = $TimeObject->DestinationTime(\n    StartTime => $Created,\n    Time      => 60*60*24*2,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "MailTimeStamp" : {
               "my $MailTimeStamp = $TimeObject->MailTimeStamp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ServerLocalTimeOffsetSeconds" : {
               "my $ServerLocalTimeOffsetSeconds = $TimeObject->ServerLocalTimeOffsetSeconds(\n    SystemTime => $SystemTime,  # optional, otherwise call time()\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemTime" : {
               "my $SystemTime = $TimeObject->SystemTime();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemTime2Date" : {
               "my ($Sec, $Min, $Hour, $Day, $Month, $Year, $WeekDay) = $TimeObject->SystemTime2Date(\n    SystemTime => $TimeObject->SystemTime(),\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SystemTime2TimeStamp" : {
               "my $TimeStamp = $TimeObject->SystemTime2TimeStamp(\n    SystemTime => $SystemTime,\n    Type       => 'Short',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $TimeStamp = $TimeObject->SystemTime2TimeStamp(\n    SystemTime => $SystemTime,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TimeStamp2SystemTime" : {
               "my $SystemTime = $TimeObject->TimeStamp2SystemTime(\n    String => '2004-08-14 22:45:00',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "VacationCheck" : {
               "$TimeObject->VacationCheck(\n    Year     => 2005,\n    Month    => 7 || '07',\n    Day      => 13,\n    Calendar => 3, # '' is default; 0 is handled like ''\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$TimeObject->VacationCheck(\n    Year     => 2005,\n    Month    => 7 || '07',\n    Day      => 13,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WorkingTime" : {
               "my $WorkingTime = $TimeObject->WorkingTime(\n    StartTime => $Created,\n    StopTime  => $TimeObject->SystemTime(),\n    Calendar  => 3, # '' is default\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $WorkingTime = $TimeObject->WorkingTime(\n    StartTime => $Created,\n    StopTime  => $TimeObject->SystemTime(),\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TimeObject = $Kernel::OM->Get('Kernel::System::DateTime');",
         "Package" : "Kernel::System::DateTime"
      },
      "TransitionActionObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "TransitionActionGet" : {
               "my $TransitionAction = $TransitionActionObject->TransitionActionGet(\n    TransitionActionEntityID => $TransitionActionEntityID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TransitionActionList" : {
               "my $TransitionActionList = $TransitionActionObject->TransitionActionList(\n    TransitionActionEntityID => [$TransitionActionEntityID,],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TransitionActionObject = $Kernel::OM->Get('Kernel::System::ProcessManagement::TransitionAction');",
         "Package" : "Kernel::System::ProcessManagement::TransitionAction"
      },
      "TransitionObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "TransitionCheck" : {
               "my $TransitionCheck = $TransitionObject->TransitionCheck(\n    TransitionEntityID => $TransitionEntityID,\n    or\n    TransitionEntityID => [$TransitionEntityID],\n    Data       => {\n        Queue         => 'Raw',\n        DynamicField1 => 'Value',\n        Subject       => 'Testsubject',\n        ...\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TransitionGet" : {
               "my $Transition = $TransitionObject->TransitionGet(\n    TransitionEntityID => $TransitionEntityID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TransitionValidationTypeList" : {
               "my %TransitionValidationTypeList = $TransitionObject->TransitionValidationTypeList();" : [
                  "6.4",
                  "6.5"
               ],
               "my %TransitionValidationTypeList = TransitionValidationTypeList(\n    'String' => 'String',\n    'Regexp' => 'Regular expression',\n    'Module' => 'Transition validation module',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "TransitionValidationTypeListGet" : {
               "my %TransitionValidationTypeListGet = $TransitionObject->TransitionValidationTypeListGet();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TransitionObject = $Kernel::OM->Get('Kernel::System::ProcessManagement::Transition');",
         "Package" : "Kernel::System::ProcessManagement::Transition"
      },
      "TypeObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "NameExistsCheck" : {
               "$Exist = $TypeObject->NameExistsCheck(\n    Name => 'Some::Template',\n    ID => 1, # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeAdd" : {
               "my $ID = $TypeObject->TypeAdd(\n    Name    => 'New Type',\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeGet" : {
               "my %Type = $TypeObject->TypeGet(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %Type = $TypeObject->TypeGet(\n    Name => 'default',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeList" : {
               "my %List = $TypeObject->TypeList(\n    Valid => 0,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %List = $TypeObject->TypeList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeLookup" : {
               "my $Type = $TypeObject->TypeLookup( TypeID => $TypeID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $TypeID = $TypeObject->TypeLookup( Type => $Type );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TypeUpdate" : {
               "$TypeObject->TypeUpdate(\n    ID      => 123,\n    Name    => 'New Type',\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $TypeObject = $Kernel::OM->Get('Kernel::System::Type');",
         "Package" : "Kernel::System::Type"
      },
      "UnitTestEmailObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "EmailGet" : {
               "my @Emails = $UnitTestEmailObject->EmailGet();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "EmailSentCount" : {
               "$UnitTestEmailObject->EmailSentCount(\n    UnitTestObject => $Self,\n    Count          => 3,                               # Expected number of sent emails\n    Message        => '3 emails must have been sent.', # Message printed for unit test\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "EmailValidate" : {
               "my $Success = $UnitTestEmailObject->EmailValidate(\n    UnitTestObject => $Self,\n    UnitTestFalse  => 1,                                         # optional, validation should get negated\n    Message        => 'Sent emails must contain expected data.', # Message printed for unit test\n    Email          => \\@Emails,                                  # optional, result of EmailGet() will be used by default\n    Header         => qr{To\\:\\sto\\@test.com}xms,                 # Regex or array of regexes that the headers of the sent emails have to match\n                                                                 #    example: [ qr{To\\:\\sto\\@test.com}xms, qr{To\\:\\scc\\@test.com}xms, ],\n    Body           => qr{Hello [ ] World}xms,                    # Regex or string that the body of the sent emails have to match\n    ToArray        => 'email1realrecipient1@test.com',           # Array of strings, string, array of regexes or regex with recipients the sent emails have to match\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MailBackendSetup" : {
               "my $Success = $UnitTestEmailObject->MailBackendSetup();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MailCleanup" : {
               "my $Success = $UnitTestEmailObject->MailCleanup();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MailObjectDiscard" : {
               "my $Success = $UnitTestEmailObject->MailObjectDiscard();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $UnitTestEmailObject = $Kernel::OM->Get('Kernel::System::UnitTest::Email');",
         "Package" : "Kernel::System::UnitTest::Email"
      },
      "UnitTestITSMConfigItemObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ConfigItemCreate" : {
               "my $VersionRef = $UnitTestITSMConfigItemObject->ConfigItemCreate(\n    Name          => 'Znuny Rack 42',\n    ClassName     => 'Server',\n    DeplStateName => 'Production',\n    InciStateName => 'Operational',\n    XMLData       => {\n        OtherEquipment         => '...',\n        Note                   => '...',\n        SerialNumber           => '...',\n        WarrantyExpirationDate => '2016-01-01',\n        InstallDate            => '2016-01-01',\n    },\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $UnitTestITSMConfigItemObject = $Kernel::OM->Get('Kernel::System::UnitTest::ITSMConfigItem');",
         "Package" : "Kernel::System::UnitTest::ITSMConfigItem"
      },
      "UnitTestObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "AttachSeleniumScreenshot" : {
               "$Self->AttachSeleniumScreenshot(\n    Filename => $Filename,\n    Content  => $Data               # raw image data\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "False" : {
               "$Self->False(\n    $TestValue,\n    'Test Name',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$Self->False($ParamA, 'Test Name');" : [
                  "6.4",
                  "6.5"
               ],
               "$Self->False(1, 'Test Name');" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Is" : {
               "$Self->Is(\n    $ValueFromFunction,      # test data\n    1,                       # expected value\n    'Test Name',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$Self->Is($A, $B, 'Test Name');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $IsResult = $Self->Is(\n    $ValueFromFunction,      # test data\n    1,                       # expected value\n    'Test Name',\n);" : [
                  "6.0"
               ]
            },
            "IsDeeply" : {
               "$Self->IsDeeply(\n    \\%ResultHash,           # test data\n    \\%ExpectedHash,         # expected value\n    'Dummy Test Name',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$Self->IsDeeply($ParamA, $ParamB, 'Test Name');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $IsDeeplyResult = $Self->IsDeeply(\n    \\%ResultHash,           # test data\n    \\%ExpectedHash,         # expected value\n    'Dummy Test Name',\n);" : [
                  "6.0"
               ]
            },
            "IsNot" : {
               "$Self->IsNot(\n    $ValueFromFunction,      # test data\n    1,                       # expected value\n    'Test Name',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$Self->IsNot($A, $B, 'Test Name');" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsNotDeeply" : {
               "$Self->IsNotDeeply(\n    \\%ResultHash,           # test data\n    \\%ExpectedHash,         # expected value\n    'Dummy Test Name',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$Self->IsNotDeeply($ParamA, $ParamB, 'Test Name');" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Run" : {
               "$Self->Run(\n    Name                   => ['JSON', 'User'],     # optional, execute certain test files only\n    Directory              => 'Selenium',           # optional, execute tests in subdirectory\n    Verbose                => 1,                    # optional (default 0), only show result details for all tests, not just failing\n    SubmitURL              => $URL,                 # optional, send results to unit test result server\n    SubmitAuth             => '0abc86125f0fd37baae' # optional authentication string for unit test result server\n    SubmitResultAsExitCode => 1,                    # optional, specify if exit code should not indicate if tests were ok/not ok, but if submission was successful instead\n    JobID                  => $JobID,                   # optional job ID for unit test submission to server\n    Scenario               => 'OTRS 6 git',         # optional scenario identifier for unit test submission to server\n    PostTestScripts        => ['...'],              # Script(s) to execute after a test has been run.\n                                                    #  You can specify %File%, %TestOk% and %TestNotOk% as dynamic arguments.\n    PreSubmitScripts       => ['...'],              # Script(s) to execute after all tests have been executed\n                                                    #  and the results are about to be sent to the server.\n    NumberOfTestRuns       => 10,                   # optional (default 1), number of successive runs for every single unit test\n);" : [
                  "6.0"
               ],
               "$Self->Run(\n    Tests                  => ['JSON', 'User'],             # optional, execute certain test files only\n    Directory              => ['Selenium', 'User'],         # optional, execute tests in subdirectory\n    ExcludeDirectory       => ['Selenium/Agent/Admin'],     # optional, all test files in the specified directory will be Excluded.\n    SOPMFile               => ['ITSMCore.sopm'],            # optional, execute all test files which are defined in these sopm.\n    Verbose                => 1,                            # optional (default 0), only show result details for all tests, not just failing\n    SubmitURL              => $URL,                         # optional, send results to unit test result server\n    SubmitAuth             => $SubmitAuth,                  # optional authentication string for unit test result server\n    SubmitResultAsExitCode => 1,                            # optional, specify if exit code should not indicate if tests were ok/not ok, but if submission was successful instead\n    JobID                  => $JobID,                           # optional job ID for unit test submission to server\n    Scenario               => 'Znuny 6 git',                # optional scenario identifier for unit test submission to server\n    PostTestScripts        => ['...'],                      # Script(s) to execute after a test has been run.\n                                                            #  You can specify %File%, %TestOk% and %TestNotOk% as dynamic arguments.\n    PreSubmitScripts       => ['...'],                      # Script(s) to execute after all tests have been executed\n                                                            #  and the results are about to be sent to the server.\n    NumberOfTestRuns       => 10,                           # optional (default 1), number of successive runs for every single unit test\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$Self->Run(\n    Tests                  => ['JSON', 'User'],             # optional, execute certain test files only\n    Directory              => ['Selenium', 'User'],         # optional, execute tests in subdirectory\n    ExcludeDirectory       => ['Selenium/Agent/Admin'],     # optional, all test files in the specified directory will be Excluded.\n    SOPMFile               => ['ITSMCore.sopm'],            # optional, execute all test files which are defined in these sopm.\n    Verbose                => 1,                            # optional (default 0), only show result details for all tests, not just failing\n    SubmitURL              => $URL,                         # optional, send results to unit test result server\n    SubmitAuth             => '0abc86125f0fd37baae'         # optional authentication string for unit test result server\n    SubmitResultAsExitCode => 1,                            # optional, specify if exit code should not indicate if tests were ok/not ok, but if submission was successful instead\n    JobID                  => $JobID,                           # optional job ID for unit test submission to server\n    Scenario               => 'Znuny 6 git',                # optional scenario identifier for unit test submission to server\n    PostTestScripts        => ['...'],                      # Script(s) to execute after a test has been run.\n                                                            #  You can specify %File%, %TestOk% and %TestNotOk% as dynamic arguments.\n    PreSubmitScripts       => ['...'],                      # Script(s) to execute after all tests have been executed\n                                                            #  and the results are about to be sent to the server.\n    NumberOfTestRuns       => 10,                           # optional (default 1), number of successive runs for every single unit test\n);" : [
                  "6.4"
               ]
            },
            "True" : {
               "$Self->True(\n    $TestValue,\n    'Test Name',\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$Self->True($ParamA, 'Test Name');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$Self->True(1, 'Test Name');" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $TrueResult = $Self->True(\n    $TestValue,\n    'Test Name',\n);" : [
                  "6.0"
               ]
            }
         },
         "ObjectManager" : "my $DriverObject = $Kernel::OM->Create(\n        'Kernel::System::UnitTest::Driver',\n        ObjectParams => {\n            Verbose => $Self->{Verbose},\n            ANSI    => $Self->{ANSI},\n        },\n    );",
         "Package" : "Kernel::System::UnitTest::Driver"
      },
      "UnitTestParamObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ParamSet" : {
               "my $Success = $UnitTestParamObject->ParamSet(\n    Name  => 'Upload',\n    Value => '...',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ParamUploadSet" : {
               "my $Success = $UnitTestParamObject->ParamUploadSet(\n    Name     => 'Upload',\n    Location => '...',\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $UnitTestParamObject = $Kernel::OM->Get('Kernel::System::UnitTest::Param');",
         "Package" : "Kernel::System::UnitTest::Param"
      },
      "UnitTestSchedulerObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CheckCount" : {
               "my $Success = $UnitTestSchedulerObject->CheckCount(\n    UnitTestObject => $Self,\n    Count          => '2',\n    Message        => \"2 'AsynchronousExecutor' tasks added\",    # optional\n    Type           => 'AsynchronousExecutor',                    # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "CleanUp" : {
               "my $Success = $UnitTestSchedulerObject->CleanUp(\n    Type => 'AsynchronousExecutor', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Execute" : {
               "my $Success = $UnitTestSchedulerObject->Execute(\n    Type => 'AsynchronousExecutor', # optional\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $UnitTestSchedulerObject = $Kernel::OM->Get('Kernel::System::UnitTest::Scheduler');",
         "Package" : "Kernel::System::UnitTest::Scheduler"
      },
      "UnitTestWebUserAgentObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "LastRequestGet" : {
               "my %Request = $UnitTestWebUserAgentObject->LastRequestGet();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "LastResponseGet" : {
               "my %Response = $UnitTestWebUserAgentObject->LastResponseGet();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Mock" : {
               "my $Success = $UnitTestWebUserAgentObject->Mock(\n    URL            => qr/testserver\\/success/,\n    Status         => 'OK',\n    StatusCode     => '200',\n    Header         => [ 'Content-Type' => 'application/json' ],\n    Body           => '{ \"access_token\": \"123\", \"token_type\": \"ABC\" }',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Reset" : {
               "my $Success = $UnitTestWebUserAgentObject->Reset();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $UnitTestWebUserAgentObject = $Kernel::OM->Get('Kernel::System::UnitTest::WebUserAgent');",
         "Package" : "Kernel::System::UnitTest::WebUserAgent"
      },
      "UnitTestWebserviceObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "CreateGenericInterfaceMappingObject" : {
               "my $MappingObject = $UnitTestWebserviceObject->CreateGenericInterfaceMappingObject(\n    UnitTestObject    => $Self,\n    WebserviceName    => 'MyWebservice',\n    CommunicationType => 'Provider',\n    MappingConfig     => {\n        Type => 'MyMapping', # name of mapping module\n        Config => {\n            # ...\n        },\n    },\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "InvokerFunctionCall" : {
               "my $Success = $UnitTestWebserviceObject->InvokerFunctionCall(\n    Webservice => 'webservice-name',\n    Invoker    => 'invoker-name',\n    Function   => 'function',\n    Data       => {},\n    ObjectModifyFunction => sub {\n        my (%Params) = @_;\n\n        $Params{Object}->{BackendObject}->{MessageName} = 'SEND_UPDATE';\n\n        return 1;\n    },\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Success = $UnitTestWebserviceObject->InvokerFunctionCall(\n    Webservice => 'webservice-name',\n    Invoker    => 'invoker-name',\n    Function   => 'function',\n    Data       => {},\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Mock" : {
               "my $Result = $UnitTestWebserviceObject->Mock(\n    InvokerName123 => [\n        {\n            Data => {\n                OutgoingData => 'Value'\n            },\n            Result => {\n                Success      => 1,\n                ErrorMessage => '',\n                Data         => {\n                    YAY => 'so true',\n                },\n            }\n        },\n        ...\n    ],\n    ...\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "MockFromFile" : {
               "$UnitTestWebserviceObject->MockFromFile(\n    Location => $ConfigObject->Get('Home') . \"/misc/mocks/WebserviceName/SomeInvoker.json\";\n    Invoker    => 'SomeInvoker',\n    Data       => {\n\n    }\n);" : [
                  "6.4",
                  "6.5"
               ],
               "$UnitTestWebserviceObject->MockFromFile(\n    Webservice => 'ExampleWebservice',\n    Invoker    => 'SomeInvoker',\n    Data       => {\n\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "OperationFunctionCall" : {
               "my $Success = $UnitTestWebserviceObject->OperationFunctionCall(\n    Webservice           => 'webservice-name',\n    Operation            => 'operation-name',\n    Function             => 'function',\n    Data                 => {},\n    ObjectModifyFunction => sub {\n        my (%Params) = @_;\n\n        $Params{Object}->{BackendObject}->{MessageName} = 'SEND_UPDATE';\n\n        return 1;\n    },\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Success = $UnitTestWebserviceObject->OperationFunctionCall(\n    Webservice    => 'webservice-name',\n    Operation     => 'operation-name',\n    Function      => 'function',\n    Data          => {},\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Process" : {
               "my $Response = $UnitTestWebserviceObject->Process(\n    UnitTestObject => $Self,\n    Webservice     => 'Name123', # or\n    WebserviceID   => $WebserviceID,\n    Operation      => 'DesiredOperation',\n    Payload        => {\n        ...\n    },\n    Response => {               # optional, you can validate the response manually in the unit test via $Self->IsDeeply()\n        Success      => 1,\n        ErrorMessage => '',\n        Data         => {\n            ...\n        },\n    }\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Result" : {
               "my $Result = $UnitTestWebserviceObject->Result();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "SchedulerCleanUp" : {
               "my $Success = $UnitTestWebserviceObject->SchedulerCleanUp(\n    UnitTestObject => $Self,\n    Type           => 'AsynchronousExecutor', # optional, default is 'GenericInterface'\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Success = $UnitTestWebserviceObject->SchedulerCleanUp(\n    UnitTestObject => $Self,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "SchedulerRunAll" : {
               "my $Success = $UnitTestWebserviceObject->SchedulerRunAll(\n    UnitTestObject => $Self,\n    Type           => 'AsynchronousExecutor', # optional, default is 'GenericInterface'\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my $Success = $UnitTestWebserviceObject->SchedulerRunAll(\n    UnitTestObject => $Self,\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "ValidateResult" : {
               "my $Result = $UnitTestWebserviceObject->ValidateResult(\n    UnitTestObject => $Self,\n    RequestCount   => 1, # default, defines the number of requests that should have been processed\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $UnitTestWebserviceObject = $Kernel::OM->Get('Kernel::System::UnitTest::Webservice');",
         "Package" : "Kernel::System::UnitTest::Webservice"
      },
      "UserObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "GenerateRandomPassword" : {
               "my $Password = $UserObject->GenerateRandomPassword(\n    Size => 16,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Password = $UserObject->GenerateRandomPassword();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetPreferences" : {
               "my %Preferences = $UserObject->GetPreferences(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "GetUserData" : {
               "my %User = $UserObject->GetUserData(\n    User          => 'franz',\n    Valid         => 1,       # not required -> 0|1 (default 0)\n                              # returns only data if user is valid\n    NoOutOfOffice => 1,       # not required -> 0|1 (default 0)\n                              # returns data without out of office infos\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %User = $UserObject->GetUserData(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SearchPreferences" : {
               "my %UserList = $UserObject->SearchPreferences(\n    Key   => 'UserEmail',\n    Value => 'email@example.com',   # optional, limit to a certain value/pattern\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SetPassword" : {
               "$UserObject->SetPassword(\n    UserLogin => 'some-login',\n    PW        => 'some-new-password'\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "SetPreferences" : {
               "$UserObject->SetPreferences(\n    Key    => 'UserComment',\n    Value  => 'some comment',\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TokenCheck" : {
               "my $Valid = $UserObject->TokenCheck(\n    Token  => $Token,\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "TokenGenerate" : {
               "my $Token = $UserObject->TokenGenerate(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "UserAdd" : {
               "my $UserID = $UserObject->UserAdd(\n    UserFirstname => 'Huber',\n    UserLastname  => 'Manfred',\n    UserLogin     => 'mhuber',\n    UserPw        => 'some-pass', # not required\n    UserEmail     => 'email@example.com',\n    UserMobile    => '1234567890', # not required\n    ValidID       => $ValidID,\n    ChangeUserID  => $ChangeUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "UserList" : {
               "my %List = $UserObject->UserList(\n    Type          => 'Short', # Short|Long, default Short\n    Valid         => 1,       # default 1\n    NoOutOfOffice => 1,       # (optional) default 0\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "UserLoginExistsCheck" : {
               "$Exist = $UserObject->UserLoginExistsCheck(\n    UserLogin => 'Some::UserLogin',\n    UserID => $UserID, # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "UserLookup" : {
               "my $UserID = $UserObject->UserLookup(\n    UserLogin => 'some_user_login',\n    Silent    => 1, # optional, don't generate log entry if user was not found\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $UserLogin = $UserObject->UserLookup(\n    UserID => $UserID,\n    Silent => 1, # optional, don't generate log entry if user was not found\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "UserName" : {
               "my $Name = $UserObject->UserName(\n    User => 'some-login',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Name = $UserObject->UserName(\n    UserID => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "UserSearch" : {
               "my %List = $UserObject->UserSearch(\n    PostMasterSearch => 'email@example.com',\n    Valid            => 1, # not required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %List = $UserObject->UserSearch(\n    Search => '*some*', # also 'hans+huber' possible\n    Valid  => 1, # not required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my %List = $UserObject->UserSearch(\n    UserLogin => '*some*',\n    Limit     => 50,\n    Valid     => 1, # not required\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "UserUpdate" : {
               "$UserObject->UserUpdate(\n    UserID        => $UserID,\n    UserFirstname => 'Huber',\n    UserLastname  => 'Manfred',\n    UserLogin     => 'mhuber',\n    UserPw        => 'some-pass', # not required\n    UserEmail     => 'email@example.com',\n    UserMobile    => '1234567890', # not required\n    ValidID       => $ValidID,\n    ChangeUserID  => $ChangeUserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $UserObject = $Kernel::OM->Get('Kernel::System::User');",
         "Package" : "Kernel::System::User"
      },
      "UtilObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Base64DeepEncode" : {
               "my $Base64EncodedData = $UtilObject->Base64DeepEncode(\n    # Data can be a scalar, hash or array\n    Data => {\n        Article => {\n            # ...\n        },\n        # ...\n    },\n    HashKeys => [\n        # All 'Body' elements of array $Hash->{Articles} will be base-64 encoded.\n        # Also can mean: $Hash->{Articles}->{Body}, if 'Articles' is a hash.\n        # Will encode nothing if last key ('Body') cannot be reached or is not a scalar/string.\n        'Articles->Body',\n\n        'QueueData->Comment',\n        # ...\n    ],\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DataStructureRemoveElements" : {
               "my $Data = $UtilObject->DataStructureRemoveElements(\n    # Data can be a scalar, hash or array\n    Data => {\n        Article => {\n            # ...\n        },\n        # ...\n    },\n    HashKeys => [\n        # All 'Body' elements of array $Hash->{Articles} will be removed.\n        # Also can mean: $Hash->{Articles}->{Body}, if 'Articles' is a hash.\n        # Will remove nothing if last key ('Body') cannot be reached or is not a scalar/string.\n        'Articles->Body',\n\n        'QueueData->Comment',\n        # ...\n    ],\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "GetInstalledDBCRUDObjects" : {
               "my $DBCRUDObjects = $UtilObject->GetInstalledDBCRUDObjects();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsFrontendContext" : {
               "my $IsFrontendContext = $UtilObject->IsFrontendContext();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "IsITSMInstalled" : {
               "my $IsITSMInstalled = $UtilObject->IsITSMInstalled();" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $UtilObject = $Kernel::OM->Get('Kernel::System::Util');",
         "Package" : "Kernel::System::Util"
      },
      "ValidObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "ValidIDsGet" : {
               "my @List = $ValidObject->ValidIDsGet();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValidList" : {
               "my %List = $ValidObject->ValidList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "ValidLookup" : {
               "my $Valid = $ValidObject->ValidLookup(\n    ValidID => $ValidID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $ValidID = $ValidObject->ValidLookup(\n    Valid => 'valid',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ValidObject = $Kernel::OM->Get('Kernel::System::Valid');",
         "Package" : "Kernel::System::Valid"
      },
      "VirtualFSObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Delete" : {
               "my $Success = $VirtualFSObject->Delete(\n    Filename => '/Object/SomeFileName.txt',\n\n    # optional\n    DisableWarnings => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Find" : {
               "my @List = $VirtualFSObject->Find(\n    Filename    => '/Object/some_what/*.txt',\n    Preferences => {\n        ContentType => 'text/plain',\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @List = $VirtualFSObject->Find(\n    Filename => '/Object/some_what/*.txt',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @List = $VirtualFSObject->Find(\n    Preferences => {\n        ContentType => 'text/plain',\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Read" : {
               "my %File = $VirtualFSObject->Read(\n    Filename => '/Object/some/name.txt',\n    Mode     => 'utf8',\n\n    # optional\n    DisableWarnings => 1,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Write" : {
               "my $Success = $VirtualFSObject->Write(\n    Content  => \\$Content,\n    Filename => '/Object/SomeFileName.txt',\n    Mode     => 'binary'            # (binary|utf8)\n\n    # optional, preferences data\n    Preferences => {\n        ContentType        => 'text/plain',\n        ContentID          => $ContentID,\n        ContentAlternative => 1,\n        SomeCustomParams   => 'with our own value',\n    },\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $VirtualFSObject = $Kernel::OM->Get('Kernel::System::VirtualFS');",
         "Package" : "Kernel::System::VirtualFS"
      },
      "WebUploadCacheObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "FormIDAddFile" : {
               "$WebUploadCacheObject->FormIDAddFile(\n    FormID      => $FormID,\n    Filename    => 'somefile.html',\n    Content     => $FileInString,\n    ContentID   => $ContentID,\n    ContentType => 'text/html',\n    Disposition => 'inline', # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "$WebUploadCacheObject->FormIDAddFile(\n    FormID      => $FormID,\n    Filename    => 'somefile.html',\n    Content     => $FileInString,\n    ContentType => 'text/html',\n    Disposition => 'inline', # optional\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormIDCleanUp" : {
               "$WebUploadCacheObject->FormIDCleanUp();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormIDCreate" : {
               "my $FormID = $WebUploadCacheObject->FormIDCreate();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormIDGetAllFilesData" : {
               "my @Data = $WebUploadCacheObject->FormIDGetAllFilesData(\n    FormID => $FormID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormIDGetAllFilesMeta" : {
               "my @Data = $WebUploadCacheObject->FormIDGetAllFilesMeta(\n    FormID => $FormID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormIDRemove" : {
               "$WebUploadCacheObject->FormIDRemove( FormID => $FormID );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "FormIDRemoveFile" : {
               "$WebUploadCacheObject->FormIDRemoveFile(\n    FormID => $FormID,\n    FileID => $FileID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $WebUploadCacheObject = $Kernel::OM->Get('Kernel::System::Web::UploadCache');",
         "Package" : "Kernel::System::Web::UploadCache"
      },
      "WebUserAgentObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Request" : {
               "my %Response = $WebUserAgentObject->Request(\n    URL          => 'http://example.com/someurl',\n    Type         => 'POST',\n    Data         => [ Attribute => 'Value', Attribute => 'OtherValue' ],\n    Credentials  => {\n        User     => 'otrs_user',\n        Password => 'otrs_password',\n        Realm    => 'OTRS Unittests',\n        Location => 'download.znuny.org:80',\n    },\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n\n    # Returns the response content (if available) if the request was not successful.\n    # Otherwise only the status will be returned (default behavior).\n    ReturnResponseContentOnError => 1, # optional\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL          => 'http://example.com/someurl',\n    Type         => 'POST',\n    Data         => [ Attribute => 'Value', Attribute => 'OtherValue' ],\n    Credentials  => {\n        User     => 'otrs_user',\n        Password => 'otrs_password',\n        Realm    => 'OTRS Unittests',\n        Location => 'download.znuny.org:80',\n    },\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n);" : [
                  "6.0"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL    => 'http://example.com/someurl',\n    Type   => 'POST',\n    Data   => [ Attribute => 'Value', Attribute => 'OtherValue' ],\n    Header => {\n        Authorization => 'Basic xxxx',\n        Content_Type  => 'text/json',\n    },\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n\n    # Returns the response content (if available) if the request was not successful.\n    # Otherwise only the status will be returned (default behavior).\n    ReturnResponseContentOnError => 1, # optional\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL    => 'http://example.com/someurl',\n    Type   => 'POST',\n    Data   => [ Attribute => 'Value', Attribute => 'OtherValue' ],\n    Header => {\n        Authorization => 'Basic xxxx',\n        Content_Type  => 'text/json',\n    },\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n);" : [
                  "6.0"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL  => 'http://example.com/someurl',\n    Type => 'POST',\n    Data => [ Attribute => 'Value', Attribute => 'OtherValue' ],\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n\n    # Returns the response content (if available) if the request was not successful.\n    # Otherwise only the status will be returned (default behavior).\n    ReturnResponseContentOnError => 1, # optional\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL  => 'http://example.com/someurl',\n    Type => 'POST',\n    Data => [ Attribute => 'Value', Attribute => 'OtherValue' ],\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n);" : [
                  "6.0"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL  => 'http://example.com/someurl',\n    Type => 'POST',\n    Data => { Attribute1 => 'Value', Attribute2 => 'Value2' },\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n\n    # Returns the response content (if available) if the request was not successful.\n    # Otherwise only the status will be returned (default behavior).\n    ReturnResponseContentOnError => 1, # optional\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL  => 'http://example.com/someurl',\n    Type => 'POST',\n    Data => { Attribute1 => 'Value', Attribute2 => 'Value2' },\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n);" : [
                  "6.0"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL => 'http://example.com/somedata.xml',\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n\n    # Returns the response content (if available) if the request was not successful.\n    # Otherwise only the status will be returned (default behavior).\n    ReturnResponseContentOnError => 1, # optional\n);" : [
                  "6.4",
                  "6.5"
               ],
               "my %Response = $WebUserAgentObject->Request(\n    URL => 'http://example.com/somedata.xml',\n    SkipSSLVerification => 1, # (optional)\n    NoLog               => 1, # (optional)\n);" : [
                  "6.0"
               ]
            }
         },
         "ObjectManager" : "my $WebUserAgentObject = Kernel::System::WebUserAgent",
         "Package" : "Kernel::System::WebUserAgent"
      },
      "WebserviceHistoryObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "WebserviceHistoryAdd" : {
               "my $ID = $WebserviceHistoryObject->WebserviceHistoryAdd(\n    WebserviceID => $WebserviceID,\n    Config       => {\n        ...\n    },\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceHistoryDelete" : {
               "my $Success = $WebserviceHistoryObject->WebserviceHistoryDelete(\n    WebserviceID => $WebserviceID,\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceHistoryGet" : {
               "my $WebserviceHistory = $WebserviceHistoryObject->WebserviceHistoryGet(\n    ID => 123,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceHistoryList" : {
               "my @List = $WebserviceHistoryObject->WebserviceHistoryList(\n    WebserviceID => $WebserviceID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceHistoryUpdate" : {
               "my $Success = $WebserviceHistoryObject->WebserviceHistoryUpdate(\n    ID           => 123,\n    WebserviceID => $WebserviceID\n    Config       => $ConfigHashRef,\n    UserID       => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $WebserviceHistoryObject = $Kernel::OM->Get('Kernel::System::GenericInterface::WebserviceHistory');",
         "Package" : "Kernel::System::GenericInterface::WebserviceHistory"
      },
      "WebserviceObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "WebserviceAdd" : {
               "my $ID = $WebserviceObject->WebserviceAdd(\n    Name    => 'some name',\n    Config  => $ConfigHashRef,\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceConfigReplace" : {
               "my $Data   = '<OTRS_CONFIG_Home>';\nmy $Result = $WebserviceObject->WebserviceConfigReplace($Data);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceDelete" : {
               "my $Success = $WebserviceObject->WebserviceDelete(\n    ID      => 123,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceGet" : {
               "my $Webservice = $WebserviceObject->WebserviceGet(\n    ID   => 123,            # ID or Name must be provided\n    Name => 'MyWebservice',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceList" : {
               "my $List = $WebserviceObject->WebserviceList(\n    Valid => 0, # optional, defaults to 1\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $List = $WebserviceObject->WebserviceList();" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "WebserviceUpdate" : {
               "my $Success = $WebserviceObject->WebserviceUpdate(\n    ID      => 123,\n    Name    => 'some name',\n    Config  => $ConfigHashRef,\n    ValidID => $ValidID,\n    UserID  => $UserID,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $WebserviceObject = $Kernel::OM->Get('Kernel::System::GenericInterface::Webservice');",
         "Package" : "Kernel::System::GenericInterface::Webservice"
      },
      "X509CertificateObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "IsSupported" : {
               "my $X509CertificateObjectIsSupported = $X509CertificateObject->IsSupported();" : [
                  "6.4",
                  "6.5"
               ]
            },
            "Parse" : {
               "my $X509Certificate = $X509CertificateObject->Parse(\n\n    # String or FilePath\n    String   => '...',\n    FilePath => '/home/user1/cert.pem',\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $X509CertificateObject = $Kernel::OM->Get('Kernel::System::X509Certificate');",
         "Package" : "Kernel::System::X509Certificate"
      },
      "XMLObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "XMLHash2D" : {
               "my %Hash = $XMLObject->XMLHash2D( XMLHash => \\@XMLHash );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLHash2XML" : {
               "my $XMLString = $XMLObject->XMLHash2XML(@XMLHash);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLHashAdd" : {
               "my $AutoKey = $XMLObject->XMLHashAdd(\n    Type             => 'SomeType',\n    KeyAutoIncrement => 1,\n    XMLHash          => \\@XMLHash,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my $Key = $XMLObject->XMLHashAdd(\n    Type    => 'SomeType',\n    Key     => '123',\n    XMLHash => \\@XMLHash,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLHashDelete" : {
               "$XMLObject->XMLHashDelete(\n    Type => 'SomeType',\n    Key  => '123',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLHashGet" : {
               "my @XMLHash = $XMLObject->XMLHashGet(\n    Type  => 'SomeType',\n    Key   => '123',\n    Cache => 0,   # (optional) do not use cached data\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @XMLHash = $XMLObject->XMLHashGet(\n    Type => 'SomeType',\n    Key  => '123',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLHashList" : {
               "my @Keys = $XMLObject->XMLHashList(\n    Type => 'SomeType',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLHashMove" : {
               "$XMLObject->XMLHashMove(\n    OldType => 'SomeType',\n    OldKey  => '123',\n    NewType => 'NewType',\n    NewKey  => '321',\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLHashSearch" : {
               "my @Keys = $XMLObject->XMLHashSearch(\n    Type => 'SomeType',\n    What => [\n        # each array element is a and condition\n        {\n            # or condition in hash\n            \"[%]{'ElementA'}[%]{'ElementB'}[%]{'Content'}\" => '%contentA%',\n            \"[%]{'ElementA'}[%]{'ElementC'}[%]{'Content'}\" => '%contentA%',\n        },\n        {\n            \"[%]{'ElementA'}[%]{'ElementB'}[%]{'Content'}\" => '%contentB%',\n            \"[%]{'ElementA'}[%]{'ElementC'}[%]{'Content'}\" => '%contentB%',\n        },\n        {\n            # use array reference if different content with same key was searched\n            \"[%]{'ElementA'}[%]{'ElementB'}[%]{'Content'}\" => ['%contentC%', '%contentD%', '%contentE%'],\n            \"[%]{'ElementA'}[%]{'ElementC'}[%]{'Content'}\" => ['%contentC%', '%contentD%', '%contentE%'],\n        },\n    ],\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLHashUpdate" : {
               "$XMLObject->XMLHashUpdate(\n    Type    => 'SomeType',\n    Key     => '123',\n    XMLHash => \\@XMLHash,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLParse" : {
               "my @XMLStructure = $XMLObject->XMLParse( String => $FileString );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ],
               "my @XMLStructure = $XMLObject->XMLParse( String => \\$FileStringScalar );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLParse2XMLHash" : {
               "my @XMLHash = $XMLObject->XMLParse2XMLHash( String => $FileString );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "XMLStructure2XMLHash" : {
               "my @XMLHash = $XMLObject->XMLStructure2XMLHash( XMLStructure => \\@XMLStructure );" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $XMLObject = $Kernel::OM->Get('Kernel::System::XML');",
         "Package" : "Kernel::System::XML"
      },
      "YAMLObject" : {
         "FrameworkVersion" : [
            "6.0",
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "Dump" : {
               "my $YAMLString = $YAMLObject->Dump(\n    Data     => $Data,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            },
            "Load" : {
               "my $PerlStructureScalar = $YAMLObject->Load(\n    Data => $YAMLString,\n);" : [
                  "6.0",
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $YAMLObject = $Kernel::OM->Get('Kernel::System::YAML');",
         "Package" : "Kernel::System::YAML"
      },
      "ZnunyHelperObject" : {
         "FrameworkVersion" : [
            "6.4",
            "6.5"
         ],
         "Functions" : {
            "DynamicFieldFieldOrderAfterFieldGet" : {
               "my $FieldOrder = $ZnunyHelperObject->DynamicFieldFieldOrderAfterFieldGet(\n    Name => 'TestDynamicField1',\n);" : [
                  "6.4",
                  "6.5"
               ]
            },
            "DynamicFieldValueCreate" : {
               "my $Success = $ZnunyHelperObject->DynamicFieldValueCreate(\n    Name  => 'DynamicFieldName',\n    Key   => 'ValueDropdown',\n    Value => 'ValueDropdown',    # optional (Parameter \"Key\" is default)\n);" : [
                  "6.4",
                  "6.5"
               ]
            }
         },
         "ObjectManager" : "my $ZnunyHelperObject = $Kernel::OM->Get('Kernel::System::ZnunyHelper');",
         "Package" : "Kernel::System::ZnunyHelper"
      }
   }
}
